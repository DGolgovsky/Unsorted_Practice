balance_median	get_10_median.cpp	/^auto balance_median(It const &v) \/\/ ~O(N*log(N))$/;"	f
gcd	EuclideGCD.cpp	/^Int gcd(Int a, Int b) {    $/;"	f
main	EuclideGCD.cpp	/^int main(void)$/;"	f
main	Pyfagor.cpp	/^int main(void)$/;"	f
SmartPointer	SmartPointer.cpp	/^class SmartPointer$/;"	c	file:
SmartPointer	SmartPointer.cpp	/^	SmartPointer(T * ptr) {$/;"	f	class:SmartPointer
SmartPointer	SmartPointer.cpp	/^	SmartPointer(SmartPointer<T> &sptr) {$/;"	f	class:SmartPointer
operator =	SmartPointer.cpp	/^	SmartPointer<T> &operator=(SmartPointer<T> &sptr) {$/;"	f	class:SmartPointer
~SmartPointer	SmartPointer.cpp	/^	~SmartPointer() {$/;"	f	class:SmartPointer
operator *	SmartPointer.cpp	/^	T operator*() {$/;"	f	class:SmartPointer
remove	SmartPointer.cpp	/^	void remove() {$/;"	f	class:SmartPointer
ref	SmartPointer.cpp	/^	T *ref;$/;"	m	class:SmartPointer	file:
ref_count	SmartPointer.cpp	/^	unsigned *ref_count;$/;"	m	class:SmartPointer	file:
Expression	SmartPointer.hpp	/^class Expression$/;"	c
evaluate	SmartPointer.hpp	/^	virtual double evaluate() const = 0;$/;"	p	class:Expression
~Expression	SmartPointer.hpp	/^	virtual ~Expression() {}$/;"	f	class:Expression
Number	SmartPointer.hpp	/^class Number: public Expression$/;"	c
value	SmartPointer.hpp	/^	double value;$/;"	m	class:Number
Number	SmartPointer.hpp	/^	Number(double value) : value(value) {}$/;"	f	class:Number
evaluate	SmartPointer.hpp	/^	double evaluate() const { return value; }$/;"	f	class:Number
BinaryOperation	SmartPointer.hpp	/^class BinaryOperation: Expression$/;"	c
left	SmartPointer.hpp	/^	Expression const *left;$/;"	m	class:BinaryOperation
right	SmartPointer.hpp	/^	Expression const *right;$/;"	m	class:BinaryOperation
op	SmartPointer.hpp	/^	char op;$/;"	m	class:BinaryOperation
BinaryOperation	SmartPointer.hpp	/^	BinaryOperation(Expression const *left, char op, Expression const *right)$/;"	f	class:BinaryOperation
evaluate	SmartPointer.hpp	/^	double evaluate() const { $/;"	f	class:BinaryOperation
~BinaryOperation	SmartPointer.hpp	/^	~BinaryOperation() {$/;"	f	class:BinaryOperation
FunctionCall	SmartPointer.hpp	/^struct FunctionCall;$/;"	x
Variable	SmartPointer.hpp	/^struct Variable;$/;"	x
ScopedPtr	SmartPointer.hpp	/^class ScopedPtr$/;"	c
operator =	SmartPointer.hpp	/^	ScopedPtr &operator=(const ScopedPtr &other) {}$/;"	f	class:ScopedPtr
ScopedPtr	SmartPointer.hpp	/^	ScopedPtr(const ScopedPtr &other) {}$/;"	f	class:ScopedPtr
ptr_	SmartPointer.hpp	/^	Expression *ptr_;$/;"	m	class:ScopedPtr
ScopedPtr	SmartPointer.hpp	/^	explicit ScopedPtr(Expression *ptr = 0) {$/;"	f	class:ScopedPtr
~ScopedPtr	SmartPointer.hpp	/^	~ScopedPtr() {$/;"	f	class:ScopedPtr
get	SmartPointer.hpp	/^	Expression *get() const {$/;"	f	class:ScopedPtr
release	SmartPointer.hpp	/^	Expression *release() {$/;"	f	class:ScopedPtr
reset	SmartPointer.hpp	/^	void reset(Expression *ptr = 0) {$/;"	f	class:ScopedPtr
operator *	SmartPointer.hpp	/^	Expression &operator*() const {$/;"	f	class:ScopedPtr
operator ->	SmartPointer.hpp	/^	Expression *operator->() const {$/;"	f	class:ScopedPtr
SharedPtr	SmartPointer.hpp	/^class SharedPtr$/;"	c
incr	SmartPointer.hpp	/^	void incr() {$/;"	f	class:SharedPtr
decr	SmartPointer.hpp	/^	void decr() {$/;"	f	class:SharedPtr
ptr	SmartPointer.hpp	/^	Expression *ptr;$/;"	m	class:SharedPtr
p_cnt	SmartPointer.hpp	/^	size_t *p_cnt;$/;"	m	class:SharedPtr
SharedPtr	SmartPointer.hpp	/^	explicit SharedPtr(Expression *ptr = 0) {$/;"	f	class:SharedPtr
SharedPtr	SmartPointer.hpp	/^	SharedPtr(const SharedPtr &other) {$/;"	f	class:SharedPtr
operator =	SmartPointer.hpp	/^	SharedPtr &operator=(const SharedPtr &other) {$/;"	f	class:SharedPtr
~SharedPtr	SmartPointer.hpp	/^	~SharedPtr() {$/;"	f	class:SharedPtr
reset	SmartPointer.hpp	/^	void reset(Expression *ptr = 0) {$/;"	f	class:SharedPtr
get	SmartPointer.hpp	/^	Expression *get() const {$/;"	f	class:SharedPtr
get_counter	SmartPointer.hpp	/^	size_t *get_counter() const {$/;"	f	class:SharedPtr
count	SmartPointer.hpp	/^	size_t count() const {$/;"	f	class:SharedPtr
empty	SmartPointer.hpp	/^	bool empty() const {$/;"	f	class:SharedPtr
operator *	SmartPointer.hpp	/^	Expression &operator*() const {$/;"	f	class:SharedPtr
operator ->	SmartPointer.hpp	/^	Expression *operator->() const {$/;"	f	class:SharedPtr
swapr	Swap.cpp	/^void swapr (int &a, int &b);$/;"	p	file:
swapp	Swap.cpp	/^void swapp (int *p, int *q);$/;"	p	file:
swapv	Swap.cpp	/^void swapv (int a, int b);$/;"	p	file:
print_result	Swap.cpp	/^void print_result (int a, int b);$/;"	p	file:
main	Swap.cpp	/^int main(void)$/;"	f
print_result	Swap.cpp	/^void print_result (int a, int b)$/;"	f
swapr	Swap.cpp	/^void swapr (int &a, int &b)$/;"	f
swapp	Swap.cpp	/^void swapp (int *p, int *q)$/;"	f
swapv	Swap.cpp	/^void swapv (int a, int b)$/;"	f
ICloneable	ValueHolder.Any.cpp	/^struct ICloneable$/;"	s	file:
clone	ValueHolder.Any.cpp	/^	virtual ICloneable *clone() const = 0;$/;"	p	struct:ICloneable	file:
~ICloneable	ValueHolder.Any.cpp	/^	virtual ~ICloneable() { }$/;"	f	struct:ICloneable
ValueHolder	ValueHolder.Any.cpp	/^struct ValueHolder : ICloneable$/;"	s	file:
ValueHolder	ValueHolder.Any.cpp	/^	ValueHolder(const T &data): data_(data) {}$/;"	f	struct:ValueHolder
data_	ValueHolder.Any.cpp	/^	T data_;$/;"	m	struct:ValueHolder	file:
clone	ValueHolder.Any.cpp	/^	ValueHolder *clone() const {$/;"	f	struct:ValueHolder
Any	ValueHolder.Any.cpp	/^class Any$/;"	c	file:
ptr	ValueHolder.Any.cpp	/^	ICloneable *ptr;$/;"	m	class:Any	file:
Any	ValueHolder.Any.cpp	/^	Any() : ptr(0) {}$/;"	f	class:Any
Any	ValueHolder.Any.cpp	/^	Any(const V &v) : ptr(new ValueHolder<V>(v)) {}	$/;"	f	class:Any
Any	ValueHolder.Any.cpp	/^	Any(Any const &other) : ptr(other.ptr ? other.ptr->clone() : 0) {}$/;"	f	class:Any
operator =	ValueHolder.Any.cpp	/^	Any &operator=(Any const &other) {$/;"	f	class:Any
operator =	ValueHolder.Any.cpp	/^	Any &operator=(A const &other) {$/;"	f	class:Any
~Any	ValueHolder.Any.cpp	/^	~Any() { delete ptr; }$/;"	f	class:Any
cast	ValueHolder.Any.cpp	/^	T *cast() {$/;"	f	class:Any
Array	array.hpp	/^struct Array$/;"	s
data_	array.hpp	/^	Type	*data_;$/;"	m	struct:Array
size_	array.hpp	/^	SizeT	size_;$/;"	m	struct:Array
counter_	array.hpp	/^	mutable SizeT counter_;$/;"	m	struct:Array
Array	array.hpp	/^	explicit Array(SizeT size)$/;"	f	struct:Array
Array	array.hpp	/^	Array(Array const &a)$/;"	f	struct:Array
operator =	array.hpp	/^	Array &operator=(Array const &a) {$/;"	f	struct:Array
~Array	array.hpp	/^	~Array() { delete [] data_; }$/;"	f	struct:Array
swap	array.hpp	/^	void swap(Array &a) {$/;"	f	struct:Array
get	array.hpp	/^	Type get(SizeT i) const {$/;"	f	struct:Array
get	array.hpp	/^	Type &get(SizeT i) {$/;"	f	struct:Array
size	array.hpp	/^	SizeT size() const {$/;"	f	struct:Array
resize	array.hpp	/^	void resize(SizeT nsize) {$/;"	f	struct:Array
operator []	array.hpp	/^	CRet operator[](SizeT i) const { return data_[i]; }$/;"	f	struct:Array
operator []	array.hpp	/^	Type &operator[](SizeT i) { return data_[i]; }$/;"	f	struct:Array
create_array2d	array2d.cpp	/^int ** create_array2d(size_t a, size_t b)$/;"	f
free_array2d	array2d.cpp	/^void free_array2d(int ** m, size_t a, size_t b)$/;"	f
main	array2d.cpp	/^int main()$/;"	f
create_a2d	array_2d.cpp	/^int **create_a2d(size_t row, size_t col)$/;"	f
delete_a2d	array_2d.cpp	/^void delete_a2d(int **m)$/;"	f
main	array_2d.cpp	/^int main(void)$/;"	f
Array	array_out.cpp	/^class Array$/;"	c	file:
size_	array_out.cpp	/^	size_t size_;$/;"	m	class:Array	file:
data_	array_out.cpp	/^	T      *data_;$/;"	m	class:Array	file:
Array	array_out.cpp	/^	explicit Array(size_t size = 0, const T& value = T())$/;"	f	class:Array
Array	array_out.cpp	/^	Array(const Array &a)$/;"	f	class:Array
~Array	array_out.cpp	/^	~Array() { delete [] data_; }$/;"	f	class:Array
operator =	array_out.cpp	/^	Array& operator=(const Array & a) {$/;"	f	class:Array
size	array_out.cpp	/^	size_t size() const { return size_; }$/;"	f	class:Array
operator []	array_out.cpp	/^	T& operator[](size_t i) { return data_[i]; }$/;"	f	class:Array
operator []	array_out.cpp	/^	const T& operator[](size_t i) const { return data_[i]; }$/;"	f	class:Array
flatten	array_out.cpp	/^void flatten(const Array<T> &array, std::ostream& out)$/;"	f
flatten	array_out.cpp	/^void flatten(const Array<int> &array, std::ostream& out)$/;"	f
flatten	array_out.cpp	/^void flatten(const Array<double> &array, std::ostream& out)$/;"	f
main	array_out.cpp	/^int main(void)$/;"	f
main	array_size.cpp	/^int main()$/;"	f
main	array_sum.c	/^int main(void)$/;"	f
Array	arrays.cpp	/^struct Array {$/;"	s	file:
Array	arrays.cpp	/^	explicit Array(SizeT size)$/;"	f	struct:Array
~Array	arrays.cpp	/^	~Array() { delete [] data_; }$/;"	f	struct:Array
size	arrays.cpp	/^	SizeT size() const { return size_; }$/;"	f	struct:Array
operator []	arrays.cpp	/^	CRet operator[](SizeT i) const { return data_[i]; }$/;"	f	struct:Array
operator []	arrays.cpp	/^	Type & operator[](SizeT i) { return data_[i]; }$/;"	f	struct:Array
data_	arrays.cpp	/^	Type *	data_;$/;"	m	struct:Array	file:
size_	arrays.cpp	/^	SizeT	size_;$/;"	m	struct:Array	file:
foo	arrays.cpp	/^void foo ()$/;"	f
Ints	arrays.cpp	/^typedef Array<int> Ints;$/;"	t	file:
IInts	arrays.cpp	/^typedef Array<Ints, size_t, Ints const&> IInts;$/;"	t	file:
bar	arrays.cpp	/^void bar()$/;"	f
main	arrays.cpp	/^int main()$/;"	f
main	ascii_#.cpp	/^int main()$/;"	f
main	b_pow_of_two.cpp	/^int main(void)$/;"	f
TEXT	binary_code.cpp	3;"	d	file:
main	binary_code.cpp	/^int main(void)$/;"	f
Person	binary_files.cpp	/^struct Person {$/;"	s	file:
name	binary_files.cpp	/^    char name[50];$/;"	m	struct:Person	file:
age	binary_files.cpp	/^    int age;$/;"	m	struct:Person	file:
height	binary_files.cpp	/^    double height;$/;"	m	struct:Person	file:
main	binary_files.cpp	/^int main()$/;"	f
node	binary_tree.cpp	/^struct node$/;"	s	file:
key_value	binary_tree.cpp	/^    int key_value;$/;"	m	struct:node	file:
p_left	binary_tree.cpp	/^    node* p_left;$/;"	m	struct:node	file:
p_right	binary_tree.cpp	/^    node* p_right;$/;"	m	struct:node	file:
insert	binary_tree.cpp	/^node* insert(node* p_tree, int key)$/;"	f
search	binary_tree.cpp	/^node* search(node* p_tree, int key)$/;"	f
destroy_tree	binary_tree.cpp	/^void destroy_tree(node* p_tree)$/;"	f
remove_max_node	binary_tree.cpp	/^node* remove_max_node(node* p_tree, node* p_max_node)$/;"	f
find_max	binary_tree.cpp	/^node* find_max(node* p_tree)$/;"	f
remove	binary_tree.cpp	/^node* remove(node* p_tree, int key)$/;"	f
main	bit.cpp	/^int main() {$/;"	f
bitSwapRequired	bitSwapRequired.cpp	/^int bitSwapRequired(int &a, int &b)$/;"	f
main	bitSwapRequired.cpp	/^int main(void)$/;"	f
S	boost_bind.cpp	/^class S {$/;"	c	file:
number	boost_bind.cpp	/^	const int number;$/;"	m	class:S	file:
S	boost_bind.cpp	/^	S(int i) : number(i) {}$/;"	f	class:S
print	boost_bind.cpp	/^	void print () {$/;"	f	class:S
create	boost_bind.cpp	/^shared_ptr<S> create() {$/;"	f
main	boost_bind.cpp	/^int main() {$/;"	f
S	boost_ptr.cpp	/^class S {$/;"	c	file:
S	boost_ptr.cpp	/^	S() {$/;"	f	class:S
~S	boost_ptr.cpp	/^	~S() {$/;"	f	class:S
copy	boost_ptr.cpp	/^weak_ptr<S> copy(shared_ptr<S> t) {$/;"	f
main	boost_ptr.cpp	/^int main() {$/;"	f
Car	cars.cpp	/^class Car$/;"	c	file:
mSpeed	cars.cpp	/^	size_t mSpeed;$/;"	m	class:Car	file:
mName	cars.cpp	/^	std::string mName;$/;"	m	class:Car	file:
Car	cars.cpp	/^	Car(const std::string& aName, size_t aSpeed)$/;"	f	class:Car
getSpeed	cars.cpp	/^	const size_t getSpeed() const {$/;"	f	class:Car
getName	cars.cpp	/^	const std::string& getName() const {$/;"	f	class:Car
maxSpeedModels	cars.cpp	/^void maxSpeedModels(const std::vector<Car>& cars)$/;"	f
main	cars.cpp	/^int main()$/;"	f
Cat	cats_virt_func.cpp	/^class Cat$/;"	c	file:
~Cat	cats_virt_func.cpp	/^    virtual ~Cat() {$/;"	f	class:Cat
askForFood	cats_virt_func.cpp	/^    void askForFood() const {$/;"	f	class:Cat
speak	cats_virt_func.cpp	/^    virtual void speak() const { cout << "Meow! "; }$/;"	f	class:Cat
eat	cats_virt_func.cpp	/^    void eat() const { cout << "*champing*" << endl; }$/;"	f	class:Cat
sayGoodbye	cats_virt_func.cpp	/^    virtual void sayGoodbye() const { cout << "Meow-meow!" << endl; }$/;"	f	class:Cat
CheshireCat	cats_virt_func.cpp	/^class CheshireCat : public Cat$/;"	c	file:
~CheshireCat	cats_virt_func.cpp	/^    ~CheshireCat() {$/;"	f	class:CheshireCat
speak	cats_virt_func.cpp	/^    void speak() const {$/;"	f	class:CheshireCat
sayGoodbye	cats_virt_func.cpp	/^    void sayGoodbye() const { cout << "Bye-bye! (:" << endl; }$/;"	f	class:CheshireCat
main	cats_virt_func.cpp	/^int main(void)$/;"	f
main	char_test.cpp	/^int main() {$/;"	f
to_bin	chuck.cpp	/^int to_bin(int dec) {$/;"	f
main	chuck.cpp	/^int main()$/;"	f
FirstClass	classes.cpp	/^class FirstClass    \/\/ базовый класс$/;"	c	file:
value	classes.cpp	/^    int value;$/;"	m	class:FirstClass	file:
FirstClass	classes.cpp	/^    FirstClass()$/;"	f	class:FirstClass
FirstClass	classes.cpp	/^    FirstClass( int input )$/;"	f	class:FirstClass
show_value	classes.cpp	/^    void show_value()$/;"	f	class:FirstClass
SecondClass	classes.cpp	/^class SecondClass : public FirstClass   \/\/ производный класс$/;"	c	file:
SecondClass	classes.cpp	/^    SecondClass() : FirstClass ()   \/\/ конструктор класса SecondClass вызывает конструктор класса FirstClass$/;"	f	class:SecondClass
SecondClass	classes.cpp	/^    SecondClass(int inputS) : FirstClass (inputS)   \/\/ inputS передается в конструктор с параметром класса FirstClass$/;"	f	class:SecondClass
ValueSqr	classes.cpp	/^    void ValueSqr () \/\/ возводит value в квадрат. Без спецификатора доступа protected эта функция не могла бы изменить значение value$/;"	f	class:SecondClass
main	classes.cpp	/^int main()$/;"	f
CppStudio	classes_2.cpp	/^class CppStudio     \/\/ имя класса$/;"	c	file:
day	classes_2.cpp	/^    int day,        \/\/ день$/;"	m	class:CppStudio	file:
month	classes_2.cpp	/^        month,      \/\/ месяц$/;"	m	class:CppStudio	file:
year	classes_2.cpp	/^        year;       \/\/ год$/;"	m	class:CppStudio	file:
CppStudio	classes_2.cpp	/^    CppStudio(int &date_day, int &date_month, int &date_year) \/\/ установка даты в формате дд.мм.гг$/;"	f	class:CppStudio
message	classes_2.cpp	/^    void message() {\/\/ функция (метод класса) выводящая сообщение на экран$/;"	f	class:CppStudio
getDate	classes_2.cpp	/^    void getDate() { \/* отобразить текущую дату *\/$/;"	f	class:CppStudio
main	classes_2.cpp	/^int main()$/;"	f
DisplayBits	combines.c	/^void DisplayBits(int a, int n)$/;"	f
main	combines.c	/^int main()$/;"	f
convert	convert.cpp	/^int convert(int a) {$/;"	f
main	convert.cpp	/^int main()$/;"	f
main	count_max.cpp	/^int main(void)$/;"	f
main	crazy_crements.cpp	/^int main(void)$/;"	f
fs	current_path_c++17.cpp	/^namespace fs = std::filesystem;$/;"	x	file:
main	current_path_c++17.cpp	/^int main()$/;"	f
date	date_struct.cpp	/^struct date$/;"	s	file:
day	date_struct.cpp	/^	int day, month, year;$/;"	m	struct:date	file:
month	date_struct.cpp	/^	int day, month, year;$/;"	m	struct:date	file:
year	date_struct.cpp	/^	int day, month, year;$/;"	m	struct:date	file:
s	date_struct.cpp	/^	char s;$/;"	m	struct:date	file:
date	date_struct.cpp	/^	date()$/;"	f	struct:date
main	date_struct.cpp	/^int main(void)$/;"	f
DEBUG_H	debug.h	2;"	d
PDEBUG	debug.h	5;"	d
PDEBUG	debug.h	8;"	d
PDEBUG	debug.h	9;"	d
main	degree.cpp	/^int main() {$/;"	f
WON	dice.c	10;"	d	file:
LOSE	dice.c	11;"	d	file:
rollDice	dice.c	/^int rollDice(void);$/;"	p	file:
playGame	dice.c	/^int playGame(void);$/;"	p	file:
rollDice	dice.c	/^int rollDice(void) {$/;"	f
playGame	dice.c	/^int playGame(void){$/;"	f
main	dice.c	/^int main (void){$/;"	f
create_array2d	dynamic_array.cpp	/^int ** create_array2d(const int& rows, const int& cols)$/;"	f
transpose	dynamic_array.cpp	/^int ** transpose(const int * const * m_, const int& rows, const int& cols)$/;"	f
show	dynamic_array.cpp	/^void show(const int * const * m_, const int& rows, const int& cols)$/;"	f
destroy	dynamic_array.cpp	/^void destroy(int** m_, const int& rows)$/;"	f
main	dynamic_array.cpp	/^int main(void)$/;"	f
main	ex_temp.cpp	/^int main()$/;"	f
final	fib.cpp	/^class Fibonacci final {$/;"	c	file:
get_remainder	fib.cpp	/^  static int get_remainder(int64_t n, int m) {$/;"	f	class:final
main	fib.cpp	/^int main(void) {$/;"	f
final	fib_recursive.cpp	/^class Fibonacci final$/;"	c	file:
get	fib_recursive.cpp	/^    static int get(int n) {$/;"	f	class:final
main	fib_recursive.cpp	/^int main(void)$/;"	f
final	fib_recursive_.cpp	/^class Fibonacci final$/;"	c	file:
get	fib_recursive_.cpp	/^    static int get(int n) {$/;"	f	class:final
main	fib_recursive_.cpp	/^int main(void)$/;"	f
main	float_comparing.cpp	/^int main()$/;"	f
foo	foo.c	/^void foo(void);$/;"	p	file:
bar	foo.c	/^void bar(void);$/;"	p	file:
print_function_instructions	foo.c	/^void print_function_instructions(void *func_ptr, size_t func_len);$/;"	p	file:
main	foo.c	/^int main(void) {$/;"	f
foo	foo.c	/^void foo(void) {$/;"	f
bar	foo.c	/^void bar(void) {}$/;"	f
print_function_instructions	foo.c	/^void print_function_instructions(void *func_ptr, size_t func_len) {$/;"	f
Foo	foo.cpp	/^struct Foo$/;"	s	file:
say	foo.cpp	/^	void say() const {$/;"	f	struct:Foo
Foo	foo.cpp	/^	Foo(const char *msg) : msg(msg) {}$/;"	f	struct:Foo
msg	foo.cpp	/^	const char *msg;$/;"	m	struct:Foo	file:
foo_says	foo.cpp	/^void foo_says(const Foo& foo)$/;"	f
get_foo	foo.cpp	/^Foo get_foo(const char*str){return *(Foo*)&str;}$/;"	f
main	foo.cpp	/^int main()$/;"	f
foo	foo_all.c	/^void foo(void);$/;"	p	file:
change_page_permissions_of_address	foo_all.c	/^int change_page_permissions_of_address(void *addr);$/;"	p	file:
main	foo_all.c	/^int main(void) {$/;"	f
foo	foo_all.c	/^void foo(void) {$/;"	f
change_page_permissions_of_address	foo_all.c	/^int change_page_permissions_of_address(void *addr) {$/;"	f
gcd	gcd_alg.cpp	/^Int gcd(Int a, Int b) {$/;"	f
main	gcd_alg.cpp	/^int main(void)$/;"	f
getline	getline.cpp	/^char *getline() {$/;"	f
main	getline.cpp	/^int main()$/;"	f
main	gstreamer.c	/^int main (int argc, char * argv[])$/;"	f
main	h.chaos.cpp	/^int main()$/;"	f
main	hello.world.09.c	/^int main()$/;"	f
pr_message	hello_oop.cpp	/^inline void pr_message(string s = "Hello, world!")$/;"	f
main	hello_oop.cpp	/^int main() {$/;"	f
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
size_t	hello_preproc.cpp	/^  typedef long unsigned int size_t;$/;"	t	namespace:std	file:
ptrdiff_t	hello_preproc.cpp	/^  typedef long int ptrdiff_t;$/;"	t	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
allocator	hello_preproc.cpp	/^    class allocator;$/;"	x	file:
allocator	hello_preproc.cpp	/^    class allocator<void>;$/;"	x	file:
uses_allocator	hello_preproc.cpp	/^    struct uses_allocator;$/;"	x	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
char_traits	hello_preproc.cpp	/^    struct char_traits;$/;"	x	file:
char_traits	hello_preproc.cpp	/^  template<> struct char_traits<char>;$/;"	x	file:
char_traits	hello_preproc.cpp	/^  template<> struct char_traits<wchar_t>;$/;"	x	file:
basic_string	hello_preproc.cpp	/^    class basic_string;$/;"	x	file:
string	hello_preproc.cpp	/^  typedef basic_string<char> string;$/;"	t	namespace:std	file:
wstring	hello_preproc.cpp	/^  typedef basic_string<wchar_t> wstring;$/;"	t	namespace:std	file:
_IO_FILE	hello_preproc.cpp	/^struct _IO_FILE;$/;"	x	file:
FILE	hello_preproc.cpp	/^typedef struct _IO_FILE FILE;$/;"	t	typeref:struct:_IO_FILE	file:
__FILE	hello_preproc.cpp	/^typedef struct _IO_FILE __FILE;$/;"	t	typeref:struct:_IO_FILE	file:
__gnuc_va_list	hello_preproc.cpp	/^typedef __builtin_va_list __gnuc_va_list;$/;"	t	file:
size_t	hello_preproc.cpp	/^typedef long unsigned int size_t;$/;"	t	file:
wint_t	hello_preproc.cpp	/^typedef unsigned int wint_t;$/;"	t	file:
__count	hello_preproc.cpp	/^  int __count;$/;"	m	struct:__anon1	file:
__wch	hello_preproc.cpp	/^    unsigned int __wch;$/;"	m	union:__anon1::__anon2	file:
__wchb	hello_preproc.cpp	/^    char __wchb[4];$/;"	m	union:__anon1::__anon2	file:
__value	hello_preproc.cpp	/^  } __value;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2	file:
__mbstate_t	hello_preproc.cpp	/^} __mbstate_t;$/;"	t	typeref:struct:__anon1	file:
mbstate_t	hello_preproc.cpp	/^typedef __mbstate_t mbstate_t;$/;"	t	file:
tm	hello_preproc.cpp	/^struct tm;$/;"	x	file:
wcscpy	hello_preproc.cpp	/^extern wchar_t *wcscpy (wchar_t *__restrict __dest,$/;"	p	file:
wcsncpy	hello_preproc.cpp	/^extern wchar_t *wcsncpy (wchar_t *__restrict __dest,$/;"	p	file:
wcscat	hello_preproc.cpp	/^extern wchar_t *wcscat (wchar_t *__restrict __dest,$/;"	p	file:
wcsncat	hello_preproc.cpp	/^extern wchar_t *wcsncat (wchar_t *__restrict __dest,$/;"	p	file:
wcscmp	hello_preproc.cpp	/^extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)$/;"	p	file:
wcsncmp	hello_preproc.cpp	/^extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	file:
wcscasecmp	hello_preproc.cpp	/^extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();$/;"	p	file:
wcsncasecmp	hello_preproc.cpp	/^extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	file:
__locale_struct	hello_preproc.cpp	/^typedef struct __locale_struct$/;"	s	file:
__locales	hello_preproc.cpp	/^  struct __locale_data *__locales[13];$/;"	m	struct:__locale_struct	typeref:struct:__locale_struct::__locale_data	file:
__ctype_b	hello_preproc.cpp	/^  const unsigned short int *__ctype_b;$/;"	m	struct:__locale_struct	file:
__ctype_tolower	hello_preproc.cpp	/^  const int *__ctype_tolower;$/;"	m	struct:__locale_struct	file:
__ctype_toupper	hello_preproc.cpp	/^  const int *__ctype_toupper;$/;"	m	struct:__locale_struct	file:
__names	hello_preproc.cpp	/^  const char *__names[13];$/;"	m	struct:__locale_struct	file:
__locale_t	hello_preproc.cpp	/^} *__locale_t;$/;"	t	typeref:struct:__locale_struct	file:
locale_t	hello_preproc.cpp	/^typedef __locale_t locale_t;$/;"	t	file:
wcscasecmp_l	hello_preproc.cpp	/^extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	file:
wcsncasecmp_l	hello_preproc.cpp	/^extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	file:
wcscoll	hello_preproc.cpp	/^extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();$/;"	p	file:
wcsxfrm	hello_preproc.cpp	/^extern size_t wcsxfrm (wchar_t *__restrict __s1,$/;"	p	file:
wcscoll_l	hello_preproc.cpp	/^extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	file:
wcsxfrm_l	hello_preproc.cpp	/^extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,$/;"	p	file:
wcsdup	hello_preproc.cpp	/^extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));$/;"	p	file:
wcschrnul	hello_preproc.cpp	/^extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)$/;"	p	file:
wcscspn	hello_preproc.cpp	/^extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)$/;"	p	file:
wcsspn	hello_preproc.cpp	/^extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)$/;"	p	file:
wcstok	hello_preproc.cpp	/^extern wchar_t *wcstok (wchar_t *__restrict __s,$/;"	p	file:
wcslen	hello_preproc.cpp	/^extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));$/;"	p	file:
wcsnlen	hello_preproc.cpp	/^extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)$/;"	p	file:
wmemcmp	hello_preproc.cpp	/^extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	file:
wmemcpy	hello_preproc.cpp	/^extern wchar_t *wmemcpy (wchar_t *__restrict __s1,$/;"	p	file:
wmemmove	hello_preproc.cpp	/^extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	file:
wmemset	hello_preproc.cpp	/^extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();$/;"	p	file:
wmempcpy	hello_preproc.cpp	/^extern wchar_t *wmempcpy (wchar_t *__restrict __s1,$/;"	p	file:
btowc	hello_preproc.cpp	/^extern wint_t btowc (int __c) throw ();$/;"	p	file:
wctob	hello_preproc.cpp	/^extern int wctob (wint_t __c) throw ();$/;"	p	file:
mbsinit	hello_preproc.cpp	/^extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));$/;"	p	file:
mbrtowc	hello_preproc.cpp	/^extern size_t mbrtowc (wchar_t *__restrict __pwc,$/;"	p	file:
wcrtomb	hello_preproc.cpp	/^extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,$/;"	p	file:
__mbrlen	hello_preproc.cpp	/^extern size_t __mbrlen (const char *__restrict __s, size_t __n,$/;"	p	file:
mbrlen	hello_preproc.cpp	/^extern size_t mbrlen (const char *__restrict __s, size_t __n,$/;"	p	file:
mbsrtowcs	hello_preproc.cpp	/^extern size_t mbsrtowcs (wchar_t *__restrict __dst,$/;"	p	file:
wcsrtombs	hello_preproc.cpp	/^extern size_t wcsrtombs (char *__restrict __dst,$/;"	p	file:
mbsnrtowcs	hello_preproc.cpp	/^extern size_t mbsnrtowcs (wchar_t *__restrict __dst,$/;"	p	file:
wcsnrtombs	hello_preproc.cpp	/^extern size_t wcsnrtombs (char *__restrict __dst,$/;"	p	file:
wcwidth	hello_preproc.cpp	/^extern int wcwidth (wchar_t __c) throw ();$/;"	p	file:
wcswidth	hello_preproc.cpp	/^extern int wcswidth (const wchar_t *__s, size_t __n) throw ();$/;"	p	file:
wcstod	hello_preproc.cpp	/^extern double wcstod (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstof	hello_preproc.cpp	/^extern float wcstof (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstold	hello_preproc.cpp	/^extern long double wcstold (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstol	hello_preproc.cpp	/^extern long int wcstol (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstoul	hello_preproc.cpp	/^extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstoll	hello_preproc.cpp	/^extern long long int wcstoll (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstoull	hello_preproc.cpp	/^extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstoq	hello_preproc.cpp	/^extern long long int wcstoq (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstouq	hello_preproc.cpp	/^extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstol_l	hello_preproc.cpp	/^extern long int wcstol_l (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstoul_l	hello_preproc.cpp	/^extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstoll_l	hello_preproc.cpp	/^extern long long int wcstoll_l (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstoull_l	hello_preproc.cpp	/^extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstod_l	hello_preproc.cpp	/^extern double wcstod_l (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstof_l	hello_preproc.cpp	/^extern float wcstof_l (const wchar_t *__restrict __nptr,$/;"	p	file:
wcstold_l	hello_preproc.cpp	/^extern long double wcstold_l (const wchar_t *__restrict __nptr,$/;"	p	file:
wcpcpy	hello_preproc.cpp	/^extern wchar_t *wcpcpy (wchar_t *__restrict __dest,$/;"	p	file:
wcpncpy	hello_preproc.cpp	/^extern wchar_t *wcpncpy (wchar_t *__restrict __dest,$/;"	p	file:
open_wmemstream	hello_preproc.cpp	/^extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();$/;"	p	file:
fwide	hello_preproc.cpp	/^extern int fwide (__FILE *__fp, int __mode) throw ();$/;"	p	file:
fwprintf	hello_preproc.cpp	/^extern int fwprintf (__FILE *__restrict __stream,$/;"	p	file:
wprintf	hello_preproc.cpp	/^extern int wprintf (const wchar_t *__restrict __format, ...)$/;"	p	file:
swprintf	hello_preproc.cpp	/^extern int swprintf (wchar_t *__restrict __s, size_t __n,$/;"	p	file:
vfwprintf	hello_preproc.cpp	/^extern int vfwprintf (__FILE *__restrict __s,$/;"	p	file:
vwprintf	hello_preproc.cpp	/^extern int vwprintf (const wchar_t *__restrict __format,$/;"	p	file:
vswprintf	hello_preproc.cpp	/^extern int vswprintf (wchar_t *__restrict __s, size_t __n,$/;"	p	file:
fwscanf	hello_preproc.cpp	/^extern int fwscanf (__FILE *__restrict __stream,$/;"	p	file:
wscanf	hello_preproc.cpp	/^extern int wscanf (const wchar_t *__restrict __format, ...)$/;"	p	file:
swscanf	hello_preproc.cpp	/^extern int swscanf (const wchar_t *__restrict __s,$/;"	p	file:
vfwscanf	hello_preproc.cpp	/^extern int vfwscanf (__FILE *__restrict __s,$/;"	p	file:
vwscanf	hello_preproc.cpp	/^extern int vwscanf (const wchar_t *__restrict __format,$/;"	p	file:
vswscanf	hello_preproc.cpp	/^extern int vswscanf (const wchar_t *__restrict __s,$/;"	p	file:
fgetwc	hello_preproc.cpp	/^extern wint_t fgetwc (__FILE *__stream);$/;"	p	file:
getwc	hello_preproc.cpp	/^extern wint_t getwc (__FILE *__stream);$/;"	p	file:
getwchar	hello_preproc.cpp	/^extern wint_t getwchar (void);$/;"	p	file:
fputwc	hello_preproc.cpp	/^extern wint_t fputwc (wchar_t __wc, __FILE *__stream);$/;"	p	file:
putwc	hello_preproc.cpp	/^extern wint_t putwc (wchar_t __wc, __FILE *__stream);$/;"	p	file:
putwchar	hello_preproc.cpp	/^extern wint_t putwchar (wchar_t __wc);$/;"	p	file:
fgetws	hello_preproc.cpp	/^extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,$/;"	p	file:
fputws	hello_preproc.cpp	/^extern int fputws (const wchar_t *__restrict __ws,$/;"	p	file:
ungetwc	hello_preproc.cpp	/^extern wint_t ungetwc (wint_t __wc, __FILE *__stream);$/;"	p	file:
getwc_unlocked	hello_preproc.cpp	/^extern wint_t getwc_unlocked (__FILE *__stream);$/;"	p	file:
getwchar_unlocked	hello_preproc.cpp	/^extern wint_t getwchar_unlocked (void);$/;"	p	file:
fgetwc_unlocked	hello_preproc.cpp	/^extern wint_t fgetwc_unlocked (__FILE *__stream);$/;"	p	file:
fputwc_unlocked	hello_preproc.cpp	/^extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);$/;"	p	file:
putwc_unlocked	hello_preproc.cpp	/^extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);$/;"	p	file:
putwchar_unlocked	hello_preproc.cpp	/^extern wint_t putwchar_unlocked (wchar_t __wc);$/;"	p	file:
fgetws_unlocked	hello_preproc.cpp	/^extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,$/;"	p	file:
fputws_unlocked	hello_preproc.cpp	/^extern int fputws_unlocked (const wchar_t *__restrict __ws,$/;"	p	file:
wcsftime	hello_preproc.cpp	/^extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,$/;"	p	file:
wcsftime_l	hello_preproc.cpp	/^extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,$/;"	p	file:
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx$/;"	n	file:
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
streamoff	hello_preproc.cpp	/^  typedef long streamoff;$/;"	t	namespace:std	file:
streamsize	hello_preproc.cpp	/^  typedef ptrdiff_t streamsize;$/;"	t	namespace:std	file:
fpos	hello_preproc.cpp	/^    class fpos$/;"	c	namespace:std	file:
_M_off	hello_preproc.cpp	/^      streamoff _M_off;$/;"	m	class:std::fpos	file:
_M_state	hello_preproc.cpp	/^      _StateT _M_state;$/;"	m	class:std::fpos	file:
fpos	hello_preproc.cpp	/^      fpos()$/;"	f	class:std::fpos
fpos	hello_preproc.cpp	/^      fpos(streamoff __off)$/;"	f	class:std::fpos
operator streamoff	hello_preproc.cpp	/^      operator streamoff() const { return _M_off; }$/;"	f	class:std::fpos
state	hello_preproc.cpp	/^      state(_StateT __st)$/;"	f	class:std::fpos
state	hello_preproc.cpp	/^      state() const$/;"	f	class:std::fpos
operator +=	hello_preproc.cpp	/^      operator+=(streamoff __off)$/;"	f	class:std::fpos
operator -=	hello_preproc.cpp	/^      operator-=(streamoff __off)$/;"	f	class:std::fpos
operator +	hello_preproc.cpp	/^      operator+(streamoff __off) const$/;"	f	class:std::fpos
operator -	hello_preproc.cpp	/^      operator-(streamoff __off) const$/;"	f	class:std::fpos
operator -	hello_preproc.cpp	/^      operator-(const fpos& __other) const$/;"	f	class:std::fpos
operator ==	hello_preproc.cpp	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std
streampos	hello_preproc.cpp	/^  typedef fpos<mbstate_t> streampos;$/;"	t	namespace:std	file:
wstreampos	hello_preproc.cpp	/^  typedef fpos<mbstate_t> wstreampos;$/;"	t	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
ios_base	hello_preproc.cpp	/^  class ios_base;$/;"	x	file:
basic_ios	hello_preproc.cpp	/^    class basic_ios;$/;"	x	file:
basic_streambuf	hello_preproc.cpp	/^    class basic_streambuf;$/;"	x	file:
basic_istream	hello_preproc.cpp	/^    class basic_istream;$/;"	x	file:
basic_ostream	hello_preproc.cpp	/^    class basic_ostream;$/;"	x	file:
basic_iostream	hello_preproc.cpp	/^    class basic_iostream;$/;"	x	file:
basic_stringbuf	hello_preproc.cpp	/^    class basic_stringbuf;$/;"	x	file:
basic_istringstream	hello_preproc.cpp	/^    class basic_istringstream;$/;"	x	file:
basic_ostringstream	hello_preproc.cpp	/^    class basic_ostringstream;$/;"	x	file:
basic_stringstream	hello_preproc.cpp	/^    class basic_stringstream;$/;"	x	file:
basic_filebuf	hello_preproc.cpp	/^    class basic_filebuf;$/;"	x	file:
basic_ifstream	hello_preproc.cpp	/^    class basic_ifstream;$/;"	x	file:
basic_ofstream	hello_preproc.cpp	/^    class basic_ofstream;$/;"	x	file:
basic_fstream	hello_preproc.cpp	/^    class basic_fstream;$/;"	x	file:
istreambuf_iterator	hello_preproc.cpp	/^    class istreambuf_iterator;$/;"	x	file:
ostreambuf_iterator	hello_preproc.cpp	/^    class ostreambuf_iterator;$/;"	x	file:
ios	hello_preproc.cpp	/^  typedef basic_ios<char> ios;$/;"	t	namespace:std	file:
streambuf	hello_preproc.cpp	/^  typedef basic_streambuf<char> streambuf;$/;"	t	namespace:std	file:
istream	hello_preproc.cpp	/^  typedef basic_istream<char> istream;$/;"	t	namespace:std	file:
ostream	hello_preproc.cpp	/^  typedef basic_ostream<char> ostream;$/;"	t	namespace:std	file:
iostream	hello_preproc.cpp	/^  typedef basic_iostream<char> iostream;$/;"	t	namespace:std	file:
stringbuf	hello_preproc.cpp	/^  typedef basic_stringbuf<char> stringbuf;$/;"	t	namespace:std	file:
istringstream	hello_preproc.cpp	/^  typedef basic_istringstream<char> istringstream;$/;"	t	namespace:std	file:
ostringstream	hello_preproc.cpp	/^  typedef basic_ostringstream<char> ostringstream;$/;"	t	namespace:std	file:
stringstream	hello_preproc.cpp	/^  typedef basic_stringstream<char> stringstream;$/;"	t	namespace:std	file:
filebuf	hello_preproc.cpp	/^  typedef basic_filebuf<char> filebuf;$/;"	t	namespace:std	file:
ifstream	hello_preproc.cpp	/^  typedef basic_ifstream<char> ifstream;$/;"	t	namespace:std	file:
ofstream	hello_preproc.cpp	/^  typedef basic_ofstream<char> ofstream;$/;"	t	namespace:std	file:
fstream	hello_preproc.cpp	/^  typedef basic_fstream<char> fstream;$/;"	t	namespace:std	file:
wios	hello_preproc.cpp	/^  typedef basic_ios<wchar_t> wios;$/;"	t	namespace:std	file:
wstreambuf	hello_preproc.cpp	/^  typedef basic_streambuf<wchar_t> wstreambuf;$/;"	t	namespace:std	file:
wistream	hello_preproc.cpp	/^  typedef basic_istream<wchar_t> wistream;$/;"	t	namespace:std	file:
wostream	hello_preproc.cpp	/^  typedef basic_ostream<wchar_t> wostream;$/;"	t	namespace:std	file:
wiostream	hello_preproc.cpp	/^  typedef basic_iostream<wchar_t> wiostream;$/;"	t	namespace:std	file:
wstringbuf	hello_preproc.cpp	/^  typedef basic_stringbuf<wchar_t> wstringbuf;$/;"	t	namespace:std	file:
wistringstream	hello_preproc.cpp	/^  typedef basic_istringstream<wchar_t> wistringstream;$/;"	t	namespace:std	file:
wostringstream	hello_preproc.cpp	/^  typedef basic_ostringstream<wchar_t> wostringstream;$/;"	t	namespace:std	file:
wstringstream	hello_preproc.cpp	/^  typedef basic_stringstream<wchar_t> wstringstream;$/;"	t	namespace:std	file:
wfilebuf	hello_preproc.cpp	/^  typedef basic_filebuf<wchar_t> wfilebuf;$/;"	t	namespace:std	file:
wifstream	hello_preproc.cpp	/^  typedef basic_ifstream<wchar_t> wifstream;$/;"	t	namespace:std	file:
wofstream	hello_preproc.cpp	/^  typedef basic_ofstream<wchar_t> wofstream;$/;"	t	namespace:std	file:
wfstream	hello_preproc.cpp	/^  typedef basic_fstream<wchar_t> wfstream;$/;"	t	namespace:std	file:
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
exception	hello_preproc.cpp	/^  class exception$/;"	c	namespace:std	file:
exception	hello_preproc.cpp	/^    exception() throw() { }$/;"	f	class:std::exception
~exception	hello_preproc.cpp	/^    virtual ~exception() throw();$/;"	p	class:std::exception	file:
what	hello_preproc.cpp	/^    virtual const char* what() const throw();$/;"	p	class:std::exception	file:
bad_exception	hello_preproc.cpp	/^  class bad_exception : public exception$/;"	c	namespace:std	file:
bad_exception	hello_preproc.cpp	/^    bad_exception() throw() { }$/;"	f	class:std::bad_exception
~bad_exception	hello_preproc.cpp	/^    virtual ~bad_exception() throw();$/;"	p	class:std::bad_exception	file:
what	hello_preproc.cpp	/^    virtual const char* what() const throw();$/;"	p	class:std::bad_exception	file:
terminate_handler	hello_preproc.cpp	/^  typedef void (*terminate_handler) ();$/;"	t	namespace:std	file:
unexpected_handler	hello_preproc.cpp	/^  typedef void (*unexpected_handler) ();$/;"	t	namespace:std	file:
set_terminate	hello_preproc.cpp	/^  terminate_handler set_terminate(terminate_handler) throw();$/;"	p	namespace:std	file:
terminate	hello_preproc.cpp	/^  void terminate() throw() __attribute__ ((__noreturn__));$/;"	p	namespace:std	file:
set_unexpected	hello_preproc.cpp	/^  unexpected_handler set_unexpected(unexpected_handler) throw();$/;"	p	namespace:std	file:
unexpected	hello_preproc.cpp	/^  void unexpected() __attribute__ ((__noreturn__));$/;"	p	namespace:std	file:
uncaught_exception	hello_preproc.cpp	/^  bool uncaught_exception() throw() __attribute__ ((__pure__));$/;"	p	namespace:std	file:
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx$/;"	n	file:
__verbose_terminate_handler	hello_preproc.cpp	/^  void __verbose_terminate_handler();$/;"	p	namespace:__gnu_cxx	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__throw_bad_exception	hello_preproc.cpp	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_bad_alloc	hello_preproc.cpp	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_bad_cast	hello_preproc.cpp	/^  __throw_bad_cast(void) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_bad_typeid	hello_preproc.cpp	/^  __throw_bad_typeid(void) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_logic_error	hello_preproc.cpp	/^  __throw_logic_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_domain_error	hello_preproc.cpp	/^  __throw_domain_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_invalid_argument	hello_preproc.cpp	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_length_error	hello_preproc.cpp	/^  __throw_length_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_out_of_range	hello_preproc.cpp	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_out_of_range_fmt	hello_preproc.cpp	/^  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))$/;"	p	namespace:std	file:
__throw_runtime_error	hello_preproc.cpp	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_range_error	hello_preproc.cpp	/^  __throw_range_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_overflow_error	hello_preproc.cpp	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_underflow_error	hello_preproc.cpp	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_ios_failure	hello_preproc.cpp	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_system_error	hello_preproc.cpp	/^  __throw_system_error(int) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_future_error	hello_preproc.cpp	/^  __throw_future_error(int) __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__throw_bad_function_call	hello_preproc.cpp	/^  __throw_bad_function_call() __attribute__((__noreturn__));$/;"	p	namespace:std	file:
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__normal_iterator	hello_preproc.cpp	/^    class __normal_iterator;$/;"	x	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__true_type	hello_preproc.cpp	/^  struct __true_type { };$/;"	s	namespace:std	file:
__false_type	hello_preproc.cpp	/^  struct __false_type { };$/;"	s	namespace:std	file:
__truth_type	hello_preproc.cpp	/^    struct __truth_type$/;"	s	namespace:std	file:
__type	hello_preproc.cpp	/^    { typedef __false_type __type; };$/;"	t	struct:std::__truth_type	file:
__truth_type	hello_preproc.cpp	/^    struct __truth_type<true>$/;"	s	namespace:std	file:
__type	hello_preproc.cpp	/^    { typedef __true_type __type; };$/;"	t	struct:std::__truth_type	file:
__traitor	hello_preproc.cpp	/^    struct __traitor$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	e	enum:std::__traitor::__anon3	file:
__type	hello_preproc.cpp	/^      typedef typename __truth_type<__value>::__type __type;$/;"	t	struct:std::__traitor	file:
__are_same	hello_preproc.cpp	/^    struct __are_same$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__are_same::__anon4	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__are_same	file:
__are_same	hello_preproc.cpp	/^    struct __are_same<_Tp, _Tp>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__are_same::__anon5	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__are_same	file:
__is_void	hello_preproc.cpp	/^    struct __is_void$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_void::__anon6	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_void	file:
__is_void	hello_preproc.cpp	/^    struct __is_void<void>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_void::__anon7	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_void	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_integer::__anon8	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<bool>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon9	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<char>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon10	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<signed char>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon11	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<unsigned char>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon12	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<wchar_t>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon13	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<short>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon14	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<unsigned short>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon15	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<int>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon16	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<unsigned int>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon17	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<long>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon18	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<unsigned long>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon19	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<long long>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon20	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^    struct __is_integer<unsigned long long>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon21	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };$/;"	e	enum:std::__is_integer::__anon22	file:
__type	hello_preproc.cpp	/^template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };$/;"	t	struct:std::__is_integer	file:
__is_integer	hello_preproc.cpp	/^template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };$/;"	e	enum:std::__is_integer::__anon23	file:
__type	hello_preproc.cpp	/^template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };$/;"	t	struct:std::__is_integer	file:
__is_floating	hello_preproc.cpp	/^    struct __is_floating$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_floating::__anon24	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_floating	file:
__is_floating	hello_preproc.cpp	/^    struct __is_floating<float>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon25	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_floating	file:
__is_floating	hello_preproc.cpp	/^    struct __is_floating<double>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon26	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_floating	file:
__is_floating	hello_preproc.cpp	/^    struct __is_floating<long double>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon27	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_floating	file:
__is_pointer	hello_preproc.cpp	/^    struct __is_pointer$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_pointer::__anon28	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_pointer	file:
__is_pointer	hello_preproc.cpp	/^    struct __is_pointer<_Tp*>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_pointer::__anon29	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_pointer	file:
__is_normal_iterator	hello_preproc.cpp	/^    struct __is_normal_iterator$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_normal_iterator::__anon30	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_normal_iterator	file:
__is_normal_iterator	hello_preproc.cpp	/^    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_normal_iterator::__anon31	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_normal_iterator	file:
__is_arithmetic	hello_preproc.cpp	/^    struct __is_arithmetic$/;"	s	namespace:std	file:
__is_scalar	hello_preproc.cpp	/^    struct __is_scalar$/;"	s	namespace:std	file:
__is_char	hello_preproc.cpp	/^    struct __is_char$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_char::__anon32	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_char	file:
__is_char	hello_preproc.cpp	/^    struct __is_char<char>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon33	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_char	file:
__is_char	hello_preproc.cpp	/^    struct __is_char<wchar_t>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon34	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_char	file:
__is_byte	hello_preproc.cpp	/^    struct __is_byte$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_byte::__anon35	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_byte	file:
__is_byte	hello_preproc.cpp	/^    struct __is_byte<char>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon36	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_byte	file:
__is_byte	hello_preproc.cpp	/^    struct __is_byte<signed char>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon37	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_byte	file:
__is_byte	hello_preproc.cpp	/^    struct __is_byte<unsigned char>$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon38	file:
__type	hello_preproc.cpp	/^      typedef __true_type __type;$/;"	t	struct:std::__is_byte	file:
__is_move_iterator	hello_preproc.cpp	/^    struct __is_move_iterator$/;"	s	namespace:std	file:
__value	hello_preproc.cpp	/^      enum { __value = 0 };$/;"	e	enum:std::__is_move_iterator::__anon39	file:
__type	hello_preproc.cpp	/^      typedef __false_type __type;$/;"	t	struct:std::__is_move_iterator	file:
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__enable_if	hello_preproc.cpp	/^    struct __enable_if$/;"	s	namespace:__gnu_cxx	file:
__enable_if	hello_preproc.cpp	/^    struct __enable_if<true, _Tp>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef _Tp __type; };$/;"	t	struct:__gnu_cxx::__enable_if	file:
__conditional_type	hello_preproc.cpp	/^    struct __conditional_type$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef _Iftrue __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	file:
__conditional_type	hello_preproc.cpp	/^    struct __conditional_type<false, _Iftrue, _Iffalse>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef _Iffalse __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned$/;"	s	namespace:__gnu_cxx	file:
__if_type	hello_preproc.cpp	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__type	hello_preproc.cpp	/^      typedef typename __if_type::__type __type;$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<char>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef unsigned char __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<signed char>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef unsigned char __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<short>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef unsigned short __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<int>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef unsigned int __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<long>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef unsigned long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<long long>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef unsigned long long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<bool>;$/;"	x	file:
__add_unsigned	hello_preproc.cpp	/^    struct __add_unsigned<wchar_t>;$/;"	x	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned$/;"	s	namespace:__gnu_cxx	file:
__if_type	hello_preproc.cpp	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__type	hello_preproc.cpp	/^      typedef typename __if_type::__type __type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<char>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef signed char __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<unsigned char>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef signed char __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<unsigned short>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef short __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<unsigned int>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef int __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<unsigned long>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<unsigned long long>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef long long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<bool>;$/;"	x	file:
__remove_unsigned	hello_preproc.cpp	/^    struct __remove_unsigned<wchar_t>;$/;"	x	file:
__is_null_pointer	hello_preproc.cpp	/^    __is_null_pointer(_Type* __ptr)$/;"	f	namespace:__gnu_cxx
__is_null_pointer	hello_preproc.cpp	/^    __is_null_pointer(_Type)$/;"	f	namespace:__gnu_cxx
__promote	hello_preproc.cpp	/^    struct __promote$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef double __type; };$/;"	t	struct:__gnu_cxx::__promote	file:
__promote	hello_preproc.cpp	/^    struct __promote<_Tp, false>$/;"	s	namespace:__gnu_cxx	file:
__promote	hello_preproc.cpp	/^    struct __promote<long double>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef long double __type; };$/;"	t	struct:__gnu_cxx::__promote	file:
__promote	hello_preproc.cpp	/^    struct __promote<double>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef double __type; };$/;"	t	struct:__gnu_cxx::__promote	file:
__promote	hello_preproc.cpp	/^    struct __promote<float>$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^    { typedef float __type; };$/;"	t	struct:__gnu_cxx::__promote	file:
__promote_2	hello_preproc.cpp	/^    struct __promote_2$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^      typedef __typeof__(_Tp2() + _Up2()) __type;$/;"	t	struct:__gnu_cxx::__promote_2	file:
__promote_3	hello_preproc.cpp	/^    struct __promote_3$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_3	file:
__promote_4	hello_preproc.cpp	/^    struct __promote_4$/;"	s	namespace:__gnu_cxx	file:
__type	hello_preproc.cpp	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_4	file:
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__numeric_traits_integer	hello_preproc.cpp	/^    struct __numeric_traits_integer$/;"	s	namespace:__gnu_cxx	file:
__min	hello_preproc.cpp	/^      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__max	hello_preproc.cpp	/^      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__is_signed	hello_preproc.cpp	/^      static const bool __is_signed = ((_Value)(-1) < 0);$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__digits	hello_preproc.cpp	/^      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__min	hello_preproc.cpp	/^    const _Value __numeric_traits_integer<_Value>::__min;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__max	hello_preproc.cpp	/^    const _Value __numeric_traits_integer<_Value>::__max;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__is_signed	hello_preproc.cpp	/^    const bool __numeric_traits_integer<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__digits	hello_preproc.cpp	/^    const int __numeric_traits_integer<_Value>::__digits;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__numeric_traits_floating	hello_preproc.cpp	/^    struct __numeric_traits_floating$/;"	s	namespace:__gnu_cxx	file:
__max_digits10	hello_preproc.cpp	/^      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L \/ 2136);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__is_signed	hello_preproc.cpp	/^      static const bool __is_signed = true;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__digits10	hello_preproc.cpp	/^      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__max_exponent10	hello_preproc.cpp	/^      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__max_digits10	hello_preproc.cpp	/^    const int __numeric_traits_floating<_Value>::__max_digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__is_signed	hello_preproc.cpp	/^    const bool __numeric_traits_floating<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__digits10	hello_preproc.cpp	/^    const int __numeric_traits_floating<_Value>::__digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__max_exponent10	hello_preproc.cpp	/^    const int __numeric_traits_floating<_Value>::__max_exponent10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__numeric_traits	hello_preproc.cpp	/^    struct __numeric_traits$/;"	s	namespace:__gnu_cxx	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__addressof	hello_preproc.cpp	/^    __addressof(_Tp& __r)$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
swap	hello_preproc.cpp	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std
_Tp	hello_preproc.cpp	/^    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])$/;"	m	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
pair	hello_preproc.cpp	/^    struct pair$/;"	s	namespace:std	file:
first_type	hello_preproc.cpp	/^      typedef _T1 first_type;$/;"	t	struct:std::pair	file:
second_type	hello_preproc.cpp	/^      typedef _T2 second_type;$/;"	t	struct:std::pair	file:
first	hello_preproc.cpp	/^      _T1 first;$/;"	m	struct:std::pair	file:
second	hello_preproc.cpp	/^      _T2 second;$/;"	m	struct:std::pair	file:
pair	hello_preproc.cpp	/^      pair()$/;"	f	struct:std::pair
pair	hello_preproc.cpp	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair
pair	hello_preproc.cpp	/^ pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair
operator ==	hello_preproc.cpp	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator <	hello_preproc.cpp	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator >	hello_preproc.cpp	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator <=	hello_preproc.cpp	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator >=	hello_preproc.cpp	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
make_pair	hello_preproc.cpp	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
input_iterator_tag	hello_preproc.cpp	/^  struct input_iterator_tag { };$/;"	s	namespace:std	file:
output_iterator_tag	hello_preproc.cpp	/^  struct output_iterator_tag { };$/;"	s	namespace:std	file:
forward_iterator_tag	hello_preproc.cpp	/^  struct forward_iterator_tag : public input_iterator_tag { };$/;"	s	namespace:std	file:
bidirectional_iterator_tag	hello_preproc.cpp	/^  struct bidirectional_iterator_tag : public forward_iterator_tag { };$/;"	s	namespace:std	file:
random_access_iterator_tag	hello_preproc.cpp	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag { };$/;"	s	namespace:std	file:
iterator	hello_preproc.cpp	/^    struct iterator$/;"	s	namespace:std	file:
iterator_category	hello_preproc.cpp	/^      typedef _Category iterator_category;$/;"	t	struct:std::iterator	file:
value_type	hello_preproc.cpp	/^      typedef _Tp value_type;$/;"	t	struct:std::iterator	file:
difference_type	hello_preproc.cpp	/^      typedef _Distance difference_type;$/;"	t	struct:std::iterator	file:
pointer	hello_preproc.cpp	/^      typedef _Pointer pointer;$/;"	t	struct:std::iterator	file:
reference	hello_preproc.cpp	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	file:
iterator_traits	hello_preproc.cpp	/^    struct iterator_traits$/;"	s	namespace:std	file:
iterator_category	hello_preproc.cpp	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	file:
value_type	hello_preproc.cpp	/^      typedef typename _Iterator::value_type value_type;$/;"	t	struct:std::iterator_traits	file:
difference_type	hello_preproc.cpp	/^      typedef typename _Iterator::difference_type difference_type;$/;"	t	struct:std::iterator_traits	file:
pointer	hello_preproc.cpp	/^      typedef typename _Iterator::pointer pointer;$/;"	t	struct:std::iterator_traits	file:
reference	hello_preproc.cpp	/^      typedef typename _Iterator::reference reference;$/;"	t	struct:std::iterator_traits	file:
iterator_traits	hello_preproc.cpp	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std	file:
iterator_category	hello_preproc.cpp	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	file:
value_type	hello_preproc.cpp	/^      typedef _Tp value_type;$/;"	t	struct:std::iterator_traits	file:
difference_type	hello_preproc.cpp	/^      typedef ptrdiff_t difference_type;$/;"	t	struct:std::iterator_traits	file:
pointer	hello_preproc.cpp	/^      typedef _Tp* pointer;$/;"	t	struct:std::iterator_traits	file:
reference	hello_preproc.cpp	/^      typedef _Tp& reference;$/;"	t	struct:std::iterator_traits	file:
iterator_traits	hello_preproc.cpp	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std	file:
iterator_category	hello_preproc.cpp	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	file:
value_type	hello_preproc.cpp	/^      typedef _Tp value_type;$/;"	t	struct:std::iterator_traits	file:
difference_type	hello_preproc.cpp	/^      typedef ptrdiff_t difference_type;$/;"	t	struct:std::iterator_traits	file:
pointer	hello_preproc.cpp	/^      typedef const _Tp* pointer;$/;"	t	struct:std::iterator_traits	file:
reference	hello_preproc.cpp	/^      typedef const _Tp& reference;$/;"	t	struct:std::iterator_traits	file:
__iterator_category	hello_preproc.cpp	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std
_Iter_base	hello_preproc.cpp	/^    struct _Iter_base$/;"	s	namespace:std	file:
iterator_type	hello_preproc.cpp	/^      typedef _Iterator iterator_type;$/;"	t	struct:std::_Iter_base	file:
_S_base	hello_preproc.cpp	/^      static iterator_type _S_base(_Iterator __it)$/;"	f	struct:std::_Iter_base
_Iter_base	hello_preproc.cpp	/^    struct _Iter_base<_Iterator, true>$/;"	s	namespace:std	file:
iterator_type	hello_preproc.cpp	/^      typedef typename _Iterator::iterator_type iterator_type;$/;"	t	struct:std::_Iter_base	file:
_S_base	hello_preproc.cpp	/^      static iterator_type _S_base(_Iterator __it)$/;"	f	struct:std::_Iter_base
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
__debug	hello_preproc.cpp	/^  namespace __debug { }$/;"	n	namespace:std	file:
__gnu_debug	hello_preproc.cpp	/^namespace __gnu_debug$/;"	n	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__distance	hello_preproc.cpp	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std
__distance	hello_preproc.cpp	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std
distance	hello_preproc.cpp	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std
__advance	hello_preproc.cpp	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std
__advance	hello_preproc.cpp	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std
__advance	hello_preproc.cpp	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std
advance	hello_preproc.cpp	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
reverse_iterator	hello_preproc.cpp	/^    class reverse_iterator$/;"	c	namespace:std	file:
current	hello_preproc.cpp	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	file:
__traits_type	hello_preproc.cpp	/^      typedef iterator_traits<_Iterator> __traits_type;$/;"	t	class:std::reverse_iterator	file:
iterator_type	hello_preproc.cpp	/^      typedef _Iterator iterator_type;$/;"	t	class:std::reverse_iterator	file:
difference_type	hello_preproc.cpp	/^      typedef typename __traits_type::difference_type difference_type;$/;"	t	class:std::reverse_iterator	file:
pointer	hello_preproc.cpp	/^      typedef typename __traits_type::pointer pointer;$/;"	t	class:std::reverse_iterator	file:
reference	hello_preproc.cpp	/^      typedef typename __traits_type::reference reference;$/;"	t	class:std::reverse_iterator	file:
reverse_iterator	hello_preproc.cpp	/^      reverse_iterator() : current() { }$/;"	f	class:std::reverse_iterator
reverse_iterator	hello_preproc.cpp	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	f	class:std::reverse_iterator
reverse_iterator	hello_preproc.cpp	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator
reverse_iterator	hello_preproc.cpp	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator
base	hello_preproc.cpp	/^      base() const$/;"	f	class:std::reverse_iterator
operator *	hello_preproc.cpp	/^      operator*() const$/;"	f	class:std::reverse_iterator
operator ->	hello_preproc.cpp	/^      operator->() const$/;"	f	class:std::reverse_iterator
operator ++	hello_preproc.cpp	/^      operator++()$/;"	f	class:std::reverse_iterator
operator ++	hello_preproc.cpp	/^      operator++(int)$/;"	f	class:std::reverse_iterator
operator --	hello_preproc.cpp	/^      operator--()$/;"	f	class:std::reverse_iterator
operator --	hello_preproc.cpp	/^      operator--(int)$/;"	f	class:std::reverse_iterator
operator +	hello_preproc.cpp	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator
operator +=	hello_preproc.cpp	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator
operator -	hello_preproc.cpp	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator
operator -=	hello_preproc.cpp	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator
operator []	hello_preproc.cpp	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator
operator ==	hello_preproc.cpp	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator <	hello_preproc.cpp	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator >	hello_preproc.cpp	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator <=	hello_preproc.cpp	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator >=	hello_preproc.cpp	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator -	hello_preproc.cpp	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator +	hello_preproc.cpp	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std
operator ==	hello_preproc.cpp	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator <	hello_preproc.cpp	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator >	hello_preproc.cpp	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator <=	hello_preproc.cpp	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator >=	hello_preproc.cpp	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator -	hello_preproc.cpp	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
back_insert_iterator	hello_preproc.cpp	/^    class back_insert_iterator$/;"	c	namespace:std	file:
container	hello_preproc.cpp	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	file:
container_type	hello_preproc.cpp	/^      typedef _Container container_type;$/;"	t	class:std::back_insert_iterator	file:
back_insert_iterator	hello_preproc.cpp	/^      back_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::back_insert_iterator
operator =	hello_preproc.cpp	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator
operator *	hello_preproc.cpp	/^      operator*()$/;"	f	class:std::back_insert_iterator
operator ++	hello_preproc.cpp	/^      operator++()$/;"	f	class:std::back_insert_iterator
operator ++	hello_preproc.cpp	/^      operator++(int)$/;"	f	class:std::back_insert_iterator
back_inserter	hello_preproc.cpp	/^    back_inserter(_Container& __x)$/;"	f	namespace:std
front_insert_iterator	hello_preproc.cpp	/^    class front_insert_iterator$/;"	c	namespace:std	file:
container	hello_preproc.cpp	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	file:
container_type	hello_preproc.cpp	/^      typedef _Container container_type;$/;"	t	class:std::front_insert_iterator	file:
front_insert_iterator	hello_preproc.cpp	/^      explicit front_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::front_insert_iterator
operator =	hello_preproc.cpp	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator
operator *	hello_preproc.cpp	/^      operator*()$/;"	f	class:std::front_insert_iterator
operator ++	hello_preproc.cpp	/^      operator++()$/;"	f	class:std::front_insert_iterator
operator ++	hello_preproc.cpp	/^      operator++(int)$/;"	f	class:std::front_insert_iterator
front_inserter	hello_preproc.cpp	/^    front_inserter(_Container& __x)$/;"	f	namespace:std
insert_iterator	hello_preproc.cpp	/^    class insert_iterator$/;"	c	namespace:std	file:
container	hello_preproc.cpp	/^      _Container* container;$/;"	m	class:std::insert_iterator	file:
iter	hello_preproc.cpp	/^      typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	file:
container_type	hello_preproc.cpp	/^      typedef _Container container_type;$/;"	t	class:std::insert_iterator	file:
insert_iterator	hello_preproc.cpp	/^      insert_iterator(_Container& __x, typename _Container::iterator __i)$/;"	f	class:std::insert_iterator
operator =	hello_preproc.cpp	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator
operator *	hello_preproc.cpp	/^      operator*()$/;"	f	class:std::insert_iterator
operator ++	hello_preproc.cpp	/^      operator++()$/;"	f	class:std::insert_iterator
operator ++	hello_preproc.cpp	/^      operator++(int)$/;"	f	class:std::insert_iterator
inserter	hello_preproc.cpp	/^    inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__normal_iterator	hello_preproc.cpp	/^    class __normal_iterator$/;"	c	namespace:__gnu_cxx	file:
_M_current	hello_preproc.cpp	/^      _Iterator _M_current;$/;"	m	class:__gnu_cxx::__normal_iterator	file:
__traits_type	hello_preproc.cpp	/^      typedef iterator_traits<_Iterator> __traits_type;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
iterator_type	hello_preproc.cpp	/^      typedef _Iterator iterator_type;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
iterator_category	hello_preproc.cpp	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
value_type	hello_preproc.cpp	/^      typedef typename __traits_type::value_type value_type;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
difference_type	hello_preproc.cpp	/^      typedef typename __traits_type::difference_type difference_type;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
reference	hello_preproc.cpp	/^      typedef typename __traits_type::reference reference;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
pointer	hello_preproc.cpp	/^      typedef typename __traits_type::pointer pointer;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
__normal_iterator	hello_preproc.cpp	/^      __normal_iterator()$/;"	f	class:__gnu_cxx::__normal_iterator
__normal_iterator	hello_preproc.cpp	/^      __normal_iterator(const _Iterator& __i)$/;"	f	class:__gnu_cxx::__normal_iterator
__normal_iterator	hello_preproc.cpp	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	f	class:__gnu_cxx::__normal_iterator
operator *	hello_preproc.cpp	/^      operator*() const$/;"	f	class:__gnu_cxx::__normal_iterator
operator ->	hello_preproc.cpp	/^      operator->() const$/;"	f	class:__gnu_cxx::__normal_iterator
operator ++	hello_preproc.cpp	/^      operator++()$/;"	f	class:__gnu_cxx::__normal_iterator
operator ++	hello_preproc.cpp	/^      operator++(int)$/;"	f	class:__gnu_cxx::__normal_iterator
operator --	hello_preproc.cpp	/^      operator--()$/;"	f	class:__gnu_cxx::__normal_iterator
operator --	hello_preproc.cpp	/^      operator--(int)$/;"	f	class:__gnu_cxx::__normal_iterator
operator []	hello_preproc.cpp	/^      operator[](difference_type __n) const$/;"	f	class:__gnu_cxx::__normal_iterator
operator +=	hello_preproc.cpp	/^      operator+=(difference_type __n)$/;"	f	class:__gnu_cxx::__normal_iterator
operator +	hello_preproc.cpp	/^      operator+(difference_type __n) const$/;"	f	class:__gnu_cxx::__normal_iterator
operator -=	hello_preproc.cpp	/^      operator-=(difference_type __n)$/;"	f	class:__gnu_cxx::__normal_iterator
operator -	hello_preproc.cpp	/^      operator-(difference_type __n) const$/;"	f	class:__gnu_cxx::__normal_iterator
base	hello_preproc.cpp	/^      base() const$/;"	f	class:__gnu_cxx::__normal_iterator
operator ==	hello_preproc.cpp	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator ==	hello_preproc.cpp	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator !=	hello_preproc.cpp	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator !=	hello_preproc.cpp	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <	hello_preproc.cpp	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <	hello_preproc.cpp	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >	hello_preproc.cpp	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >	hello_preproc.cpp	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <=	hello_preproc.cpp	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <=	hello_preproc.cpp	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >=	hello_preproc.cpp	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >=	hello_preproc.cpp	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator -	hello_preproc.cpp	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator -	hello_preproc.cpp	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator +	hello_preproc.cpp	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	namespace:__gnu_cxx
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx$/;"	n	file:
__ops	hello_preproc.cpp	/^namespace __ops$/;"	n	namespace:__gnu_cxx	file:
_Iter_less_iter	hello_preproc.cpp	/^  struct _Iter_less_iter$/;"	s	namespace:__gnu_cxx::__ops	file:
operator ()	hello_preproc.cpp	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_iter
__iter_less_iter	hello_preproc.cpp	/^  __iter_less_iter()$/;"	f	namespace:__gnu_cxx::__ops
_Iter_less_val	hello_preproc.cpp	/^  struct _Iter_less_val$/;"	s	namespace:__gnu_cxx::__ops	file:
operator ()	hello_preproc.cpp	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val
__iter_less_val	hello_preproc.cpp	/^  __iter_less_val()$/;"	f	namespace:__gnu_cxx::__ops
__iter_comp_val	hello_preproc.cpp	/^  __iter_comp_val(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops
_Val_less_iter	hello_preproc.cpp	/^  struct _Val_less_iter$/;"	s	namespace:__gnu_cxx::__ops	file:
operator ()	hello_preproc.cpp	/^      operator()(_Value& __val, _Iterator __it) const$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter
__val_less_iter	hello_preproc.cpp	/^  __val_less_iter()$/;"	f	namespace:__gnu_cxx::__ops
__val_comp_iter	hello_preproc.cpp	/^  __val_comp_iter(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_equal_to_iter	hello_preproc.cpp	/^  struct _Iter_equal_to_iter$/;"	s	namespace:__gnu_cxx::__ops	file:
operator ()	hello_preproc.cpp	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_iter
__iter_equal_to_iter	hello_preproc.cpp	/^  __iter_equal_to_iter()$/;"	f	namespace:__gnu_cxx::__ops
_Iter_equal_to_val	hello_preproc.cpp	/^  struct _Iter_equal_to_val$/;"	s	namespace:__gnu_cxx::__ops	file:
operator ()	hello_preproc.cpp	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_val
__iter_equal_to_val	hello_preproc.cpp	/^  __iter_equal_to_val()$/;"	f	namespace:__gnu_cxx::__ops
__iter_comp_val	hello_preproc.cpp	/^  __iter_comp_val(_Iter_equal_to_iter)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_comp_iter	hello_preproc.cpp	/^    struct _Iter_comp_iter$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_comp	hello_preproc.cpp	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_iter	file:
_Iter_comp_iter	hello_preproc.cpp	/^      _Iter_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter
operator ()	hello_preproc.cpp	/^        operator()(_Iterator1 __it1, _Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter
__iter_comp_iter	hello_preproc.cpp	/^    __iter_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_comp_val	hello_preproc.cpp	/^    struct _Iter_comp_val$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_comp	hello_preproc.cpp	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_val	file:
_Iter_comp_val	hello_preproc.cpp	/^      _Iter_comp_val(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val
operator ()	hello_preproc.cpp	/^ operator()(_Iterator __it, _Value& __val)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val
__iter_comp_val	hello_preproc.cpp	/^    __iter_comp_val(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops
__iter_comp_val	hello_preproc.cpp	/^    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops
_Val_comp_iter	hello_preproc.cpp	/^    struct _Val_comp_iter$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_comp	hello_preproc.cpp	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Val_comp_iter	file:
_Val_comp_iter	hello_preproc.cpp	/^      _Val_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter
operator ()	hello_preproc.cpp	/^ operator()(_Value& __val, _Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter
__val_comp_iter	hello_preproc.cpp	/^    __val_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops
__val_comp_iter	hello_preproc.cpp	/^    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_equals_val	hello_preproc.cpp	/^    struct _Iter_equals_val$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_value	hello_preproc.cpp	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_val	file:
_Iter_equals_val	hello_preproc.cpp	/^      _Iter_equals_val(_Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val
operator ()	hello_preproc.cpp	/^ operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val
__iter_equals_val	hello_preproc.cpp	/^    __iter_equals_val(_Value& __val)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_equals_iter	hello_preproc.cpp	/^    struct _Iter_equals_iter$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_ref	hello_preproc.cpp	/^      typename std::iterator_traits<_Iterator1>::reference _M_ref;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_iter	file:
_Iter_equals_iter	hello_preproc.cpp	/^      _Iter_equals_iter(_Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter
operator ()	hello_preproc.cpp	/^ operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter
__iter_comp_iter	hello_preproc.cpp	/^    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_pred	hello_preproc.cpp	/^    struct _Iter_pred$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_pred	hello_preproc.cpp	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_pred	file:
_Iter_pred	hello_preproc.cpp	/^      _Iter_pred(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred
operator ()	hello_preproc.cpp	/^ operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred
__pred_iter	hello_preproc.cpp	/^    __pred_iter(_Predicate __pred)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_comp_to_val	hello_preproc.cpp	/^    struct _Iter_comp_to_val$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_comp	hello_preproc.cpp	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	file:
_M_value	hello_preproc.cpp	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	file:
_Iter_comp_to_val	hello_preproc.cpp	/^      _Iter_comp_to_val(_Compare __comp, _Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val
operator ()	hello_preproc.cpp	/^ operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val
__iter_comp_val	hello_preproc.cpp	/^    __iter_comp_val(_Compare __comp, _Value &__val)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_comp_to_iter	hello_preproc.cpp	/^    struct _Iter_comp_to_iter$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_comp	hello_preproc.cpp	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	file:
_M_ref	hello_preproc.cpp	/^      typename std::iterator_traits<_Iterator1>::reference _M_ref;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	file:
_Iter_comp_to_iter	hello_preproc.cpp	/^      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter
operator ()	hello_preproc.cpp	/^ operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter
__iter_comp_iter	hello_preproc.cpp	/^    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops
_Iter_negate	hello_preproc.cpp	/^    struct _Iter_negate$/;"	s	namespace:__gnu_cxx::__ops	file:
_M_pred	hello_preproc.cpp	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_negate	file:
_Iter_negate	hello_preproc.cpp	/^      _Iter_negate(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate
operator ()	hello_preproc.cpp	/^ operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate
__negate	hello_preproc.cpp	/^    __negate(_Iter_pred<_Predicate> __pred)$/;"	f	namespace:__gnu_cxx::__ops
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__iter_swap	hello_preproc.cpp	/^    struct __iter_swap$/;"	s	namespace:std	file:
iter_swap	hello_preproc.cpp	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap
__iter_swap	hello_preproc.cpp	/^    struct __iter_swap<true>$/;"	s	namespace:std	file:
iter_swap	hello_preproc.cpp	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap
iter_swap	hello_preproc.cpp	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std
swap_ranges	hello_preproc.cpp	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std
min	hello_preproc.cpp	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std
max	hello_preproc.cpp	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std
min	hello_preproc.cpp	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std
max	hello_preproc.cpp	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std
_Niter_base	hello_preproc.cpp	/^    struct _Niter_base$/;"	s	namespace:std	file:
__niter_base	hello_preproc.cpp	/^    __niter_base(_Iterator __it)$/;"	f	namespace:std
_Miter_base	hello_preproc.cpp	/^    struct _Miter_base$/;"	s	namespace:std	file:
__miter_base	hello_preproc.cpp	/^    __miter_base(_Iterator __it)$/;"	f	namespace:std
__copy_move	hello_preproc.cpp	/^    struct __copy_move$/;"	s	namespace:std	file:
__copy_m	hello_preproc.cpp	/^        __copy_m(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_move
__copy_move	hello_preproc.cpp	/^    struct __copy_move<false, false, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_m	hello_preproc.cpp	/^        __copy_m(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_move
__copy_move	hello_preproc.cpp	/^    struct __copy_move<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_m	hello_preproc.cpp	/^        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move
__copy_move_a	hello_preproc.cpp	/^    __copy_move_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std
char_traits	hello_preproc.cpp	/^    struct char_traits;$/;"	x	file:
istreambuf_iterator	hello_preproc.cpp	/^    class istreambuf_iterator;$/;"	x	file:
ostreambuf_iterator	hello_preproc.cpp	/^    class ostreambuf_iterator;$/;"	x	file:
__copy_move_a2	hello_preproc.cpp	/^    __copy_move_a2(_CharT*, _CharT*,$/;"	p	namespace:std	file:
__copy_move_a2	hello_preproc.cpp	/^    __copy_move_a2(const _CharT*, const _CharT*,$/;"	p	namespace:std	file:
__copy_move_a2	hello_preproc.cpp	/^    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,$/;"	p	namespace:std	file:
__copy_move_a2	hello_preproc.cpp	/^    __copy_move_a2(_II __first, _II __last, _OI __result)$/;"	f	namespace:std
copy	hello_preproc.cpp	/^    copy(_II __first, _II __last, _OI __result)$/;"	f	namespace:std
__copy_move_backward	hello_preproc.cpp	/^    struct __copy_move_backward$/;"	s	namespace:std	file:
__copy_move_b	hello_preproc.cpp	/^        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_move_backward
__copy_move_backward	hello_preproc.cpp	/^    struct __copy_move_backward<false, false, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_move_b	hello_preproc.cpp	/^        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_move_backward
__copy_move_backward	hello_preproc.cpp	/^    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_move_b	hello_preproc.cpp	/^        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move_backward
__copy_move_backward_a	hello_preproc.cpp	/^    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std
__copy_move_backward_a2	hello_preproc.cpp	/^    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std
copy_backward	hello_preproc.cpp	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std
__fill_a	hello_preproc.cpp	/^    __fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std
__fill_a	hello_preproc.cpp	/^    __fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std
__fill_a	hello_preproc.cpp	/^    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)$/;"	f	namespace:std
fill	hello_preproc.cpp	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std
__fill_n_a	hello_preproc.cpp	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std
__fill_n_a	hello_preproc.cpp	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std
__fill_n_a	hello_preproc.cpp	/^    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)$/;"	f	namespace:std
fill_n	hello_preproc.cpp	/^    fill_n(_OI __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std
__equal	hello_preproc.cpp	/^    struct __equal$/;"	s	namespace:std	file:
equal	hello_preproc.cpp	/^        equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	struct:std::__equal
__equal	hello_preproc.cpp	/^    struct __equal<true>$/;"	s	namespace:std	file:
equal	hello_preproc.cpp	/^        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)$/;"	f	struct:std::__equal
__equal_aux	hello_preproc.cpp	/^    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std
__lc_rai	hello_preproc.cpp	/^    struct __lc_rai$/;"	s	namespace:std	file:
__newlast1	hello_preproc.cpp	/^        __newlast1(_II1, _II1 __last1, _II2, _II2)$/;"	f	struct:std::__lc_rai
__cnd2	hello_preproc.cpp	/^        __cnd2(_II __first, _II __last)$/;"	f	struct:std::__lc_rai
__lc_rai	hello_preproc.cpp	/^    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>$/;"	s	namespace:std	file:
__newlast1	hello_preproc.cpp	/^        __newlast1(_RAI1 __first1, _RAI1 __last1,$/;"	f	struct:std::__lc_rai
__cnd2	hello_preproc.cpp	/^        __cnd2(_RAI, _RAI)$/;"	f	struct:std::__lc_rai
__lexicographical_compare_impl	hello_preproc.cpp	/^    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,$/;"	f	namespace:std
__lexicographical_compare	hello_preproc.cpp	/^    struct __lexicographical_compare$/;"	s	namespace:std	file:
__lc	hello_preproc.cpp	/^        static bool __lc(_II1, _II1, _II2, _II2);$/;"	p	struct:std::__lexicographical_compare	file:
__lc	hello_preproc.cpp	/^      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	class:std::__lexicographical_compare
__lexicographical_compare	hello_preproc.cpp	/^    struct __lexicographical_compare<true>$/;"	s	namespace:std	file:
__lc	hello_preproc.cpp	/^        __lc(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare
__lexicographical_compare_aux	hello_preproc.cpp	/^    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,$/;"	f	namespace:std
__lower_bound	hello_preproc.cpp	/^    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std
lower_bound	hello_preproc.cpp	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std
__lg	hello_preproc.cpp	/^  __lg(int __n)$/;"	f	namespace:std
__lg	hello_preproc.cpp	/^  __lg(unsigned __n)$/;"	f	namespace:std
__lg	hello_preproc.cpp	/^  __lg(long __n)$/;"	f	namespace:std
__lg	hello_preproc.cpp	/^  __lg(unsigned long __n)$/;"	f	namespace:std
__lg	hello_preproc.cpp	/^  __lg(long long __n)$/;"	f	namespace:std
__lg	hello_preproc.cpp	/^  __lg(unsigned long long __n)$/;"	f	namespace:std
equal	hello_preproc.cpp	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std
equal	hello_preproc.cpp	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std
lexicographical_compare	hello_preproc.cpp	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std
lexicographical_compare	hello_preproc.cpp	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std
__mismatch	hello_preproc.cpp	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std
mismatch	hello_preproc.cpp	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std
mismatch	hello_preproc.cpp	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
_Char_types	hello_preproc.cpp	/^    struct _Char_types$/;"	s	namespace:__gnu_cxx	file:
int_type	hello_preproc.cpp	/^      typedef unsigned long int_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
pos_type	hello_preproc.cpp	/^      typedef std::streampos pos_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
off_type	hello_preproc.cpp	/^      typedef std::streamoff off_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
state_type	hello_preproc.cpp	/^      typedef std::mbstate_t state_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
char_traits	hello_preproc.cpp	/^    struct char_traits$/;"	s	namespace:__gnu_cxx	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
int_type	hello_preproc.cpp	/^      typedef typename _Char_types<_CharT>::int_type int_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
pos_type	hello_preproc.cpp	/^      typedef typename _Char_types<_CharT>::pos_type pos_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
off_type	hello_preproc.cpp	/^      typedef typename _Char_types<_CharT>::off_type off_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
state_type	hello_preproc.cpp	/^      typedef typename _Char_types<_CharT>::state_type state_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
assign	hello_preproc.cpp	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
eq	hello_preproc.cpp	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
lt	hello_preproc.cpp	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
compare	hello_preproc.cpp	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	file:
length	hello_preproc.cpp	/^      length(const char_type* __s);$/;"	p	struct:__gnu_cxx::char_traits	file:
find	hello_preproc.cpp	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	p	struct:__gnu_cxx::char_traits	file:
move	hello_preproc.cpp	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	file:
copy	hello_preproc.cpp	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	file:
assign	hello_preproc.cpp	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	p	struct:__gnu_cxx::char_traits	file:
to_char_type	hello_preproc.cpp	/^      to_char_type(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits
to_int_type	hello_preproc.cpp	/^      to_int_type(const char_type& __c)$/;"	f	struct:__gnu_cxx::char_traits
eq_int_type	hello_preproc.cpp	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
eof	hello_preproc.cpp	/^      eof()$/;"	f	struct:__gnu_cxx::char_traits
not_eof	hello_preproc.cpp	/^      not_eof(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits
compare	hello_preproc.cpp	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits
length	hello_preproc.cpp	/^    length(const char_type* __p)$/;"	f	class:__gnu_cxx::char_traits
find	hello_preproc.cpp	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	f	class:__gnu_cxx::char_traits
move	hello_preproc.cpp	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits
copy	hello_preproc.cpp	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits
assign	hello_preproc.cpp	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	f	class:__gnu_cxx::char_traits
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
char_traits	hello_preproc.cpp	/^    struct char_traits : public __gnu_cxx::char_traits<_CharT>$/;"	s	namespace:std	file:
char_traits	hello_preproc.cpp	/^    struct char_traits<char>$/;"	s	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef char char_type;$/;"	t	struct:std::char_traits	file:
int_type	hello_preproc.cpp	/^      typedef int int_type;$/;"	t	struct:std::char_traits	file:
pos_type	hello_preproc.cpp	/^      typedef streampos pos_type;$/;"	t	struct:std::char_traits	file:
off_type	hello_preproc.cpp	/^      typedef streamoff off_type;$/;"	t	struct:std::char_traits	file:
state_type	hello_preproc.cpp	/^      typedef mbstate_t state_type;$/;"	t	struct:std::char_traits	file:
assign	hello_preproc.cpp	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
eq	hello_preproc.cpp	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
lt	hello_preproc.cpp	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
compare	hello_preproc.cpp	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
length	hello_preproc.cpp	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits
find	hello_preproc.cpp	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits
move	hello_preproc.cpp	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
copy	hello_preproc.cpp	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
assign	hello_preproc.cpp	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits
to_char_type	hello_preproc.cpp	/^      to_char_type(const int_type& __c)$/;"	f	struct:std::char_traits
to_int_type	hello_preproc.cpp	/^      to_int_type(const char_type& __c)$/;"	f	struct:std::char_traits
eq_int_type	hello_preproc.cpp	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:std::char_traits
eof	hello_preproc.cpp	/^      eof()$/;"	f	struct:std::char_traits
not_eof	hello_preproc.cpp	/^      not_eof(const int_type& __c)$/;"	f	struct:std::char_traits
char_traits	hello_preproc.cpp	/^    struct char_traits<wchar_t>$/;"	s	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef wchar_t char_type;$/;"	t	struct:std::char_traits	file:
int_type	hello_preproc.cpp	/^      typedef wint_t int_type;$/;"	t	struct:std::char_traits	file:
off_type	hello_preproc.cpp	/^      typedef streamoff off_type;$/;"	t	struct:std::char_traits	file:
pos_type	hello_preproc.cpp	/^      typedef wstreampos pos_type;$/;"	t	struct:std::char_traits	file:
state_type	hello_preproc.cpp	/^      typedef mbstate_t state_type;$/;"	t	struct:std::char_traits	file:
assign	hello_preproc.cpp	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
eq	hello_preproc.cpp	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
lt	hello_preproc.cpp	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
compare	hello_preproc.cpp	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
length	hello_preproc.cpp	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits
find	hello_preproc.cpp	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits
move	hello_preproc.cpp	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
copy	hello_preproc.cpp	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
assign	hello_preproc.cpp	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits
to_char_type	hello_preproc.cpp	/^      to_char_type(const int_type& __c)$/;"	f	struct:std::char_traits
to_int_type	hello_preproc.cpp	/^      to_int_type(const char_type& __c)$/;"	f	struct:std::char_traits
eq_int_type	hello_preproc.cpp	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:std::char_traits
eof	hello_preproc.cpp	/^      eof()$/;"	f	struct:std::char_traits
not_eof	hello_preproc.cpp	/^      not_eof(const int_type& __c)$/;"	f	struct:std::char_traits
lconv	hello_preproc.cpp	/^struct lconv$/;"	s	file:
decimal_point	hello_preproc.cpp	/^  char *decimal_point;$/;"	m	struct:lconv	file:
thousands_sep	hello_preproc.cpp	/^  char *thousands_sep;$/;"	m	struct:lconv	file:
grouping	hello_preproc.cpp	/^  char *grouping;$/;"	m	struct:lconv	file:
int_curr_symbol	hello_preproc.cpp	/^  char *int_curr_symbol;$/;"	m	struct:lconv	file:
currency_symbol	hello_preproc.cpp	/^  char *currency_symbol;$/;"	m	struct:lconv	file:
mon_decimal_point	hello_preproc.cpp	/^  char *mon_decimal_point;$/;"	m	struct:lconv	file:
mon_thousands_sep	hello_preproc.cpp	/^  char *mon_thousands_sep;$/;"	m	struct:lconv	file:
mon_grouping	hello_preproc.cpp	/^  char *mon_grouping;$/;"	m	struct:lconv	file:
positive_sign	hello_preproc.cpp	/^  char *positive_sign;$/;"	m	struct:lconv	file:
negative_sign	hello_preproc.cpp	/^  char *negative_sign;$/;"	m	struct:lconv	file:
int_frac_digits	hello_preproc.cpp	/^  char int_frac_digits;$/;"	m	struct:lconv	file:
frac_digits	hello_preproc.cpp	/^  char frac_digits;$/;"	m	struct:lconv	file:
p_cs_precedes	hello_preproc.cpp	/^  char p_cs_precedes;$/;"	m	struct:lconv	file:
p_sep_by_space	hello_preproc.cpp	/^  char p_sep_by_space;$/;"	m	struct:lconv	file:
n_cs_precedes	hello_preproc.cpp	/^  char n_cs_precedes;$/;"	m	struct:lconv	file:
n_sep_by_space	hello_preproc.cpp	/^  char n_sep_by_space;$/;"	m	struct:lconv	file:
p_sign_posn	hello_preproc.cpp	/^  char p_sign_posn;$/;"	m	struct:lconv	file:
n_sign_posn	hello_preproc.cpp	/^  char n_sign_posn;$/;"	m	struct:lconv	file:
int_p_cs_precedes	hello_preproc.cpp	/^  char int_p_cs_precedes;$/;"	m	struct:lconv	file:
int_p_sep_by_space	hello_preproc.cpp	/^  char int_p_sep_by_space;$/;"	m	struct:lconv	file:
int_n_cs_precedes	hello_preproc.cpp	/^  char int_n_cs_precedes;$/;"	m	struct:lconv	file:
int_n_sep_by_space	hello_preproc.cpp	/^  char int_n_sep_by_space;$/;"	m	struct:lconv	file:
int_p_sign_posn	hello_preproc.cpp	/^  char int_p_sign_posn;$/;"	m	struct:lconv	file:
int_n_sign_posn	hello_preproc.cpp	/^  char int_n_sign_posn;$/;"	m	struct:lconv	file:
setlocale	hello_preproc.cpp	/^extern char *setlocale (int __category, const char *__locale) throw ();$/;"	p	file:
localeconv	hello_preproc.cpp	/^extern struct lconv *localeconv (void) throw ();$/;"	p	file:
newlocale	hello_preproc.cpp	/^extern __locale_t newlocale (int __category_mask, const char *__locale,$/;"	p	file:
duplocale	hello_preproc.cpp	/^extern __locale_t duplocale (__locale_t __dataset) throw ();$/;"	p	file:
freelocale	hello_preproc.cpp	/^extern void freelocale (__locale_t __dataset) throw ();$/;"	p	file:
uselocale	hello_preproc.cpp	/^extern __locale_t uselocale (__locale_t __dataset) throw ();$/;"	p	file:
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__uselocale	hello_preproc.cpp	/^  extern "C" __typeof(uselocale) __uselocale;$/;"	m	namespace:__gnu_cxx	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__c_locale	hello_preproc.cpp	/^  typedef __locale_t __c_locale;$/;"	t	namespace:std	file:
__convert_from_v	hello_preproc.cpp	/^  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),$/;"	f	namespace:std
__u_char	hello_preproc.cpp	/^typedef unsigned char __u_char;$/;"	t	file:
__u_short	hello_preproc.cpp	/^typedef unsigned short int __u_short;$/;"	t	file:
__u_int	hello_preproc.cpp	/^typedef unsigned int __u_int;$/;"	t	file:
__u_long	hello_preproc.cpp	/^typedef unsigned long int __u_long;$/;"	t	file:
__int8_t	hello_preproc.cpp	/^typedef signed char __int8_t;$/;"	t	file:
__uint8_t	hello_preproc.cpp	/^typedef unsigned char __uint8_t;$/;"	t	file:
__int16_t	hello_preproc.cpp	/^typedef signed short int __int16_t;$/;"	t	file:
__uint16_t	hello_preproc.cpp	/^typedef unsigned short int __uint16_t;$/;"	t	file:
__int32_t	hello_preproc.cpp	/^typedef signed int __int32_t;$/;"	t	file:
__uint32_t	hello_preproc.cpp	/^typedef unsigned int __uint32_t;$/;"	t	file:
__int64_t	hello_preproc.cpp	/^typedef signed long int __int64_t;$/;"	t	file:
__uint64_t	hello_preproc.cpp	/^typedef unsigned long int __uint64_t;$/;"	t	file:
__quad_t	hello_preproc.cpp	/^typedef long int __quad_t;$/;"	t	file:
__u_quad_t	hello_preproc.cpp	/^typedef unsigned long int __u_quad_t;$/;"	t	file:
__dev_t	hello_preproc.cpp	/^typedef unsigned long int __dev_t;$/;"	t	file:
__uid_t	hello_preproc.cpp	/^typedef unsigned int __uid_t;$/;"	t	file:
__gid_t	hello_preproc.cpp	/^typedef unsigned int __gid_t;$/;"	t	file:
__ino_t	hello_preproc.cpp	/^typedef unsigned long int __ino_t;$/;"	t	file:
__ino64_t	hello_preproc.cpp	/^typedef unsigned long int __ino64_t;$/;"	t	file:
__mode_t	hello_preproc.cpp	/^typedef unsigned int __mode_t;$/;"	t	file:
__nlink_t	hello_preproc.cpp	/^typedef unsigned long int __nlink_t;$/;"	t	file:
__off_t	hello_preproc.cpp	/^typedef long int __off_t;$/;"	t	file:
__off64_t	hello_preproc.cpp	/^typedef long int __off64_t;$/;"	t	file:
__pid_t	hello_preproc.cpp	/^typedef int __pid_t;$/;"	t	file:
__val	hello_preproc.cpp	/^typedef struct { int __val[2]; } __fsid_t;$/;"	m	struct:__anon40	file:
__fsid_t	hello_preproc.cpp	/^typedef struct { int __val[2]; } __fsid_t;$/;"	t	typeref:struct:__anon40	file:
__clock_t	hello_preproc.cpp	/^typedef long int __clock_t;$/;"	t	file:
__rlim_t	hello_preproc.cpp	/^typedef unsigned long int __rlim_t;$/;"	t	file:
__rlim64_t	hello_preproc.cpp	/^typedef unsigned long int __rlim64_t;$/;"	t	file:
__id_t	hello_preproc.cpp	/^typedef unsigned int __id_t;$/;"	t	file:
__time_t	hello_preproc.cpp	/^typedef long int __time_t;$/;"	t	file:
__useconds_t	hello_preproc.cpp	/^typedef unsigned int __useconds_t;$/;"	t	file:
__suseconds_t	hello_preproc.cpp	/^typedef long int __suseconds_t;$/;"	t	file:
__daddr_t	hello_preproc.cpp	/^typedef int __daddr_t;$/;"	t	file:
__key_t	hello_preproc.cpp	/^typedef int __key_t;$/;"	t	file:
__clockid_t	hello_preproc.cpp	/^typedef int __clockid_t;$/;"	t	file:
__timer_t	hello_preproc.cpp	/^typedef void * __timer_t;$/;"	t	file:
__blksize_t	hello_preproc.cpp	/^typedef long int __blksize_t;$/;"	t	file:
__blkcnt_t	hello_preproc.cpp	/^typedef long int __blkcnt_t;$/;"	t	file:
__blkcnt64_t	hello_preproc.cpp	/^typedef long int __blkcnt64_t;$/;"	t	file:
__fsblkcnt_t	hello_preproc.cpp	/^typedef unsigned long int __fsblkcnt_t;$/;"	t	file:
__fsblkcnt64_t	hello_preproc.cpp	/^typedef unsigned long int __fsblkcnt64_t;$/;"	t	file:
__fsfilcnt_t	hello_preproc.cpp	/^typedef unsigned long int __fsfilcnt_t;$/;"	t	file:
__fsfilcnt64_t	hello_preproc.cpp	/^typedef unsigned long int __fsfilcnt64_t;$/;"	t	file:
__fsword_t	hello_preproc.cpp	/^typedef long int __fsword_t;$/;"	t	file:
__ssize_t	hello_preproc.cpp	/^typedef long int __ssize_t;$/;"	t	file:
__syscall_slong_t	hello_preproc.cpp	/^typedef long int __syscall_slong_t;$/;"	t	file:
__syscall_ulong_t	hello_preproc.cpp	/^typedef unsigned long int __syscall_ulong_t;$/;"	t	file:
__loff_t	hello_preproc.cpp	/^typedef __off64_t __loff_t;$/;"	t	file:
__qaddr_t	hello_preproc.cpp	/^typedef __quad_t *__qaddr_t;$/;"	t	file:
__caddr_t	hello_preproc.cpp	/^typedef char *__caddr_t;$/;"	t	file:
__intptr_t	hello_preproc.cpp	/^typedef long int __intptr_t;$/;"	t	file:
__socklen_t	hello_preproc.cpp	/^typedef unsigned int __socklen_t;$/;"	t	file:
__bswap_32	hello_preproc.cpp	/^__bswap_32 (unsigned int __bsx)$/;"	f	file:
__bswap_64	hello_preproc.cpp	/^__bswap_64 (__uint64_t __bsx)$/;"	f	file:
_ISupper	hello_preproc.cpp	/^  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),$/;"	e	enum:__anon41	file:
_ISlower	hello_preproc.cpp	/^  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),$/;"	e	enum:__anon41	file:
_ISalpha	hello_preproc.cpp	/^  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),$/;"	e	enum:__anon41	file:
_ISdigit	hello_preproc.cpp	/^  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),$/;"	e	enum:__anon41	file:
_ISxdigit	hello_preproc.cpp	/^  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),$/;"	e	enum:__anon41	file:
_ISspace	hello_preproc.cpp	/^  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),$/;"	e	enum:__anon41	file:
_ISprint	hello_preproc.cpp	/^  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),$/;"	e	enum:__anon41	file:
_ISgraph	hello_preproc.cpp	/^  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),$/;"	e	enum:__anon41	file:
_ISblank	hello_preproc.cpp	/^  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),$/;"	e	enum:__anon41	file:
_IScntrl	hello_preproc.cpp	/^  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),$/;"	e	enum:__anon41	file:
_ISpunct	hello_preproc.cpp	/^  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),$/;"	e	enum:__anon41	file:
_ISalnum	hello_preproc.cpp	/^  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))$/;"	e	enum:__anon41	file:
__ctype_b_loc	hello_preproc.cpp	/^extern const unsigned short int **__ctype_b_loc (void)$/;"	p	file:
__ctype_tolower_loc	hello_preproc.cpp	/^extern const __int32_t **__ctype_tolower_loc (void)$/;"	p	file:
__ctype_toupper_loc	hello_preproc.cpp	/^extern const __int32_t **__ctype_toupper_loc (void)$/;"	p	file:
isalnum	hello_preproc.cpp	/^extern int isalnum (int) throw ();$/;"	p	file:
isalpha	hello_preproc.cpp	/^extern int isalpha (int) throw ();$/;"	p	file:
iscntrl	hello_preproc.cpp	/^extern int iscntrl (int) throw ();$/;"	p	file:
isdigit	hello_preproc.cpp	/^extern int isdigit (int) throw ();$/;"	p	file:
islower	hello_preproc.cpp	/^extern int islower (int) throw ();$/;"	p	file:
isgraph	hello_preproc.cpp	/^extern int isgraph (int) throw ();$/;"	p	file:
isprint	hello_preproc.cpp	/^extern int isprint (int) throw ();$/;"	p	file:
ispunct	hello_preproc.cpp	/^extern int ispunct (int) throw ();$/;"	p	file:
isspace	hello_preproc.cpp	/^extern int isspace (int) throw ();$/;"	p	file:
isupper	hello_preproc.cpp	/^extern int isupper (int) throw ();$/;"	p	file:
isxdigit	hello_preproc.cpp	/^extern int isxdigit (int) throw ();$/;"	p	file:
tolower	hello_preproc.cpp	/^extern int tolower (int __c) throw ();$/;"	p	file:
toupper	hello_preproc.cpp	/^extern int toupper (int __c) throw ();$/;"	p	file:
isblank	hello_preproc.cpp	/^extern int isblank (int) throw ();$/;"	p	file:
isctype	hello_preproc.cpp	/^extern int isctype (int __c, int __mask) throw ();$/;"	p	file:
isascii	hello_preproc.cpp	/^extern int isascii (int __c) throw ();$/;"	p	file:
toascii	hello_preproc.cpp	/^extern int toascii (int __c) throw ();$/;"	p	file:
_toupper	hello_preproc.cpp	/^extern int _toupper (int) throw ();$/;"	p	file:
_tolower	hello_preproc.cpp	/^extern int _tolower (int) throw ();$/;"	p	file:
isalnum_l	hello_preproc.cpp	/^extern int isalnum_l (int, __locale_t) throw ();$/;"	p	file:
isalpha_l	hello_preproc.cpp	/^extern int isalpha_l (int, __locale_t) throw ();$/;"	p	file:
iscntrl_l	hello_preproc.cpp	/^extern int iscntrl_l (int, __locale_t) throw ();$/;"	p	file:
isdigit_l	hello_preproc.cpp	/^extern int isdigit_l (int, __locale_t) throw ();$/;"	p	file:
islower_l	hello_preproc.cpp	/^extern int islower_l (int, __locale_t) throw ();$/;"	p	file:
isgraph_l	hello_preproc.cpp	/^extern int isgraph_l (int, __locale_t) throw ();$/;"	p	file:
isprint_l	hello_preproc.cpp	/^extern int isprint_l (int, __locale_t) throw ();$/;"	p	file:
ispunct_l	hello_preproc.cpp	/^extern int ispunct_l (int, __locale_t) throw ();$/;"	p	file:
isspace_l	hello_preproc.cpp	/^extern int isspace_l (int, __locale_t) throw ();$/;"	p	file:
isupper_l	hello_preproc.cpp	/^extern int isupper_l (int, __locale_t) throw ();$/;"	p	file:
isxdigit_l	hello_preproc.cpp	/^extern int isxdigit_l (int, __locale_t) throw ();$/;"	p	file:
isblank_l	hello_preproc.cpp	/^extern int isblank_l (int, __locale_t) throw ();$/;"	p	file:
__tolower_l	hello_preproc.cpp	/^extern int __tolower_l (int __c, __locale_t __l) throw ();$/;"	p	file:
tolower_l	hello_preproc.cpp	/^extern int tolower_l (int __c, __locale_t __l) throw ();$/;"	p	file:
__toupper_l	hello_preproc.cpp	/^extern int __toupper_l (int __c, __locale_t __l) throw ();$/;"	p	file:
toupper_l	hello_preproc.cpp	/^extern int toupper_l (int __c, __locale_t __l) throw ();$/;"	p	file:
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
locale	hello_preproc.cpp	/^  class locale;$/;"	x	file:
has_facet	hello_preproc.cpp	/^    has_facet(const locale&) throw();$/;"	p	namespace:std	file:
use_facet	hello_preproc.cpp	/^    use_facet(const locale&);$/;"	p	namespace:std	file:
isspace	hello_preproc.cpp	/^    isspace(_CharT, const locale&);$/;"	p	namespace:std	file:
isprint	hello_preproc.cpp	/^    isprint(_CharT, const locale&);$/;"	p	namespace:std	file:
iscntrl	hello_preproc.cpp	/^    iscntrl(_CharT, const locale&);$/;"	p	namespace:std	file:
isupper	hello_preproc.cpp	/^    isupper(_CharT, const locale&);$/;"	p	namespace:std	file:
islower	hello_preproc.cpp	/^    islower(_CharT, const locale&);$/;"	p	namespace:std	file:
isalpha	hello_preproc.cpp	/^    isalpha(_CharT, const locale&);$/;"	p	namespace:std	file:
isdigit	hello_preproc.cpp	/^    isdigit(_CharT, const locale&);$/;"	p	namespace:std	file:
ispunct	hello_preproc.cpp	/^    ispunct(_CharT, const locale&);$/;"	p	namespace:std	file:
isxdigit	hello_preproc.cpp	/^    isxdigit(_CharT, const locale&);$/;"	p	namespace:std	file:
isalnum	hello_preproc.cpp	/^    isalnum(_CharT, const locale&);$/;"	p	namespace:std	file:
isgraph	hello_preproc.cpp	/^    isgraph(_CharT, const locale&);$/;"	p	namespace:std	file:
toupper	hello_preproc.cpp	/^    toupper(_CharT, const locale&);$/;"	p	namespace:std	file:
tolower	hello_preproc.cpp	/^    tolower(_CharT, const locale&);$/;"	p	namespace:std	file:
ctype_base	hello_preproc.cpp	/^  class ctype_base;$/;"	x	file:
ctype	hello_preproc.cpp	/^    class ctype;$/;"	x	file:
ctype	hello_preproc.cpp	/^  template<> class ctype<char>;$/;"	x	file:
ctype	hello_preproc.cpp	/^  template<> class ctype<wchar_t>;$/;"	x	file:
ctype_byname	hello_preproc.cpp	/^    class ctype_byname;$/;"	x	file:
codecvt_base	hello_preproc.cpp	/^  class codecvt_base;$/;"	x	file:
codecvt	hello_preproc.cpp	/^    class codecvt;$/;"	x	file:
codecvt	hello_preproc.cpp	/^  template<> class codecvt<char, char, mbstate_t>;$/;"	x	file:
codecvt	hello_preproc.cpp	/^  template<> class codecvt<wchar_t, char, mbstate_t>;$/;"	x	file:
codecvt_byname	hello_preproc.cpp	/^    class codecvt_byname;$/;"	x	file:
num_get	hello_preproc.cpp	/^    class num_get;$/;"	x	file:
num_put	hello_preproc.cpp	/^    class num_put;$/;"	x	file:
numpunct	hello_preproc.cpp	/^  template<typename _CharT> class numpunct;$/;"	x	file:
numpunct_byname	hello_preproc.cpp	/^  template<typename _CharT> class numpunct_byname;$/;"	x	file:
collate	hello_preproc.cpp	/^    class collate;$/;"	x	file:
collate_byname	hello_preproc.cpp	/^    class collate_byname;$/;"	x	file:
time_base	hello_preproc.cpp	/^  class time_base;$/;"	x	file:
time_get	hello_preproc.cpp	/^    class time_get;$/;"	x	file:
time_get_byname	hello_preproc.cpp	/^    class time_get_byname;$/;"	x	file:
time_put	hello_preproc.cpp	/^    class time_put;$/;"	x	file:
time_put_byname	hello_preproc.cpp	/^    class time_put_byname;$/;"	x	file:
money_base	hello_preproc.cpp	/^  class money_base;$/;"	x	file:
money_get	hello_preproc.cpp	/^    class money_get;$/;"	x	file:
money_put	hello_preproc.cpp	/^    class money_put;$/;"	x	file:
moneypunct	hello_preproc.cpp	/^    class moneypunct;$/;"	x	file:
moneypunct_byname	hello_preproc.cpp	/^    class moneypunct_byname;$/;"	x	file:
messages_base	hello_preproc.cpp	/^  class messages_base;$/;"	x	file:
messages	hello_preproc.cpp	/^    class messages;$/;"	x	file:
messages_byname	hello_preproc.cpp	/^    class messages_byname;$/;"	x	file:
time_t	hello_preproc.cpp	/^typedef __time_t time_t;$/;"	t	file:
timespec	hello_preproc.cpp	/^struct timespec$/;"	s	file:
tv_sec	hello_preproc.cpp	/^    __time_t tv_sec;$/;"	m	struct:timespec	file:
tv_nsec	hello_preproc.cpp	/^    __syscall_slong_t tv_nsec;$/;"	m	struct:timespec	file:
pid_t	hello_preproc.cpp	/^typedef __pid_t pid_t;$/;"	t	file:
sched_param	hello_preproc.cpp	/^struct sched_param$/;"	s	file:
__sched_priority	hello_preproc.cpp	/^    int __sched_priority;$/;"	m	struct:sched_param	file:
clone	hello_preproc.cpp	/^extern int clone (int (*__fn) (void *__arg), void *__child_stack,$/;"	p	file:
unshare	hello_preproc.cpp	/^extern int unshare (int __flags) throw ();$/;"	p	file:
sched_getcpu	hello_preproc.cpp	/^extern int sched_getcpu (void) throw ();$/;"	p	file:
setns	hello_preproc.cpp	/^extern int setns (int __fd, int __nstype) throw ();$/;"	p	file:
__sched_param	hello_preproc.cpp	/^struct __sched_param$/;"	s	file:
__sched_priority	hello_preproc.cpp	/^    int __sched_priority;$/;"	m	struct:__sched_param	file:
__cpu_mask	hello_preproc.cpp	/^typedef unsigned long int __cpu_mask;$/;"	t	file:
__bits	hello_preproc.cpp	/^  __cpu_mask __bits[1024 \/ (8 * sizeof (__cpu_mask))];$/;"	m	struct:__anon42	file:
cpu_set_t	hello_preproc.cpp	/^} cpu_set_t;$/;"	t	typeref:struct:__anon42	file:
__sched_cpucount	hello_preproc.cpp	/^extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)$/;"	p	file:
__sched_cpualloc	hello_preproc.cpp	/^extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;$/;"	p	file:
__sched_cpufree	hello_preproc.cpp	/^extern void __sched_cpufree (cpu_set_t *__set) throw ();$/;"	p	file:
sched_setparam	hello_preproc.cpp	/^extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)$/;"	p	file:
sched_getparam	hello_preproc.cpp	/^extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();$/;"	p	file:
sched_setscheduler	hello_preproc.cpp	/^extern int sched_setscheduler (__pid_t __pid, int __policy,$/;"	p	file:
sched_getscheduler	hello_preproc.cpp	/^extern int sched_getscheduler (__pid_t __pid) throw ();$/;"	p	file:
sched_yield	hello_preproc.cpp	/^extern int sched_yield (void) throw ();$/;"	p	file:
sched_get_priority_max	hello_preproc.cpp	/^extern int sched_get_priority_max (int __algorithm) throw ();$/;"	p	file:
sched_get_priority_min	hello_preproc.cpp	/^extern int sched_get_priority_min (int __algorithm) throw ();$/;"	p	file:
sched_rr_get_interval	hello_preproc.cpp	/^extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();$/;"	p	file:
sched_setaffinity	hello_preproc.cpp	/^extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,$/;"	p	file:
sched_getaffinity	hello_preproc.cpp	/^extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,$/;"	p	file:
timeval	hello_preproc.cpp	/^struct timeval$/;"	s	file:
tv_sec	hello_preproc.cpp	/^    __time_t tv_sec;$/;"	m	struct:timeval	file:
tv_usec	hello_preproc.cpp	/^    __suseconds_t tv_usec;$/;"	m	struct:timeval	file:
timex	hello_preproc.cpp	/^struct timex$/;"	s	file:
modes	hello_preproc.cpp	/^  unsigned int modes;$/;"	m	struct:timex	file:
offset	hello_preproc.cpp	/^  __syscall_slong_t offset;$/;"	m	struct:timex	file:
freq	hello_preproc.cpp	/^  __syscall_slong_t freq;$/;"	m	struct:timex	file:
maxerror	hello_preproc.cpp	/^  __syscall_slong_t maxerror;$/;"	m	struct:timex	file:
esterror	hello_preproc.cpp	/^  __syscall_slong_t esterror;$/;"	m	struct:timex	file:
status	hello_preproc.cpp	/^  int status;$/;"	m	struct:timex	file:
constant	hello_preproc.cpp	/^  __syscall_slong_t constant;$/;"	m	struct:timex	file:
precision	hello_preproc.cpp	/^  __syscall_slong_t precision;$/;"	m	struct:timex	file:
tolerance	hello_preproc.cpp	/^  __syscall_slong_t tolerance;$/;"	m	struct:timex	file:
time	hello_preproc.cpp	/^  struct timeval time;$/;"	m	struct:timex	typeref:struct:timex::timeval	file:
tick	hello_preproc.cpp	/^  __syscall_slong_t tick;$/;"	m	struct:timex	file:
ppsfreq	hello_preproc.cpp	/^  __syscall_slong_t ppsfreq;$/;"	m	struct:timex	file:
jitter	hello_preproc.cpp	/^  __syscall_slong_t jitter;$/;"	m	struct:timex	file:
shift	hello_preproc.cpp	/^  int shift;$/;"	m	struct:timex	file:
stabil	hello_preproc.cpp	/^  __syscall_slong_t stabil;$/;"	m	struct:timex	file:
jitcnt	hello_preproc.cpp	/^  __syscall_slong_t jitcnt;$/;"	m	struct:timex	file:
calcnt	hello_preproc.cpp	/^  __syscall_slong_t calcnt;$/;"	m	struct:timex	file:
errcnt	hello_preproc.cpp	/^  __syscall_slong_t errcnt;$/;"	m	struct:timex	file:
stbcnt	hello_preproc.cpp	/^  __syscall_slong_t stbcnt;$/;"	m	struct:timex	file:
tai	hello_preproc.cpp	/^  int tai;$/;"	m	struct:timex	file:
clock_adjtime	hello_preproc.cpp	/^extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();$/;"	p	file:
clock_t	hello_preproc.cpp	/^typedef __clock_t clock_t;$/;"	t	file:
clockid_t	hello_preproc.cpp	/^typedef __clockid_t clockid_t;$/;"	t	file:
timer_t	hello_preproc.cpp	/^typedef __timer_t timer_t;$/;"	t	file:
tm	hello_preproc.cpp	/^struct tm$/;"	s	file:
tm_sec	hello_preproc.cpp	/^  int tm_sec;$/;"	m	struct:tm	file:
tm_min	hello_preproc.cpp	/^  int tm_min;$/;"	m	struct:tm	file:
tm_hour	hello_preproc.cpp	/^  int tm_hour;$/;"	m	struct:tm	file:
tm_mday	hello_preproc.cpp	/^  int tm_mday;$/;"	m	struct:tm	file:
tm_mon	hello_preproc.cpp	/^  int tm_mon;$/;"	m	struct:tm	file:
tm_year	hello_preproc.cpp	/^  int tm_year;$/;"	m	struct:tm	file:
tm_wday	hello_preproc.cpp	/^  int tm_wday;$/;"	m	struct:tm	file:
tm_yday	hello_preproc.cpp	/^  int tm_yday;$/;"	m	struct:tm	file:
tm_isdst	hello_preproc.cpp	/^  int tm_isdst;$/;"	m	struct:tm	file:
tm_gmtoff	hello_preproc.cpp	/^  long int tm_gmtoff;$/;"	m	struct:tm	file:
tm_zone	hello_preproc.cpp	/^  const char *tm_zone;$/;"	m	struct:tm	file:
itimerspec	hello_preproc.cpp	/^struct itimerspec$/;"	s	file:
it_interval	hello_preproc.cpp	/^    struct timespec it_interval;$/;"	m	struct:itimerspec	typeref:struct:itimerspec::timespec	file:
it_value	hello_preproc.cpp	/^    struct timespec it_value;$/;"	m	struct:itimerspec	typeref:struct:itimerspec::timespec	file:
sigevent	hello_preproc.cpp	/^struct sigevent;$/;"	x	file:
clock	hello_preproc.cpp	/^extern clock_t clock (void) throw ();$/;"	p	file:
time	hello_preproc.cpp	/^extern time_t time (time_t *__timer) throw ();$/;"	p	file:
difftime	hello_preproc.cpp	/^extern double difftime (time_t __time1, time_t __time0)$/;"	p	file:
mktime	hello_preproc.cpp	/^extern time_t mktime (struct tm *__tp) throw ();$/;"	p	file:
strftime	hello_preproc.cpp	/^extern size_t strftime (char *__restrict __s, size_t __maxsize,$/;"	p	file:
strptime	hello_preproc.cpp	/^extern char *strptime (const char *__restrict __s,$/;"	p	file:
strftime_l	hello_preproc.cpp	/^extern size_t strftime_l (char *__restrict __s, size_t __maxsize,$/;"	p	file:
strptime_l	hello_preproc.cpp	/^extern char *strptime_l (const char *__restrict __s,$/;"	p	file:
gmtime	hello_preproc.cpp	/^extern struct tm *gmtime (const time_t *__timer) throw ();$/;"	p	file:
localtime	hello_preproc.cpp	/^extern struct tm *localtime (const time_t *__timer) throw ();$/;"	p	file:
gmtime_r	hello_preproc.cpp	/^extern struct tm *gmtime_r (const time_t *__restrict __timer,$/;"	p	file:
localtime_r	hello_preproc.cpp	/^extern struct tm *localtime_r (const time_t *__restrict __timer,$/;"	p	file:
asctime	hello_preproc.cpp	/^extern char *asctime (const struct tm *__tp) throw ();$/;"	p	file:
ctime	hello_preproc.cpp	/^extern char *ctime (const time_t *__timer) throw ();$/;"	p	file:
asctime_r	hello_preproc.cpp	/^extern char *asctime_r (const struct tm *__restrict __tp,$/;"	p	file:
ctime_r	hello_preproc.cpp	/^extern char *ctime_r (const time_t *__restrict __timer,$/;"	p	file:
__tzname	hello_preproc.cpp	/^extern char *__tzname[2];$/;"	x
__daylight	hello_preproc.cpp	/^extern int __daylight;$/;"	x
__timezone	hello_preproc.cpp	/^extern long int __timezone;$/;"	x
tzname	hello_preproc.cpp	/^extern char *tzname[2];$/;"	x
tzset	hello_preproc.cpp	/^extern void tzset (void) throw ();$/;"	p	file:
daylight	hello_preproc.cpp	/^extern int daylight;$/;"	x
timezone	hello_preproc.cpp	/^extern long int timezone;$/;"	x
stime	hello_preproc.cpp	/^extern int stime (const time_t *__when) throw ();$/;"	p	file:
timegm	hello_preproc.cpp	/^extern time_t timegm (struct tm *__tp) throw ();$/;"	p	file:
timelocal	hello_preproc.cpp	/^extern time_t timelocal (struct tm *__tp) throw ();$/;"	p	file:
dysize	hello_preproc.cpp	/^extern int dysize (int __year) throw () __attribute__ ((__const__));$/;"	p	file:
nanosleep	hello_preproc.cpp	/^extern int nanosleep (const struct timespec *__requested_time,$/;"	p	file:
clock_getres	hello_preproc.cpp	/^extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();$/;"	p	file:
clock_gettime	hello_preproc.cpp	/^extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();$/;"	p	file:
clock_settime	hello_preproc.cpp	/^extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)$/;"	p	file:
clock_nanosleep	hello_preproc.cpp	/^extern int clock_nanosleep (clockid_t __clock_id, int __flags,$/;"	p	file:
clock_getcpuclockid	hello_preproc.cpp	/^extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();$/;"	p	file:
timer_create	hello_preproc.cpp	/^extern int timer_create (clockid_t __clock_id,$/;"	p	file:
timer_delete	hello_preproc.cpp	/^extern int timer_delete (timer_t __timerid) throw ();$/;"	p	file:
timer_settime	hello_preproc.cpp	/^extern int timer_settime (timer_t __timerid, int __flags,$/;"	p	file:
timer_gettime	hello_preproc.cpp	/^extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)$/;"	p	file:
timer_getoverrun	hello_preproc.cpp	/^extern int timer_getoverrun (timer_t __timerid) throw ();$/;"	p	file:
timespec_get	hello_preproc.cpp	/^extern int timespec_get (struct timespec *__ts, int __base)$/;"	p	file:
getdate_err	hello_preproc.cpp	/^extern int getdate_err;$/;"	x
getdate	hello_preproc.cpp	/^extern struct tm *getdate (const char *__string);$/;"	p	file:
getdate_r	hello_preproc.cpp	/^extern int getdate_r (const char *__restrict __string,$/;"	p	file:
pthread_t	hello_preproc.cpp	/^typedef unsigned long int pthread_t;$/;"	t	file:
pthread_attr_t	hello_preproc.cpp	/^union pthread_attr_t$/;"	u	file:
__size	hello_preproc.cpp	/^  char __size[56];$/;"	m	union:pthread_attr_t	file:
__align	hello_preproc.cpp	/^  long int __align;$/;"	m	union:pthread_attr_t	file:
pthread_attr_t	hello_preproc.cpp	/^typedef union pthread_attr_t pthread_attr_t;$/;"	t	typeref:union:pthread_attr_t	file:
__pthread_internal_list	hello_preproc.cpp	/^typedef struct __pthread_internal_list$/;"	s	file:
__prev	hello_preproc.cpp	/^  struct __pthread_internal_list *__prev;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list::__pthread_internal_list	file:
__next	hello_preproc.cpp	/^  struct __pthread_internal_list *__next;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list::__pthread_internal_list	file:
__pthread_list_t	hello_preproc.cpp	/^} __pthread_list_t;$/;"	t	typeref:struct:__pthread_internal_list	file:
__pthread_mutex_s	hello_preproc.cpp	/^  struct __pthread_mutex_s$/;"	s	union:__anon43	file:
__lock	hello_preproc.cpp	/^    int __lock;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__count	hello_preproc.cpp	/^    unsigned int __count;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__owner	hello_preproc.cpp	/^    int __owner;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__nusers	hello_preproc.cpp	/^    unsigned int __nusers;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__kind	hello_preproc.cpp	/^    int __kind;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__spins	hello_preproc.cpp	/^    short __spins;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__elision	hello_preproc.cpp	/^    short __elision;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__list	hello_preproc.cpp	/^    __pthread_list_t __list;$/;"	m	struct:__anon43::__pthread_mutex_s	file:
__data	hello_preproc.cpp	/^  } __data;$/;"	m	union:__anon43	typeref:struct:__anon43::__pthread_mutex_s	file:
__size	hello_preproc.cpp	/^  char __size[40];$/;"	m	union:__anon43	file:
__align	hello_preproc.cpp	/^  long int __align;$/;"	m	union:__anon43	file:
pthread_mutex_t	hello_preproc.cpp	/^} pthread_mutex_t;$/;"	t	typeref:union:__anon43	file:
__size	hello_preproc.cpp	/^  char __size[4];$/;"	m	union:__anon44	file:
__align	hello_preproc.cpp	/^  int __align;$/;"	m	union:__anon44	file:
pthread_mutexattr_t	hello_preproc.cpp	/^} pthread_mutexattr_t;$/;"	t	typeref:union:__anon44	file:
__lock	hello_preproc.cpp	/^    int __lock;$/;"	m	struct:__anon45::__anon46	file:
__futex	hello_preproc.cpp	/^    unsigned int __futex;$/;"	m	struct:__anon45::__anon46	file:
__total_seq	hello_preproc.cpp	/^    __extension__ unsigned long long int __total_seq;$/;"	m	struct:__anon45::__anon46	file:
__wakeup_seq	hello_preproc.cpp	/^    __extension__ unsigned long long int __wakeup_seq;$/;"	m	struct:__anon45::__anon46	file:
__woken_seq	hello_preproc.cpp	/^    __extension__ unsigned long long int __woken_seq;$/;"	m	struct:__anon45::__anon46	file:
__mutex	hello_preproc.cpp	/^    void *__mutex;$/;"	m	struct:__anon45::__anon46	file:
__nwaiters	hello_preproc.cpp	/^    unsigned int __nwaiters;$/;"	m	struct:__anon45::__anon46	file:
__broadcast_seq	hello_preproc.cpp	/^    unsigned int __broadcast_seq;$/;"	m	struct:__anon45::__anon46	file:
__data	hello_preproc.cpp	/^  } __data;$/;"	m	union:__anon45	typeref:struct:__anon45::__anon46	file:
__size	hello_preproc.cpp	/^  char __size[48];$/;"	m	union:__anon45	file:
__align	hello_preproc.cpp	/^  __extension__ long long int __align;$/;"	m	union:__anon45	file:
pthread_cond_t	hello_preproc.cpp	/^} pthread_cond_t;$/;"	t	typeref:union:__anon45	file:
__size	hello_preproc.cpp	/^  char __size[4];$/;"	m	union:__anon47	file:
__align	hello_preproc.cpp	/^  int __align;$/;"	m	union:__anon47	file:
pthread_condattr_t	hello_preproc.cpp	/^} pthread_condattr_t;$/;"	t	typeref:union:__anon47	file:
pthread_key_t	hello_preproc.cpp	/^typedef unsigned int pthread_key_t;$/;"	t	file:
pthread_once_t	hello_preproc.cpp	/^typedef int pthread_once_t;$/;"	t	file:
__lock	hello_preproc.cpp	/^    int __lock;$/;"	m	struct:__anon48::__anon49	file:
__nr_readers	hello_preproc.cpp	/^    unsigned int __nr_readers;$/;"	m	struct:__anon48::__anon49	file:
__readers_wakeup	hello_preproc.cpp	/^    unsigned int __readers_wakeup;$/;"	m	struct:__anon48::__anon49	file:
__writer_wakeup	hello_preproc.cpp	/^    unsigned int __writer_wakeup;$/;"	m	struct:__anon48::__anon49	file:
__nr_readers_queued	hello_preproc.cpp	/^    unsigned int __nr_readers_queued;$/;"	m	struct:__anon48::__anon49	file:
__nr_writers_queued	hello_preproc.cpp	/^    unsigned int __nr_writers_queued;$/;"	m	struct:__anon48::__anon49	file:
__writer	hello_preproc.cpp	/^    int __writer;$/;"	m	struct:__anon48::__anon49	file:
__shared	hello_preproc.cpp	/^    int __shared;$/;"	m	struct:__anon48::__anon49	file:
__rwelision	hello_preproc.cpp	/^    signed char __rwelision;$/;"	m	struct:__anon48::__anon49	file:
__pad1	hello_preproc.cpp	/^    unsigned char __pad1[7];$/;"	m	struct:__anon48::__anon49	file:
__pad2	hello_preproc.cpp	/^    unsigned long int __pad2;$/;"	m	struct:__anon48::__anon49	file:
__flags	hello_preproc.cpp	/^    unsigned int __flags;$/;"	m	struct:__anon48::__anon49	file:
__data	hello_preproc.cpp	/^  } __data;$/;"	m	union:__anon48	typeref:struct:__anon48::__anon49	file:
__size	hello_preproc.cpp	/^  char __size[56];$/;"	m	union:__anon48	file:
__align	hello_preproc.cpp	/^  long int __align;$/;"	m	union:__anon48	file:
pthread_rwlock_t	hello_preproc.cpp	/^} pthread_rwlock_t;$/;"	t	typeref:union:__anon48	file:
__size	hello_preproc.cpp	/^  char __size[8];$/;"	m	union:__anon50	file:
__align	hello_preproc.cpp	/^  long int __align;$/;"	m	union:__anon50	file:
pthread_rwlockattr_t	hello_preproc.cpp	/^} pthread_rwlockattr_t;$/;"	t	typeref:union:__anon50	file:
pthread_spinlock_t	hello_preproc.cpp	/^typedef volatile int pthread_spinlock_t;$/;"	t	file:
__size	hello_preproc.cpp	/^  char __size[32];$/;"	m	union:__anon51	file:
__align	hello_preproc.cpp	/^  long int __align;$/;"	m	union:__anon51	file:
pthread_barrier_t	hello_preproc.cpp	/^} pthread_barrier_t;$/;"	t	typeref:union:__anon51	file:
__size	hello_preproc.cpp	/^  char __size[4];$/;"	m	union:__anon52	file:
__align	hello_preproc.cpp	/^  int __align;$/;"	m	union:__anon52	file:
pthread_barrierattr_t	hello_preproc.cpp	/^} pthread_barrierattr_t;$/;"	t	typeref:union:__anon52	file:
__jmp_buf	hello_preproc.cpp	/^typedef long int __jmp_buf[8];$/;"	t	file:
PTHREAD_CREATE_JOINABLE	hello_preproc.cpp	/^  PTHREAD_CREATE_JOINABLE,$/;"	e	enum:__anon53	file:
PTHREAD_CREATE_DETACHED	hello_preproc.cpp	/^  PTHREAD_CREATE_DETACHED$/;"	e	enum:__anon53	file:
PTHREAD_MUTEX_TIMED_NP	hello_preproc.cpp	/^  PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_RECURSIVE_NP	hello_preproc.cpp	/^  PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_ERRORCHECK_NP	hello_preproc.cpp	/^  PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_ADAPTIVE_NP	hello_preproc.cpp	/^  PTHREAD_MUTEX_ADAPTIVE_NP$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_NORMAL	hello_preproc.cpp	/^  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_RECURSIVE	hello_preproc.cpp	/^  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_ERRORCHECK	hello_preproc.cpp	/^  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_DEFAULT	hello_preproc.cpp	/^  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_FAST_NP	hello_preproc.cpp	/^  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP$/;"	e	enum:__anon54	file:
PTHREAD_MUTEX_STALLED	hello_preproc.cpp	/^  PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anon55	file:
PTHREAD_MUTEX_STALLED_NP	hello_preproc.cpp	/^  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anon55	file:
PTHREAD_MUTEX_ROBUST	hello_preproc.cpp	/^  PTHREAD_MUTEX_ROBUST,$/;"	e	enum:__anon55	file:
PTHREAD_MUTEX_ROBUST_NP	hello_preproc.cpp	/^  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST$/;"	e	enum:__anon55	file:
PTHREAD_PRIO_NONE	hello_preproc.cpp	/^  PTHREAD_PRIO_NONE,$/;"	e	enum:__anon56	file:
PTHREAD_PRIO_INHERIT	hello_preproc.cpp	/^  PTHREAD_PRIO_INHERIT,$/;"	e	enum:__anon56	file:
PTHREAD_PRIO_PROTECT	hello_preproc.cpp	/^  PTHREAD_PRIO_PROTECT$/;"	e	enum:__anon56	file:
PTHREAD_RWLOCK_PREFER_READER_NP	hello_preproc.cpp	/^  PTHREAD_RWLOCK_PREFER_READER_NP,$/;"	e	enum:__anon57	file:
PTHREAD_RWLOCK_PREFER_WRITER_NP	hello_preproc.cpp	/^  PTHREAD_RWLOCK_PREFER_WRITER_NP,$/;"	e	enum:__anon57	file:
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP	hello_preproc.cpp	/^  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,$/;"	e	enum:__anon57	file:
PTHREAD_RWLOCK_DEFAULT_NP	hello_preproc.cpp	/^  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP$/;"	e	enum:__anon57	file:
PTHREAD_INHERIT_SCHED	hello_preproc.cpp	/^  PTHREAD_INHERIT_SCHED,$/;"	e	enum:__anon58	file:
PTHREAD_EXPLICIT_SCHED	hello_preproc.cpp	/^  PTHREAD_EXPLICIT_SCHED$/;"	e	enum:__anon58	file:
PTHREAD_SCOPE_SYSTEM	hello_preproc.cpp	/^  PTHREAD_SCOPE_SYSTEM,$/;"	e	enum:__anon59	file:
PTHREAD_SCOPE_PROCESS	hello_preproc.cpp	/^  PTHREAD_SCOPE_PROCESS$/;"	e	enum:__anon59	file:
PTHREAD_PROCESS_PRIVATE	hello_preproc.cpp	/^  PTHREAD_PROCESS_PRIVATE,$/;"	e	enum:__anon60	file:
PTHREAD_PROCESS_SHARED	hello_preproc.cpp	/^  PTHREAD_PROCESS_SHARED$/;"	e	enum:__anon60	file:
_pthread_cleanup_buffer	hello_preproc.cpp	/^struct _pthread_cleanup_buffer$/;"	s	file:
__routine	hello_preproc.cpp	/^  void (*__routine) (void *);$/;"	m	struct:_pthread_cleanup_buffer	file:
__arg	hello_preproc.cpp	/^  void *__arg;$/;"	m	struct:_pthread_cleanup_buffer	file:
__canceltype	hello_preproc.cpp	/^  int __canceltype;$/;"	m	struct:_pthread_cleanup_buffer	file:
__prev	hello_preproc.cpp	/^  struct _pthread_cleanup_buffer *__prev;$/;"	m	struct:_pthread_cleanup_buffer	typeref:struct:_pthread_cleanup_buffer::_pthread_cleanup_buffer	file:
PTHREAD_CANCEL_ENABLE	hello_preproc.cpp	/^  PTHREAD_CANCEL_ENABLE,$/;"	e	enum:__anon61	file:
PTHREAD_CANCEL_DISABLE	hello_preproc.cpp	/^  PTHREAD_CANCEL_DISABLE$/;"	e	enum:__anon61	file:
PTHREAD_CANCEL_DEFERRED	hello_preproc.cpp	/^  PTHREAD_CANCEL_DEFERRED,$/;"	e	enum:__anon62	file:
PTHREAD_CANCEL_ASYNCHRONOUS	hello_preproc.cpp	/^  PTHREAD_CANCEL_ASYNCHRONOUS$/;"	e	enum:__anon62	file:
pthread_create	hello_preproc.cpp	/^extern int pthread_create (pthread_t *__restrict __newthread,$/;"	p	file:
pthread_exit	hello_preproc.cpp	/^extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));$/;"	p	file:
pthread_join	hello_preproc.cpp	/^extern int pthread_join (pthread_t __th, void **__thread_return);$/;"	p	file:
pthread_tryjoin_np	hello_preproc.cpp	/^extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();$/;"	p	file:
pthread_timedjoin_np	hello_preproc.cpp	/^extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,$/;"	p	file:
pthread_detach	hello_preproc.cpp	/^extern int pthread_detach (pthread_t __th) throw ();$/;"	p	file:
pthread_self	hello_preproc.cpp	/^extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));$/;"	p	file:
pthread_equal	hello_preproc.cpp	/^extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)$/;"	p	file:
pthread_attr_init	hello_preproc.cpp	/^extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));$/;"	p	file:
pthread_attr_destroy	hello_preproc.cpp	/^extern int pthread_attr_destroy (pthread_attr_t *__attr)$/;"	p	file:
pthread_attr_getdetachstate	hello_preproc.cpp	/^extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_setdetachstate	hello_preproc.cpp	/^extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_getguardsize	hello_preproc.cpp	/^extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_setguardsize	hello_preproc.cpp	/^extern int pthread_attr_setguardsize (pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_getschedparam	hello_preproc.cpp	/^extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,$/;"	p	file:
pthread_attr_setschedparam	hello_preproc.cpp	/^extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,$/;"	p	file:
pthread_attr_getschedpolicy	hello_preproc.cpp	/^extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict$/;"	p	file:
pthread_attr_setschedpolicy	hello_preproc.cpp	/^extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)$/;"	p	file:
pthread_attr_getinheritsched	hello_preproc.cpp	/^extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict$/;"	p	file:
pthread_attr_setinheritsched	hello_preproc.cpp	/^extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_getscope	hello_preproc.cpp	/^extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,$/;"	p	file:
pthread_attr_setscope	hello_preproc.cpp	/^extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)$/;"	p	file:
pthread_attr_getstackaddr	hello_preproc.cpp	/^extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict$/;"	p	file:
pthread_attr_setstackaddr	hello_preproc.cpp	/^extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_getstacksize	hello_preproc.cpp	/^extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict$/;"	p	file:
pthread_attr_setstacksize	hello_preproc.cpp	/^extern int pthread_attr_setstacksize (pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_getstack	hello_preproc.cpp	/^extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,$/;"	p	file:
pthread_attr_setstack	hello_preproc.cpp	/^extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,$/;"	p	file:
pthread_attr_setaffinity_np	hello_preproc.cpp	/^extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,$/;"	p	file:
pthread_attr_getaffinity_np	hello_preproc.cpp	/^extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,$/;"	p	file:
pthread_getattr_default_np	hello_preproc.cpp	/^extern int pthread_getattr_default_np (pthread_attr_t *__attr)$/;"	p	file:
pthread_setattr_default_np	hello_preproc.cpp	/^extern int pthread_setattr_default_np (const pthread_attr_t *__attr)$/;"	p	file:
pthread_getattr_np	hello_preproc.cpp	/^extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)$/;"	p	file:
pthread_setschedparam	hello_preproc.cpp	/^extern int pthread_setschedparam (pthread_t __target_thread, int __policy,$/;"	p	file:
pthread_getschedparam	hello_preproc.cpp	/^extern int pthread_getschedparam (pthread_t __target_thread,$/;"	p	file:
pthread_setschedprio	hello_preproc.cpp	/^extern int pthread_setschedprio (pthread_t __target_thread, int __prio)$/;"	p	file:
pthread_getname_np	hello_preproc.cpp	/^extern int pthread_getname_np (pthread_t __target_thread, char *__buf,$/;"	p	file:
pthread_setname_np	hello_preproc.cpp	/^extern int pthread_setname_np (pthread_t __target_thread, const char *__name)$/;"	p	file:
pthread_getconcurrency	hello_preproc.cpp	/^extern int pthread_getconcurrency (void) throw ();$/;"	p	file:
pthread_setconcurrency	hello_preproc.cpp	/^extern int pthread_setconcurrency (int __level) throw ();$/;"	p	file:
pthread_yield	hello_preproc.cpp	/^extern int pthread_yield (void) throw ();$/;"	p	file:
pthread_setaffinity_np	hello_preproc.cpp	/^extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,$/;"	p	file:
pthread_getaffinity_np	hello_preproc.cpp	/^extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,$/;"	p	file:
pthread_once	hello_preproc.cpp	/^extern int pthread_once (pthread_once_t *__once_control,$/;"	p	file:
pthread_setcancelstate	hello_preproc.cpp	/^extern int pthread_setcancelstate (int __state, int *__oldstate);$/;"	p	file:
pthread_setcanceltype	hello_preproc.cpp	/^extern int pthread_setcanceltype (int __type, int *__oldtype);$/;"	p	file:
pthread_cancel	hello_preproc.cpp	/^extern int pthread_cancel (pthread_t __th);$/;"	p	file:
pthread_testcancel	hello_preproc.cpp	/^extern void pthread_testcancel (void);$/;"	p	file:
__cancel_jmp_buf	hello_preproc.cpp	/^    __jmp_buf __cancel_jmp_buf;$/;"	m	struct:__anon63::__anon64	file:
__mask_was_saved	hello_preproc.cpp	/^    int __mask_was_saved;$/;"	m	struct:__anon63::__anon64	file:
__cancel_jmp_buf	hello_preproc.cpp	/^  } __cancel_jmp_buf[1];$/;"	m	struct:__anon63	typeref:struct:__anon63::__anon64	file:
__pad	hello_preproc.cpp	/^  void *__pad[4];$/;"	m	struct:__anon63	file:
__pthread_unwind_buf_t	hello_preproc.cpp	/^} __pthread_unwind_buf_t __attribute__ ((__aligned__));$/;"	t	typeref:struct:__anon63	file:
__pthread_cleanup_frame	hello_preproc.cpp	/^struct __pthread_cleanup_frame$/;"	s	file:
__cancel_routine	hello_preproc.cpp	/^  void (*__cancel_routine) (void *);$/;"	m	struct:__pthread_cleanup_frame	file:
__cancel_arg	hello_preproc.cpp	/^  void *__cancel_arg;$/;"	m	struct:__pthread_cleanup_frame	file:
__do_it	hello_preproc.cpp	/^  int __do_it;$/;"	m	struct:__pthread_cleanup_frame	file:
__cancel_type	hello_preproc.cpp	/^  int __cancel_type;$/;"	m	struct:__pthread_cleanup_frame	file:
__pthread_cleanup_class	hello_preproc.cpp	/^class __pthread_cleanup_class$/;"	c	file:
__cancel_routine	hello_preproc.cpp	/^  void (*__cancel_routine) (void *);$/;"	m	class:__pthread_cleanup_class	file:
__cancel_arg	hello_preproc.cpp	/^  void *__cancel_arg;$/;"	m	class:__pthread_cleanup_class	file:
__do_it	hello_preproc.cpp	/^  int __do_it;$/;"	m	class:__pthread_cleanup_class	file:
__cancel_type	hello_preproc.cpp	/^  int __cancel_type;$/;"	m	class:__pthread_cleanup_class	file:
__pthread_cleanup_class	hello_preproc.cpp	/^  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)$/;"	f	class:__pthread_cleanup_class
~__pthread_cleanup_class	hello_preproc.cpp	/^  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }$/;"	f	class:__pthread_cleanup_class
__setdoit	hello_preproc.cpp	/^  void __setdoit (int __newval) { __do_it = __newval; }$/;"	f	class:__pthread_cleanup_class
__defer	hello_preproc.cpp	/^  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,$/;"	f	class:__pthread_cleanup_class
__restore	hello_preproc.cpp	/^  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }$/;"	f	class:__pthread_cleanup_class
__jmp_buf_tag	hello_preproc.cpp	/^struct __jmp_buf_tag;$/;"	x	file:
__sigsetjmp	hello_preproc.cpp	/^extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();$/;"	p	file:
pthread_mutex_init	hello_preproc.cpp	/^extern int pthread_mutex_init (pthread_mutex_t *__mutex,$/;"	p	file:
pthread_mutex_destroy	hello_preproc.cpp	/^extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)$/;"	p	file:
pthread_mutex_trylock	hello_preproc.cpp	/^extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)$/;"	p	file:
pthread_mutex_lock	hello_preproc.cpp	/^extern int pthread_mutex_lock (pthread_mutex_t *__mutex)$/;"	p	file:
pthread_mutex_timedlock	hello_preproc.cpp	/^extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,$/;"	p	file:
pthread_mutex_unlock	hello_preproc.cpp	/^extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)$/;"	p	file:
pthread_mutex_getprioceiling	hello_preproc.cpp	/^extern int pthread_mutex_getprioceiling (const pthread_mutex_t *$/;"	p	file:
pthread_mutex_setprioceiling	hello_preproc.cpp	/^extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,$/;"	p	file:
pthread_mutex_consistent	hello_preproc.cpp	/^extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)$/;"	p	file:
pthread_mutex_consistent_np	hello_preproc.cpp	/^extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)$/;"	p	file:
pthread_mutexattr_init	hello_preproc.cpp	/^extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)$/;"	p	file:
pthread_mutexattr_destroy	hello_preproc.cpp	/^extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)$/;"	p	file:
pthread_mutexattr_getpshared	hello_preproc.cpp	/^extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *$/;"	p	file:
pthread_mutexattr_setpshared	hello_preproc.cpp	/^extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,$/;"	p	file:
pthread_mutexattr_gettype	hello_preproc.cpp	/^extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict$/;"	p	file:
pthread_mutexattr_settype	hello_preproc.cpp	/^extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)$/;"	p	file:
pthread_mutexattr_getprotocol	hello_preproc.cpp	/^extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *$/;"	p	file:
pthread_mutexattr_setprotocol	hello_preproc.cpp	/^extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,$/;"	p	file:
pthread_mutexattr_getprioceiling	hello_preproc.cpp	/^extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *$/;"	p	file:
pthread_mutexattr_setprioceiling	hello_preproc.cpp	/^extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,$/;"	p	file:
pthread_mutexattr_getrobust	hello_preproc.cpp	/^extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,$/;"	p	file:
pthread_mutexattr_getrobust_np	hello_preproc.cpp	/^extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,$/;"	p	file:
pthread_mutexattr_setrobust	hello_preproc.cpp	/^extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,$/;"	p	file:
pthread_mutexattr_setrobust_np	hello_preproc.cpp	/^extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,$/;"	p	file:
pthread_rwlock_init	hello_preproc.cpp	/^extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,$/;"	p	file:
pthread_rwlock_destroy	hello_preproc.cpp	/^extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)$/;"	p	file:
pthread_rwlock_rdlock	hello_preproc.cpp	/^extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)$/;"	p	file:
pthread_rwlock_tryrdlock	hello_preproc.cpp	/^extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)$/;"	p	file:
pthread_rwlock_timedrdlock	hello_preproc.cpp	/^extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	file:
pthread_rwlock_wrlock	hello_preproc.cpp	/^extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)$/;"	p	file:
pthread_rwlock_trywrlock	hello_preproc.cpp	/^extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)$/;"	p	file:
pthread_rwlock_timedwrlock	hello_preproc.cpp	/^extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	file:
pthread_rwlock_unlock	hello_preproc.cpp	/^extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)$/;"	p	file:
pthread_rwlockattr_init	hello_preproc.cpp	/^extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)$/;"	p	file:
pthread_rwlockattr_destroy	hello_preproc.cpp	/^extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)$/;"	p	file:
pthread_rwlockattr_getpshared	hello_preproc.cpp	/^extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *$/;"	p	file:
pthread_rwlockattr_setpshared	hello_preproc.cpp	/^extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,$/;"	p	file:
pthread_rwlockattr_getkind_np	hello_preproc.cpp	/^extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *$/;"	p	file:
pthread_rwlockattr_setkind_np	hello_preproc.cpp	/^extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,$/;"	p	file:
pthread_cond_init	hello_preproc.cpp	/^extern int pthread_cond_init (pthread_cond_t *__restrict __cond,$/;"	p	file:
pthread_cond_destroy	hello_preproc.cpp	/^extern int pthread_cond_destroy (pthread_cond_t *__cond)$/;"	p	file:
pthread_cond_signal	hello_preproc.cpp	/^extern int pthread_cond_signal (pthread_cond_t *__cond)$/;"	p	file:
pthread_cond_broadcast	hello_preproc.cpp	/^extern int pthread_cond_broadcast (pthread_cond_t *__cond)$/;"	p	file:
pthread_cond_wait	hello_preproc.cpp	/^extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,$/;"	p	file:
pthread_cond_timedwait	hello_preproc.cpp	/^extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,$/;"	p	file:
pthread_condattr_init	hello_preproc.cpp	/^extern int pthread_condattr_init (pthread_condattr_t *__attr)$/;"	p	file:
pthread_condattr_destroy	hello_preproc.cpp	/^extern int pthread_condattr_destroy (pthread_condattr_t *__attr)$/;"	p	file:
pthread_condattr_getpshared	hello_preproc.cpp	/^extern int pthread_condattr_getpshared (const pthread_condattr_t *$/;"	p	file:
pthread_condattr_setpshared	hello_preproc.cpp	/^extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,$/;"	p	file:
pthread_condattr_getclock	hello_preproc.cpp	/^extern int pthread_condattr_getclock (const pthread_condattr_t *$/;"	p	file:
pthread_condattr_setclock	hello_preproc.cpp	/^extern int pthread_condattr_setclock (pthread_condattr_t *__attr,$/;"	p	file:
pthread_spin_init	hello_preproc.cpp	/^extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)$/;"	p	file:
pthread_spin_destroy	hello_preproc.cpp	/^extern int pthread_spin_destroy (pthread_spinlock_t *__lock)$/;"	p	file:
pthread_spin_lock	hello_preproc.cpp	/^extern int pthread_spin_lock (pthread_spinlock_t *__lock)$/;"	p	file:
pthread_spin_trylock	hello_preproc.cpp	/^extern int pthread_spin_trylock (pthread_spinlock_t *__lock)$/;"	p	file:
pthread_spin_unlock	hello_preproc.cpp	/^extern int pthread_spin_unlock (pthread_spinlock_t *__lock)$/;"	p	file:
pthread_barrier_init	hello_preproc.cpp	/^extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,$/;"	p	file:
pthread_barrier_destroy	hello_preproc.cpp	/^extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)$/;"	p	file:
pthread_barrier_wait	hello_preproc.cpp	/^extern int pthread_barrier_wait (pthread_barrier_t *__barrier)$/;"	p	file:
pthread_barrierattr_init	hello_preproc.cpp	/^extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)$/;"	p	file:
pthread_barrierattr_destroy	hello_preproc.cpp	/^extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)$/;"	p	file:
pthread_barrierattr_getpshared	hello_preproc.cpp	/^extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *$/;"	p	file:
pthread_barrierattr_setpshared	hello_preproc.cpp	/^extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,$/;"	p	file:
pthread_key_create	hello_preproc.cpp	/^extern int pthread_key_create (pthread_key_t *__key,$/;"	p	file:
pthread_key_delete	hello_preproc.cpp	/^extern int pthread_key_delete (pthread_key_t __key) throw ();$/;"	p	file:
pthread_getspecific	hello_preproc.cpp	/^extern void *pthread_getspecific (pthread_key_t __key) throw ();$/;"	p	file:
pthread_setspecific	hello_preproc.cpp	/^extern int pthread_setspecific (pthread_key_t __key,$/;"	p	file:
pthread_getcpuclockid	hello_preproc.cpp	/^extern int pthread_getcpuclockid (pthread_t __thread_id,$/;"	p	file:
pthread_atfork	hello_preproc.cpp	/^extern int pthread_atfork (void (*__prepare) (void),$/;"	p	file:
__gthread_t	hello_preproc.cpp	/^typedef pthread_t __gthread_t;$/;"	t	file:
__gthread_key_t	hello_preproc.cpp	/^typedef pthread_key_t __gthread_key_t;$/;"	t	file:
__gthread_once_t	hello_preproc.cpp	/^typedef pthread_once_t __gthread_once_t;$/;"	t	file:
__gthread_mutex_t	hello_preproc.cpp	/^typedef pthread_mutex_t __gthread_mutex_t;$/;"	t	file:
__gthread_recursive_mutex_t	hello_preproc.cpp	/^typedef pthread_mutex_t __gthread_recursive_mutex_t;$/;"	t	file:
__gthread_cond_t	hello_preproc.cpp	/^typedef pthread_cond_t __gthread_cond_t;$/;"	t	file:
__gthread_time_t	hello_preproc.cpp	/^typedef struct timespec __gthread_time_t;$/;"	t	typeref:struct:timespec	file:
__gthread_active_p	hello_preproc.cpp	/^__gthread_active_p (void)$/;"	f	file:
__gthread_create	hello_preproc.cpp	/^__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),$/;"	f	file:
__gthread_join	hello_preproc.cpp	/^__gthread_join (__gthread_t __threadid, void **__value_ptr)$/;"	f	file:
__gthread_detach	hello_preproc.cpp	/^__gthread_detach (__gthread_t __threadid)$/;"	f	file:
__gthread_equal	hello_preproc.cpp	/^__gthread_equal (__gthread_t __t1, __gthread_t __t2)$/;"	f	file:
__gthread_self	hello_preproc.cpp	/^__gthread_self (void)$/;"	f	file:
__gthread_yield	hello_preproc.cpp	/^__gthread_yield (void)$/;"	f	file:
__gthread_once	hello_preproc.cpp	/^__gthread_once (__gthread_once_t *__once, void (*__func) (void))$/;"	f	file:
__gthread_key_create	hello_preproc.cpp	/^__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))$/;"	f	file:
__gthread_key_delete	hello_preproc.cpp	/^__gthread_key_delete (__gthread_key_t __key)$/;"	f	file:
__gthread_getspecific	hello_preproc.cpp	/^__gthread_getspecific (__gthread_key_t __key)$/;"	f	file:
__gthread_setspecific	hello_preproc.cpp	/^__gthread_setspecific (__gthread_key_t __key, const void *__ptr)$/;"	f	file:
__gthread_mutex_init_function	hello_preproc.cpp	/^__gthread_mutex_init_function (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_mutex_destroy	hello_preproc.cpp	/^__gthread_mutex_destroy (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_mutex_lock	hello_preproc.cpp	/^__gthread_mutex_lock (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_mutex_trylock	hello_preproc.cpp	/^__gthread_mutex_trylock (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_mutex_timedlock	hello_preproc.cpp	/^__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,$/;"	f	file:
__gthread_mutex_unlock	hello_preproc.cpp	/^__gthread_mutex_unlock (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_recursive_mutex_lock	hello_preproc.cpp	/^__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)$/;"	f	file:
__gthread_recursive_mutex_trylock	hello_preproc.cpp	/^__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)$/;"	f	file:
__gthread_recursive_mutex_timedlock	hello_preproc.cpp	/^__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,$/;"	f	file:
__gthread_recursive_mutex_unlock	hello_preproc.cpp	/^__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)$/;"	f	file:
__gthread_recursive_mutex_destroy	hello_preproc.cpp	/^__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)$/;"	f	file:
__gthread_cond_broadcast	hello_preproc.cpp	/^__gthread_cond_broadcast (__gthread_cond_t *__cond)$/;"	f	file:
__gthread_cond_signal	hello_preproc.cpp	/^__gthread_cond_signal (__gthread_cond_t *__cond)$/;"	f	file:
__gthread_cond_wait	hello_preproc.cpp	/^__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_cond_timedwait	hello_preproc.cpp	/^__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,$/;"	f	file:
__gthread_cond_wait_recursive	hello_preproc.cpp	/^__gthread_cond_wait_recursive (__gthread_cond_t *__cond,$/;"	f	file:
__gthread_cond_destroy	hello_preproc.cpp	/^__gthread_cond_destroy (__gthread_cond_t* __cond)$/;"	f	file:
_Atomic_word	hello_preproc.cpp	/^typedef int _Atomic_word;$/;"	t	file:
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__exchange_and_add	hello_preproc.cpp	/^  __exchange_and_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__atomic_add	hello_preproc.cpp	/^  __atomic_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__exchange_and_add_single	hello_preproc.cpp	/^  __exchange_and_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__atomic_add_single	hello_preproc.cpp	/^  __atomic_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__exchange_and_add_dispatch	hello_preproc.cpp	/^  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__atomic_add_dispatch	hello_preproc.cpp	/^  __atomic_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
bad_alloc	hello_preproc.cpp	/^  class bad_alloc : public exception$/;"	c	namespace:std	file:
bad_alloc	hello_preproc.cpp	/^    bad_alloc() throw() { }$/;"	f	class:std::bad_alloc
~bad_alloc	hello_preproc.cpp	/^    virtual ~bad_alloc() throw();$/;"	p	class:std::bad_alloc	file:
what	hello_preproc.cpp	/^    virtual const char* what() const throw();$/;"	p	class:std::bad_alloc	file:
nothrow_t	hello_preproc.cpp	/^  struct nothrow_t { };$/;"	s	namespace:std	file:
new_handler	hello_preproc.cpp	/^  typedef void (*new_handler)();$/;"	t	namespace:std	file:
set_new_handler	hello_preproc.cpp	/^  new_handler set_new_handler(new_handler) throw();$/;"	p	namespace:std	file:
operator new	hello_preproc.cpp	/^void* operator new(std::size_t) throw(std::bad_alloc)$/;"	p	file:
operator new[]	hello_preproc.cpp	/^void* operator new[](std::size_t) throw(std::bad_alloc)$/;"	p	file:
operator delete	hello_preproc.cpp	/^void operator delete(void*) throw()$/;"	p	file:
operator delete[]	hello_preproc.cpp	/^void operator delete[](void*) throw()$/;"	p	file:
operator new	hello_preproc.cpp	/^void* operator new(std::size_t, const std::nothrow_t&) throw()$/;"	p	file:
operator new[]	hello_preproc.cpp	/^void* operator new[](std::size_t, const std::nothrow_t&) throw()$/;"	p	file:
operator delete	hello_preproc.cpp	/^void operator delete(void*, const std::nothrow_t&) throw()$/;"	p	file:
operator delete[]	hello_preproc.cpp	/^void operator delete[](void*, const std::nothrow_t&) throw()$/;"	p	file:
operator new	hello_preproc.cpp	/^inline void* operator new(std::size_t, void* __p) throw()$/;"	f
operator new[]	hello_preproc.cpp	/^inline void* operator new[](std::size_t, void* __p) throw()$/;"	f
operator delete	hello_preproc.cpp	/^inline void operator delete (void*, void*) throw() { }$/;"	f
operator delete[]	hello_preproc.cpp	/^inline void operator delete[](void*, void*) throw() { }$/;"	f
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
new_allocator	hello_preproc.cpp	/^    class new_allocator$/;"	c	namespace:__gnu_cxx	file:
size_type	hello_preproc.cpp	/^      typedef size_t size_type;$/;"	t	class:__gnu_cxx::new_allocator	file:
difference_type	hello_preproc.cpp	/^      typedef ptrdiff_t difference_type;$/;"	t	class:__gnu_cxx::new_allocator	file:
pointer	hello_preproc.cpp	/^      typedef _Tp* pointer;$/;"	t	class:__gnu_cxx::new_allocator	file:
const_pointer	hello_preproc.cpp	/^      typedef const _Tp* const_pointer;$/;"	t	class:__gnu_cxx::new_allocator	file:
reference	hello_preproc.cpp	/^      typedef _Tp& reference;$/;"	t	class:__gnu_cxx::new_allocator	file:
const_reference	hello_preproc.cpp	/^      typedef const _Tp& const_reference;$/;"	t	class:__gnu_cxx::new_allocator	file:
value_type	hello_preproc.cpp	/^      typedef _Tp value_type;$/;"	t	class:__gnu_cxx::new_allocator	file:
rebind	hello_preproc.cpp	/^        struct rebind$/;"	s	class:__gnu_cxx::new_allocator	file:
other	hello_preproc.cpp	/^        { typedef new_allocator<_Tp1> other; };$/;"	t	struct:__gnu_cxx::new_allocator::rebind	file:
new_allocator	hello_preproc.cpp	/^      new_allocator() throw() { }$/;"	f	class:__gnu_cxx::new_allocator
new_allocator	hello_preproc.cpp	/^      new_allocator(const new_allocator&) throw() { }$/;"	f	class:__gnu_cxx::new_allocator
new_allocator	hello_preproc.cpp	/^        new_allocator(const new_allocator<_Tp1>&) throw() { }$/;"	f	class:__gnu_cxx::new_allocator
~new_allocator	hello_preproc.cpp	/^      ~new_allocator() throw() { }$/;"	f	class:__gnu_cxx::new_allocator
address	hello_preproc.cpp	/^      address(reference __x) const$/;"	f	class:__gnu_cxx::new_allocator
address	hello_preproc.cpp	/^      address(const_reference __x) const$/;"	f	class:__gnu_cxx::new_allocator
allocate	hello_preproc.cpp	/^      allocate(size_type __n, const void* = 0)$/;"	f	class:__gnu_cxx::new_allocator
deallocate	hello_preproc.cpp	/^      deallocate(pointer __p, size_type)$/;"	f	class:__gnu_cxx::new_allocator
max_size	hello_preproc.cpp	/^      max_size() const throw()$/;"	f	class:__gnu_cxx::new_allocator
construct	hello_preproc.cpp	/^      construct(pointer __p, const _Tp& __val)$/;"	f	class:__gnu_cxx::new_allocator
destroy	hello_preproc.cpp	/^      destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:__gnu_cxx::new_allocator
operator ==	hello_preproc.cpp	/^    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)$/;"	f	namespace:__gnu_cxx
operator !=	hello_preproc.cpp	/^    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)$/;"	f	namespace:__gnu_cxx
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
allocator	hello_preproc.cpp	/^    class allocator<void>$/;"	c	namespace:std	file:
size_type	hello_preproc.cpp	/^      typedef size_t size_type;$/;"	t	class:std::allocator	file:
difference_type	hello_preproc.cpp	/^      typedef ptrdiff_t difference_type;$/;"	t	class:std::allocator	file:
pointer	hello_preproc.cpp	/^      typedef void* pointer;$/;"	t	class:std::allocator	file:
const_pointer	hello_preproc.cpp	/^      typedef const void* const_pointer;$/;"	t	class:std::allocator	file:
value_type	hello_preproc.cpp	/^      typedef void value_type;$/;"	t	class:std::allocator	file:
rebind	hello_preproc.cpp	/^        struct rebind$/;"	s	class:std::allocator	file:
other	hello_preproc.cpp	/^        { typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	file:
allocator	hello_preproc.cpp	/^    class allocator: public __gnu_cxx::new_allocator<_Tp>$/;"	c	namespace:std	file:
size_type	hello_preproc.cpp	/^      typedef size_t size_type;$/;"	t	class:std::allocator	file:
difference_type	hello_preproc.cpp	/^      typedef ptrdiff_t difference_type;$/;"	t	class:std::allocator	file:
pointer	hello_preproc.cpp	/^      typedef _Tp* pointer;$/;"	t	class:std::allocator	file:
const_pointer	hello_preproc.cpp	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	file:
reference	hello_preproc.cpp	/^      typedef _Tp& reference;$/;"	t	class:std::allocator	file:
const_reference	hello_preproc.cpp	/^      typedef const _Tp& const_reference;$/;"	t	class:std::allocator	file:
value_type	hello_preproc.cpp	/^      typedef _Tp value_type;$/;"	t	class:std::allocator	file:
rebind	hello_preproc.cpp	/^        struct rebind$/;"	s	class:std::allocator	file:
other	hello_preproc.cpp	/^        { typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	file:
allocator	hello_preproc.cpp	/^      allocator() throw() { }$/;"	f	class:std::allocator
allocator	hello_preproc.cpp	/^      allocator(const allocator& __a) throw()$/;"	f	class:std::allocator
allocator	hello_preproc.cpp	/^        allocator(const allocator<_Tp1>&) throw() { }$/;"	f	class:std::allocator
~allocator	hello_preproc.cpp	/^      ~allocator() throw() { }$/;"	f	class:std::allocator
operator ==	hello_preproc.cpp	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std
operator ==	hello_preproc.cpp	/^    operator==(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	f	namespace:std
allocator	hello_preproc.cpp	/^  extern template class allocator<char>;$/;"	x	file:
allocator	hello_preproc.cpp	/^  extern template class allocator<wchar_t>;$/;"	x	file:
__alloc_swap	hello_preproc.cpp	/^    struct __alloc_swap$/;"	s	namespace:std	file:
_S_do_it	hello_preproc.cpp	/^    { static void _S_do_it(_Alloc&, _Alloc&) { } };$/;"	f	struct:std::__alloc_swap
__alloc_swap	hello_preproc.cpp	/^    struct __alloc_swap<_Alloc, false>$/;"	s	namespace:std	file:
_S_do_it	hello_preproc.cpp	/^      _S_do_it(_Alloc& __one, _Alloc& __two)$/;"	f	struct:std::__alloc_swap
__alloc_neq	hello_preproc.cpp	/^    struct __alloc_neq$/;"	s	namespace:std	file:
_S_do_it	hello_preproc.cpp	/^      _S_do_it(const _Alloc&, const _Alloc&)$/;"	f	struct:std::__alloc_neq
__alloc_neq	hello_preproc.cpp	/^    struct __alloc_neq<_Alloc, false>$/;"	s	namespace:std	file:
_S_do_it	hello_preproc.cpp	/^      _S_do_it(const _Alloc& __one, const _Alloc& __two)$/;"	f	struct:std::__alloc_neq
__cxxabiv1	hello_preproc.cpp	/^namespace __cxxabiv1$/;"	n	file:
__forced_unwind	hello_preproc.cpp	/^  class __forced_unwind$/;"	c	namespace:__cxxabiv1	file:
~__forced_unwind	hello_preproc.cpp	/^    virtual ~__forced_unwind() throw();$/;"	p	class:__cxxabiv1::__forced_unwind	file:
__pure_dummy	hello_preproc.cpp	/^    virtual void __pure_dummy() = 0;$/;"	p	class:__cxxabiv1::__forced_unwind	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__ostream_write	hello_preproc.cpp	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std
__ostream_fill	hello_preproc.cpp	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	f	namespace:std
__ostream_insert	hello_preproc.cpp	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std
__ostream_insert	hello_preproc.cpp	/^  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);$/;"	p	namespace:std	file:
__ostream_insert	hello_preproc.cpp	/^  extern template wostream& __ostream_insert(wostream&, const wchar_t*,$/;"	p	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
unary_function	hello_preproc.cpp	/^    struct unary_function$/;"	s	namespace:std	file:
argument_type	hello_preproc.cpp	/^      typedef _Arg argument_type;$/;"	t	struct:std::unary_function	file:
result_type	hello_preproc.cpp	/^      typedef _Result result_type;$/;"	t	struct:std::unary_function	file:
binary_function	hello_preproc.cpp	/^    struct binary_function$/;"	s	namespace:std	file:
first_argument_type	hello_preproc.cpp	/^      typedef _Arg1 first_argument_type;$/;"	t	struct:std::binary_function	file:
second_argument_type	hello_preproc.cpp	/^      typedef _Arg2 second_argument_type;$/;"	t	struct:std::binary_function	file:
result_type	hello_preproc.cpp	/^      typedef _Result result_type;$/;"	t	struct:std::binary_function	file:
plus	hello_preproc.cpp	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus
minus	hello_preproc.cpp	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus
multiplies	hello_preproc.cpp	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies
divides	hello_preproc.cpp	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides
modulus	hello_preproc.cpp	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus
negate	hello_preproc.cpp	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate
equal_to	hello_preproc.cpp	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to
not_equal_to	hello_preproc.cpp	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to
greater	hello_preproc.cpp	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater
less	hello_preproc.cpp	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less
greater_equal	hello_preproc.cpp	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal
less_equal	hello_preproc.cpp	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal
logical_and	hello_preproc.cpp	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and
logical_or	hello_preproc.cpp	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or
logical_not	hello_preproc.cpp	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not
bit_and	hello_preproc.cpp	/^    struct bit_and : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_and
bit_or	hello_preproc.cpp	/^    struct bit_or : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_or
bit_xor	hello_preproc.cpp	/^    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_xor
bit_not	hello_preproc.cpp	/^    struct bit_not : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::bit_not
unary_negate	hello_preproc.cpp	/^    class unary_negate$/;"	c	namespace:std	file:
_M_pred	hello_preproc.cpp	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	file:
unary_negate	hello_preproc.cpp	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::unary_negate
operator ()	hello_preproc.cpp	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate
not1	hello_preproc.cpp	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std
binary_negate	hello_preproc.cpp	/^    class binary_negate$/;"	c	namespace:std	file:
_M_pred	hello_preproc.cpp	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	file:
binary_negate	hello_preproc.cpp	/^      binary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::binary_negate
operator ()	hello_preproc.cpp	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate
not2	hello_preproc.cpp	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std
pointer_to_unary_function	hello_preproc.cpp	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	file:
_M_ptr	hello_preproc.cpp	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	file:
pointer_to_unary_function	hello_preproc.cpp	/^      pointer_to_unary_function() { }$/;"	f	class:std::pointer_to_unary_function
pointer_to_unary_function	hello_preproc.cpp	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function
operator ()	hello_preproc.cpp	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function
ptr_fun	hello_preproc.cpp	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std
pointer_to_binary_function	hello_preproc.cpp	/^    class pointer_to_binary_function$/;"	c	namespace:std	file:
_M_ptr	hello_preproc.cpp	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	file:
pointer_to_binary_function	hello_preproc.cpp	/^      pointer_to_binary_function() { }$/;"	f	class:std::pointer_to_binary_function
pointer_to_binary_function	hello_preproc.cpp	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function
operator ()	hello_preproc.cpp	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function
ptr_fun	hello_preproc.cpp	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std
_Identity	hello_preproc.cpp	/^    struct _Identity$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity
_Select1st	hello_preproc.cpp	/^    struct _Select1st$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st
operator ()	hello_preproc.cpp	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st
_Select2nd	hello_preproc.cpp	/^    struct _Select2nd$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd
operator ()	hello_preproc.cpp	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd
mem_fun_t	hello_preproc.cpp	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t
operator ()	hello_preproc.cpp	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	file:
const_mem_fun_t	hello_preproc.cpp	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t
operator ()	hello_preproc.cpp	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	file:
mem_fun_ref_t	hello_preproc.cpp	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t
operator ()	hello_preproc.cpp	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	file:
const_mem_fun_ref_t	hello_preproc.cpp	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	file:
mem_fun1_t	hello_preproc.cpp	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t
operator ()	hello_preproc.cpp	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	file:
const_mem_fun1_t	hello_preproc.cpp	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t
operator ()	hello_preproc.cpp	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	file:
mem_fun1_ref_t	hello_preproc.cpp	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t
operator ()	hello_preproc.cpp	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	file:
const_mem_fun1_ref_t	hello_preproc.cpp	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	file:
_Ret	hello_preproc.cpp	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t
operator ()	hello_preproc.cpp	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t
_M_f	hello_preproc.cpp	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	file:
_Ret	hello_preproc.cpp	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std
_Ret	hello_preproc.cpp	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std
_Ret	hello_preproc.cpp	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std
_Ret	hello_preproc.cpp	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std
_Ret	hello_preproc.cpp	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std
_Ret	hello_preproc.cpp	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std
_Ret	hello_preproc.cpp	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std
_Ret	hello_preproc.cpp	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
binder1st	hello_preproc.cpp	/^    class binder1st$/;"	c	namespace:std	file:
op	hello_preproc.cpp	/^      _Operation op;$/;"	m	class:std::binder1st	file:
value	hello_preproc.cpp	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	file:
binder1st	hello_preproc.cpp	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st
operator ()	hello_preproc.cpp	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st
operator ()	hello_preproc.cpp	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st
bind1st	hello_preproc.cpp	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std
binder2nd	hello_preproc.cpp	/^    class binder2nd$/;"	c	namespace:std	file:
op	hello_preproc.cpp	/^      _Operation op;$/;"	m	class:std::binder2nd	file:
value	hello_preproc.cpp	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	file:
binder2nd	hello_preproc.cpp	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd
operator ()	hello_preproc.cpp	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd
operator ()	hello_preproc.cpp	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd
bind2nd	hello_preproc.cpp	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std
__gnu_cxx	hello_preproc.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__alloc_traits	hello_preproc.cpp	/^  struct __alloc_traits$/;"	s	namespace:__gnu_cxx	file:
allocator_type	hello_preproc.cpp	/^    typedef _Alloc allocator_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
pointer	hello_preproc.cpp	/^    typedef typename _Alloc::pointer pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
const_pointer	hello_preproc.cpp	/^    typedef typename _Alloc::const_pointer const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
value_type	hello_preproc.cpp	/^    typedef typename _Alloc::value_type value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
reference	hello_preproc.cpp	/^    typedef typename _Alloc::reference reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
const_reference	hello_preproc.cpp	/^    typedef typename _Alloc::const_reference const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
size_type	hello_preproc.cpp	/^    typedef typename _Alloc::size_type size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
difference_type	hello_preproc.cpp	/^    typedef typename _Alloc::difference_type difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	file:
allocate	hello_preproc.cpp	/^    allocate(_Alloc& __a, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits
deallocate	hello_preproc.cpp	/^    static void deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits
construct	hello_preproc.cpp	/^      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)$/;"	f	struct:__gnu_cxx::__alloc_traits
destroy	hello_preproc.cpp	/^    static void destroy(_Alloc& __a, pointer __p)$/;"	f	struct:__gnu_cxx::__alloc_traits
max_size	hello_preproc.cpp	/^    static size_type max_size(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits
_S_select_on_copy	hello_preproc.cpp	/^    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }$/;"	f	struct:__gnu_cxx::__alloc_traits
_S_on_swap	hello_preproc.cpp	/^    static void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits
rebind	hello_preproc.cpp	/^      struct rebind$/;"	s	struct:__gnu_cxx::__alloc_traits	file:
other	hello_preproc.cpp	/^      { typedef typename _Alloc::template rebind<_Tp>::other other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
basic_string	hello_preproc.cpp	/^    class basic_string$/;"	c	namespace:std	file:
_CharT_alloc_type	hello_preproc.cpp	/^      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;$/;"	t	class:std::basic_string	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::basic_string	file:
value_type	hello_preproc.cpp	/^      typedef typename _Traits::char_type value_type;$/;"	t	class:std::basic_string	file:
allocator_type	hello_preproc.cpp	/^      typedef _Alloc allocator_type;$/;"	t	class:std::basic_string	file:
size_type	hello_preproc.cpp	/^      typedef typename _CharT_alloc_type::size_type size_type;$/;"	t	class:std::basic_string	file:
difference_type	hello_preproc.cpp	/^      typedef typename _CharT_alloc_type::difference_type difference_type;$/;"	t	class:std::basic_string	file:
reference	hello_preproc.cpp	/^      typedef typename _CharT_alloc_type::reference reference;$/;"	t	class:std::basic_string	file:
const_reference	hello_preproc.cpp	/^      typedef typename _CharT_alloc_type::const_reference const_reference;$/;"	t	class:std::basic_string	file:
pointer	hello_preproc.cpp	/^      typedef typename _CharT_alloc_type::pointer pointer;$/;"	t	class:std::basic_string	file:
const_pointer	hello_preproc.cpp	/^      typedef typename _CharT_alloc_type::const_pointer const_pointer;$/;"	t	class:std::basic_string	file:
iterator	hello_preproc.cpp	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;$/;"	t	class:std::basic_string	file:
const_iterator	hello_preproc.cpp	/^                                                            const_iterator;$/;"	t	class:std::basic_string	file:
const_reverse_iterator	hello_preproc.cpp	/^      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::basic_string	file:
reverse_iterator	hello_preproc.cpp	/^      typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::basic_string	file:
_Rep_base	hello_preproc.cpp	/^      struct _Rep_base$/;"	s	class:std::basic_string	file:
_M_length	hello_preproc.cpp	/^ size_type _M_length;$/;"	m	struct:std::basic_string::_Rep_base	file:
_M_capacity	hello_preproc.cpp	/^ size_type _M_capacity;$/;"	m	struct:std::basic_string::_Rep_base	file:
_M_refcount	hello_preproc.cpp	/^ _Atomic_word _M_refcount;$/;"	m	struct:std::basic_string::_Rep_base	file:
_Rep	hello_preproc.cpp	/^      struct _Rep : _Rep_base$/;"	s	class:std::basic_string	file:
_Raw_bytes_alloc	hello_preproc.cpp	/^ typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;$/;"	t	struct:std::basic_string::_Rep	file:
_S_max_size	hello_preproc.cpp	/^ static const size_type _S_max_size;$/;"	m	struct:std::basic_string::_Rep	file:
_S_terminal	hello_preproc.cpp	/^ static const _CharT _S_terminal;$/;"	m	struct:std::basic_string::_Rep	file:
_S_empty_rep_storage	hello_preproc.cpp	/^        static size_type _S_empty_rep_storage[];$/;"	m	struct:std::basic_string::_Rep	file:
_S_empty_rep	hello_preproc.cpp	/^        _S_empty_rep()$/;"	f	struct:std::basic_string::_Rep
_M_is_leaked	hello_preproc.cpp	/^ _M_is_leaked() const$/;"	f	struct:std::basic_string::_Rep
_M_is_shared	hello_preproc.cpp	/^ _M_is_shared() const$/;"	f	struct:std::basic_string::_Rep
_M_set_leaked	hello_preproc.cpp	/^ _M_set_leaked()$/;"	f	struct:std::basic_string::_Rep
_M_set_sharable	hello_preproc.cpp	/^ _M_set_sharable()$/;"	f	struct:std::basic_string::_Rep
_M_set_length_and_sharable	hello_preproc.cpp	/^ _M_set_length_and_sharable(size_type __n)$/;"	f	struct:std::basic_string::_Rep
_M_refdata	hello_preproc.cpp	/^ _M_refdata() throw()$/;"	f	struct:std::basic_string::_Rep
_M_grab	hello_preproc.cpp	/^ _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)$/;"	f	struct:std::basic_string::_Rep
_S_create	hello_preproc.cpp	/^ _S_create(size_type, size_type, const _Alloc&);$/;"	p	struct:std::basic_string::_Rep	file:
_M_dispose	hello_preproc.cpp	/^ _M_dispose(const _Alloc& __a)$/;"	f	struct:std::basic_string::_Rep
_M_destroy	hello_preproc.cpp	/^ _M_destroy(const _Alloc&) throw();$/;"	p	struct:std::basic_string::_Rep	file:
_M_refcopy	hello_preproc.cpp	/^ _M_refcopy() throw()$/;"	f	struct:std::basic_string::_Rep
_M_clone	hello_preproc.cpp	/^ _M_clone(const _Alloc&, size_type __res = 0);$/;"	p	struct:std::basic_string::_Rep	file:
_Alloc_hider	hello_preproc.cpp	/^      struct _Alloc_hider : _Alloc$/;"	s	class:std::basic_string	file:
_Alloc_hider	hello_preproc.cpp	/^ _Alloc_hider(_CharT* __dat, const _Alloc& __a)$/;"	f	struct:std::basic_string::_Alloc_hider
_M_p	hello_preproc.cpp	/^ _CharT* _M_p;$/;"	m	struct:std::basic_string::_Alloc_hider	file:
npos	hello_preproc.cpp	/^      static const size_type npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	file:
_M_dataplus	hello_preproc.cpp	/^      mutable _Alloc_hider _M_dataplus;$/;"	m	class:std::basic_string	file:
_M_data	hello_preproc.cpp	/^      _M_data() const$/;"	f	class:std::basic_string	file:
_M_data	hello_preproc.cpp	/^      _M_data(_CharT* __p)$/;"	f	class:std::basic_string	file:
_M_rep	hello_preproc.cpp	/^      _M_rep() const$/;"	f	class:std::basic_string	file:
_M_ibegin	hello_preproc.cpp	/^      _M_ibegin() const$/;"	f	class:std::basic_string	file:
_M_iend	hello_preproc.cpp	/^      _M_iend() const$/;"	f	class:std::basic_string	file:
_M_leak	hello_preproc.cpp	/^      _M_leak()$/;"	f	class:std::basic_string	file:
_M_check	hello_preproc.cpp	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	file:
_M_check_length	hello_preproc.cpp	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	file:
_M_limit	hello_preproc.cpp	/^      _M_limit(size_type __pos, size_type __off) const$/;"	f	class:std::basic_string	file:
_M_disjunct	hello_preproc.cpp	/^      _M_disjunct(const _CharT* __s) const$/;"	f	class:std::basic_string	file:
_M_copy	hello_preproc.cpp	/^      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	file:
_M_move	hello_preproc.cpp	/^      _M_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	file:
_M_assign	hello_preproc.cpp	/^      _M_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	file:
_S_copy_chars	hello_preproc.cpp	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	hello_preproc.cpp	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	hello_preproc.cpp	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	hello_preproc.cpp	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	hello_preproc.cpp	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	file:
_S_compare	hello_preproc.cpp	/^      _S_compare(size_type __n1, size_type __n2)$/;"	f	class:std::basic_string	file:
_M_mutate	hello_preproc.cpp	/^      _M_mutate(size_type __pos, size_type __len1, size_type __len2);$/;"	p	class:std::basic_string	file:
_M_leak_hard	hello_preproc.cpp	/^      _M_leak_hard();$/;"	p	class:std::basic_string	file:
_S_empty_rep	hello_preproc.cpp	/^      _S_empty_rep()$/;"	f	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^      basic_string()$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^      basic_string(const _Alloc& __a);$/;"	p	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^      basic_string(const basic_string& __str);$/;"	p	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^      basic_string(const _CharT* __s, size_type __n,$/;"	p	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());$/;"	p	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());$/;"	p	class:std::basic_string	file:
basic_string	hello_preproc.cpp	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	p	class:std::basic_string	file:
~basic_string	hello_preproc.cpp	/^      ~basic_string()$/;"	f	class:std::basic_string
operator =	hello_preproc.cpp	/^      operator=(const basic_string& __str)$/;"	f	class:std::basic_string
operator =	hello_preproc.cpp	/^      operator=(const _CharT* __s)$/;"	f	class:std::basic_string
operator =	hello_preproc.cpp	/^      operator=(_CharT __c)$/;"	f	class:std::basic_string
begin	hello_preproc.cpp	/^      begin()$/;"	f	class:std::basic_string
begin	hello_preproc.cpp	/^      begin() const$/;"	f	class:std::basic_string
end	hello_preproc.cpp	/^      end()$/;"	f	class:std::basic_string
end	hello_preproc.cpp	/^      end() const$/;"	f	class:std::basic_string
rbegin	hello_preproc.cpp	/^      rbegin()$/;"	f	class:std::basic_string
rbegin	hello_preproc.cpp	/^      rbegin() const$/;"	f	class:std::basic_string
rend	hello_preproc.cpp	/^      rend()$/;"	f	class:std::basic_string
rend	hello_preproc.cpp	/^      rend() const$/;"	f	class:std::basic_string
size	hello_preproc.cpp	/^      size() const$/;"	f	class:std::basic_string
length	hello_preproc.cpp	/^      length() const$/;"	f	class:std::basic_string
max_size	hello_preproc.cpp	/^      max_size() const$/;"	f	class:std::basic_string
resize	hello_preproc.cpp	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	file:
resize	hello_preproc.cpp	/^      resize(size_type __n)$/;"	f	class:std::basic_string
capacity	hello_preproc.cpp	/^      capacity() const$/;"	f	class:std::basic_string
reserve	hello_preproc.cpp	/^      reserve(size_type __res_arg = 0);$/;"	p	class:std::basic_string	file:
clear	hello_preproc.cpp	/^      clear()$/;"	f	class:std::basic_string
empty	hello_preproc.cpp	/^      empty() const$/;"	f	class:std::basic_string
operator []	hello_preproc.cpp	/^      operator[] (size_type __pos) const$/;"	f	class:std::basic_string
operator []	hello_preproc.cpp	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string
at	hello_preproc.cpp	/^      at(size_type __n) const$/;"	f	class:std::basic_string
at	hello_preproc.cpp	/^      at(size_type __n)$/;"	f	class:std::basic_string
operator +=	hello_preproc.cpp	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string
operator +=	hello_preproc.cpp	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string
operator +=	hello_preproc.cpp	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string
append	hello_preproc.cpp	/^      append(const basic_string& __str);$/;"	p	class:std::basic_string	file:
append	hello_preproc.cpp	/^      append(const basic_string& __str, size_type __pos, size_type __n);$/;"	p	class:std::basic_string	file:
append	hello_preproc.cpp	/^      append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	file:
append	hello_preproc.cpp	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string
append	hello_preproc.cpp	/^      append(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	file:
append	hello_preproc.cpp	/^        append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string
push_back	hello_preproc.cpp	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string
assign	hello_preproc.cpp	/^      assign(const basic_string& __str);$/;"	p	class:std::basic_string	file:
assign	hello_preproc.cpp	/^      assign(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string
assign	hello_preproc.cpp	/^      assign(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	file:
assign	hello_preproc.cpp	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string
assign	hello_preproc.cpp	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string
assign	hello_preproc.cpp	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^      insert(size_type __pos, const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	file:
insert	hello_preproc.cpp	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^      insert(iterator __p, _CharT __c)$/;"	f	class:std::basic_string
erase	hello_preproc.cpp	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string
erase	hello_preproc.cpp	/^      erase(iterator __position)$/;"	f	class:std::basic_string
erase	hello_preproc.cpp	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::basic_string	file:
replace	hello_preproc.cpp	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	file:
replace	hello_preproc.cpp	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2, const basic_string& __str)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^        replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string
_M_replace_dispatch	hello_preproc.cpp	/^ _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,$/;"	f	class:std::basic_string	file:
_M_replace_dispatch	hello_preproc.cpp	/^ _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	p	class:std::basic_string	file:
_M_replace_aux	hello_preproc.cpp	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	file:
_M_replace_safe	hello_preproc.cpp	/^      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	file:
_S_construct_aux	hello_preproc.cpp	/^        _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	file:
_S_construct_aux	hello_preproc.cpp	/^        _S_construct_aux(_Integer __beg, _Integer __end,$/;"	f	class:std::basic_string	file:
_S_construct_aux_2	hello_preproc.cpp	/^      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string	file:
_S_construct	hello_preproc.cpp	/^        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)$/;"	f	class:std::basic_string	file:
_S_construct	hello_preproc.cpp	/^         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	file:
_S_construct	hello_preproc.cpp	/^        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	file:
_S_construct	hello_preproc.cpp	/^      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);$/;"	p	class:std::basic_string	file:
copy	hello_preproc.cpp	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	file:
swap	hello_preproc.cpp	/^      swap(basic_string& __s);$/;"	p	class:std::basic_string	file:
c_str	hello_preproc.cpp	/^      c_str() const$/;"	f	class:std::basic_string
data	hello_preproc.cpp	/^      data() const$/;"	f	class:std::basic_string
get_allocator	hello_preproc.cpp	/^      get_allocator() const$/;"	f	class:std::basic_string
find	hello_preproc.cpp	/^      find(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	file:
find	hello_preproc.cpp	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string
find	hello_preproc.cpp	/^      find(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string
find	hello_preproc.cpp	/^      find(_CharT __c, size_type __pos = 0) const ;$/;"	p	class:std::basic_string	file:
rfind	hello_preproc.cpp	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string
rfind	hello_preproc.cpp	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	file:
rfind	hello_preproc.cpp	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string
rfind	hello_preproc.cpp	/^      rfind(_CharT __c, size_type __pos = npos) const ;$/;"	p	class:std::basic_string	file:
find_first_of	hello_preproc.cpp	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_of	hello_preproc.cpp	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	file:
find_first_of	hello_preproc.cpp	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_of	hello_preproc.cpp	/^      find_first_of(_CharT __c, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_last_of	hello_preproc.cpp	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_of	hello_preproc.cpp	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	file:
find_last_of	hello_preproc.cpp	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_of	hello_preproc.cpp	/^      find_last_of(_CharT __c, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_first_not_of	hello_preproc.cpp	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_not_of	hello_preproc.cpp	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	file:
find_first_not_of	hello_preproc.cpp	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_not_of	hello_preproc.cpp	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const$/;"	p	class:std::basic_string	file:
find_last_not_of	hello_preproc.cpp	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_not_of	hello_preproc.cpp	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	file:
find_last_not_of	hello_preproc.cpp	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_not_of	hello_preproc.cpp	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const$/;"	p	class:std::basic_string	file:
substr	hello_preproc.cpp	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string
compare	hello_preproc.cpp	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string
compare	hello_preproc.cpp	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const;$/;"	p	class:std::basic_string	file:
compare	hello_preproc.cpp	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	p	class:std::basic_string	file:
compare	hello_preproc.cpp	/^      compare(const _CharT* __s) const;$/;"	p	class:std::basic_string	file:
compare	hello_preproc.cpp	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const;$/;"	p	class:std::basic_string	file:
compare	hello_preproc.cpp	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	file:
operator +	hello_preproc.cpp	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator +	hello_preproc.cpp	/^    operator+(const _CharT* __lhs,$/;"	p	namespace:std	file:
operator +	hello_preproc.cpp	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);$/;"	p	namespace:std	file:
operator +	hello_preproc.cpp	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator +	hello_preproc.cpp	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	f	namespace:std
operator ==	hello_preproc.cpp	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator ==	hello_preproc.cpp	/^    operator==(const basic_string<_CharT>& __lhs,$/;"	f	namespace:std
operator ==	hello_preproc.cpp	/^    operator==(const _CharT* __lhs,$/;"	f	namespace:std
operator ==	hello_preproc.cpp	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const _CharT* __lhs,$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator <	hello_preproc.cpp	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator <	hello_preproc.cpp	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator <	hello_preproc.cpp	/^    operator<(const _CharT* __lhs,$/;"	f	namespace:std
operator >	hello_preproc.cpp	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator >	hello_preproc.cpp	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator >	hello_preproc.cpp	/^    operator>(const _CharT* __lhs,$/;"	f	namespace:std
operator <=	hello_preproc.cpp	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator <=	hello_preproc.cpp	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator <=	hello_preproc.cpp	/^    operator<=(const _CharT* __lhs,$/;"	f	namespace:std
operator >=	hello_preproc.cpp	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator >=	hello_preproc.cpp	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator >=	hello_preproc.cpp	/^    operator>=(const _CharT* __lhs,$/;"	f	namespace:std
swap	hello_preproc.cpp	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std
getline	hello_preproc.cpp	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	file:
getline	hello_preproc.cpp	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	namespace:std
getline	hello_preproc.cpp	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	p	namespace:std	file:
getline	hello_preproc.cpp	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	p	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
_S_max_size	hello_preproc.cpp	/^    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))\/sizeof(_CharT)) - 1) \/ 4;$/;"	m	class:std::basic_string::_Rep	file:
_S_terminal	hello_preproc.cpp	/^    _Rep::_S_terminal = _CharT();$/;"	m	class:std::basic_string::_Rep	file:
npos	hello_preproc.cpp	/^    basic_string<_CharT, _Traits, _Alloc>::npos;$/;"	m	class:std::basic_string	file:
_S_empty_rep_storage	hello_preproc.cpp	/^    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[$/;"	m	class:std::basic_string::_Rep	file:
_S_construct	hello_preproc.cpp	/^      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	f	class:std::basic_string
_S_construct	hello_preproc.cpp	/^      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	f	class:std::basic_string
_S_construct	hello_preproc.cpp	/^    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(const basic_string& __str)$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(const _CharT* __s, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(size_type __n, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	hello_preproc.cpp	/^    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)$/;"	f	class:std::basic_string
assign	hello_preproc.cpp	/^    assign(const basic_string& __str)$/;"	f	class:std::basic_string
assign	hello_preproc.cpp	/^    assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
append	hello_preproc.cpp	/^    append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string
append	hello_preproc.cpp	/^    append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
append	hello_preproc.cpp	/^    append(const basic_string& __str)$/;"	f	class:std::basic_string
append	hello_preproc.cpp	/^    append(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string
insert	hello_preproc.cpp	/^     insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
erase	hello_preproc.cpp	/^     erase(iterator __first, iterator __last)$/;"	f	class:std::basic_string
replace	hello_preproc.cpp	/^     replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string
_M_destroy	hello_preproc.cpp	/^    _M_destroy(const _Alloc& __a) throw ()$/;"	f	class:std::basic_string::_Rep
_M_leak_hard	hello_preproc.cpp	/^    _M_leak_hard()$/;"	f	class:std::basic_string
_M_mutate	hello_preproc.cpp	/^    _M_mutate(size_type __pos, size_type __len1, size_type __len2)$/;"	f	class:std::basic_string
reserve	hello_preproc.cpp	/^    reserve(size_type __res)$/;"	f	class:std::basic_string
swap	hello_preproc.cpp	/^    swap(basic_string& __s)$/;"	f	class:std::basic_string
_S_create	hello_preproc.cpp	/^    _S_create(size_type __capacity, size_type __old_capacity,$/;"	f	class:std::basic_string::_Rep
_M_clone	hello_preproc.cpp	/^    _M_clone(const _Alloc& __alloc, size_type __res)$/;"	f	class:std::basic_string::_Rep
resize	hello_preproc.cpp	/^    resize(size_type __n, _CharT __c)$/;"	f	class:std::basic_string
_M_replace_dispatch	hello_preproc.cpp	/^      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	f	class:std::basic_string
_M_replace_aux	hello_preproc.cpp	/^    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	f	class:std::basic_string
_M_replace_safe	hello_preproc.cpp	/^    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string
copy	hello_preproc.cpp	/^    copy(_CharT* __s, size_type __n, size_type __pos) const$/;"	f	class:std::basic_string
operator +	hello_preproc.cpp	/^    operator+(const _CharT* __lhs,$/;"	f	namespace:std
operator +	hello_preproc.cpp	/^    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)$/;"	f	namespace:std
find	hello_preproc.cpp	/^    find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find	hello_preproc.cpp	/^    find(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
rfind	hello_preproc.cpp	/^    rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
rfind	hello_preproc.cpp	/^    rfind(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
find_first_of	hello_preproc.cpp	/^    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find_last_of	hello_preproc.cpp	/^    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find_first_not_of	hello_preproc.cpp	/^    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find_first_not_of	hello_preproc.cpp	/^    find_first_not_of(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
find_last_not_of	hello_preproc.cpp	/^    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find_last_not_of	hello_preproc.cpp	/^    find_last_not_of(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
compare	hello_preproc.cpp	/^    compare(size_type __pos, size_type __n, const basic_string& __str) const$/;"	f	class:std::basic_string
compare	hello_preproc.cpp	/^    compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string
compare	hello_preproc.cpp	/^    compare(const _CharT* __s) const$/;"	f	class:std::basic_string
compare	hello_preproc.cpp	/^    compare(size_type __pos, size_type __n1, const _CharT* __s) const$/;"	f	class:std::basic_string
compare	hello_preproc.cpp	/^    compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<_CharT, _Traits>& __in,$/;"	f	namespace:std
getline	hello_preproc.cpp	/^    getline(basic_istream<_CharT, _Traits>& __in,$/;"	f	namespace:std
basic_string	hello_preproc.cpp	/^  extern template class basic_string<char>;$/;"	x	file:
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<char>&, string&);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<char>&, const string&);$/;"	p	namespace:std	file:
getline	hello_preproc.cpp	/^    getline(basic_istream<char>&, string&, char);$/;"	p	namespace:std	file:
getline	hello_preproc.cpp	/^    getline(basic_istream<char>&, string&);$/;"	p	namespace:std	file:
basic_string	hello_preproc.cpp	/^  extern template class basic_string<wchar_t>;$/;"	x	file:
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<wchar_t>&, wstring&);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<wchar_t>&, const wstring&);$/;"	p	namespace:std	file:
getline	hello_preproc.cpp	/^    getline(basic_istream<wchar_t>&, wstring&, wchar_t);$/;"	p	namespace:std	file:
getline	hello_preproc.cpp	/^    getline(basic_istream<wchar_t>&, wstring&);$/;"	p	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
locale	hello_preproc.cpp	/^  class locale$/;"	c	namespace:std	file:
category	hello_preproc.cpp	/^    typedef int category;$/;"	t	class:std::locale	file:
facet	hello_preproc.cpp	/^    class facet;$/;"	x	file:
id	hello_preproc.cpp	/^    class id;$/;"	x	file:
_Impl	hello_preproc.cpp	/^    class _Impl;$/;"	x	file:
facet	hello_preproc.cpp	/^    friend class facet;$/;"	x	file:
_Impl	hello_preproc.cpp	/^    friend class _Impl;$/;"	x	file:
has_facet	hello_preproc.cpp	/^      has_facet(const locale&) throw();$/;"	p	class:std::locale	file:
use_facet	hello_preproc.cpp	/^      use_facet(const locale&);$/;"	p	class:std::locale	file:
__use_cache	hello_preproc.cpp	/^      friend struct __use_cache;$/;"	x	file:
none	hello_preproc.cpp	/^    static const category none = 0;$/;"	m	class:std::locale	file:
ctype	hello_preproc.cpp	/^    static const category ctype = 1L << 0;$/;"	m	class:std::locale	file:
numeric	hello_preproc.cpp	/^    static const category numeric = 1L << 1;$/;"	m	class:std::locale	file:
collate	hello_preproc.cpp	/^    static const category collate = 1L << 2;$/;"	m	class:std::locale	file:
time	hello_preproc.cpp	/^    static const category time = 1L << 3;$/;"	m	class:std::locale	file:
monetary	hello_preproc.cpp	/^    static const category monetary = 1L << 4;$/;"	m	class:std::locale	file:
messages	hello_preproc.cpp	/^    static const category messages = 1L << 5;$/;"	m	class:std::locale	file:
all	hello_preproc.cpp	/^    static const category all = (ctype | numeric | collate |$/;"	m	class:std::locale	file:
locale	hello_preproc.cpp	/^    locale() throw();$/;"	p	class:std::locale	file:
locale	hello_preproc.cpp	/^    locale(const locale& __other) throw();$/;"	p	class:std::locale	file:
locale	hello_preproc.cpp	/^    locale(const char* __s);$/;"	p	class:std::locale	file:
locale	hello_preproc.cpp	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	p	class:std::locale	file:
locale	hello_preproc.cpp	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	file:
locale	hello_preproc.cpp	/^      locale(const locale& __other, _Facet* __f);$/;"	p	class:std::locale	file:
~locale	hello_preproc.cpp	/^    ~locale() throw();$/;"	p	class:std::locale	file:
operator =	hello_preproc.cpp	/^    operator=(const locale& __other) throw();$/;"	p	class:std::locale	file:
combine	hello_preproc.cpp	/^      combine(const locale& __other) const;$/;"	p	class:std::locale	file:
name	hello_preproc.cpp	/^    name() const;$/;"	p	class:std::locale	file:
operator ==	hello_preproc.cpp	/^    operator==(const locale& __other) const throw();$/;"	p	class:std::locale	file:
operator !=	hello_preproc.cpp	/^    operator!=(const locale& __other) const throw()$/;"	f	class:std::locale
operator ()	hello_preproc.cpp	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	p	class:std::locale	file:
global	hello_preproc.cpp	/^    global(const locale& __loc);$/;"	p	class:std::locale	file:
classic	hello_preproc.cpp	/^    classic();$/;"	p	class:std::locale	file:
_M_impl	hello_preproc.cpp	/^    _Impl* _M_impl;$/;"	m	class:std::locale	file:
_S_classic	hello_preproc.cpp	/^    static _Impl* _S_classic;$/;"	m	class:std::locale	file:
_S_global	hello_preproc.cpp	/^    static _Impl* _S_global;$/;"	m	class:std::locale	file:
_S_categories	hello_preproc.cpp	/^    static const char* const* const _S_categories;$/;"	m	class:std::locale	file:
_S_categories_size	hello_preproc.cpp	/^    enum { _S_categories_size = 6 + 6 };$/;"	e	enum:std::locale::__anon65	file:
_S_once	hello_preproc.cpp	/^    static __gthread_once_t _S_once;$/;"	m	class:std::locale	file:
locale	hello_preproc.cpp	/^    locale(_Impl*) throw();$/;"	p	class:std::locale	file:
_S_initialize	hello_preproc.cpp	/^    _S_initialize();$/;"	p	class:std::locale	file:
_S_initialize_once	hello_preproc.cpp	/^    _S_initialize_once() throw();$/;"	p	class:std::locale	file:
_S_normalize_category	hello_preproc.cpp	/^    _S_normalize_category(category);$/;"	p	class:std::locale	file:
_M_coalesce	hello_preproc.cpp	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	file:
facet	hello_preproc.cpp	/^  class locale::facet$/;"	c	class:std::locale	file:
locale	hello_preproc.cpp	/^    friend class locale;$/;"	x	file:
_M_refcount	hello_preproc.cpp	/^    mutable _Atomic_word _M_refcount;$/;"	m	class:std::locale::facet	file:
_S_c_locale	hello_preproc.cpp	/^    static __c_locale _S_c_locale;$/;"	m	class:std::locale::facet	file:
_S_c_name	hello_preproc.cpp	/^    static const char _S_c_name[2];$/;"	m	class:std::locale::facet	file:
_S_once	hello_preproc.cpp	/^    static __gthread_once_t _S_once;$/;"	m	class:std::locale::facet	file:
_S_initialize_once	hello_preproc.cpp	/^    _S_initialize_once();$/;"	p	class:std::locale::facet	file:
facet	hello_preproc.cpp	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	f	class:std::locale::facet
~facet	hello_preproc.cpp	/^    ~facet();$/;"	p	class:std::locale::facet	file:
_S_create_c_locale	hello_preproc.cpp	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	p	class:std::locale::facet	file:
_S_clone_c_locale	hello_preproc.cpp	/^    _S_clone_c_locale(__c_locale& __cloc) throw();$/;"	p	class:std::locale::facet	file:
_S_destroy_c_locale	hello_preproc.cpp	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	p	class:std::locale::facet	file:
_S_lc_ctype_c_locale	hello_preproc.cpp	/^    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);$/;"	p	class:std::locale::facet	file:
_S_get_c_locale	hello_preproc.cpp	/^    _S_get_c_locale();$/;"	p	class:std::locale::facet	file:
_S_get_c_name	hello_preproc.cpp	/^    _S_get_c_name() throw();$/;"	p	class:std::locale::facet	file:
_M_add_reference	hello_preproc.cpp	/^    _M_add_reference() const throw()$/;"	f	class:std::locale::facet	file:
_M_remove_reference	hello_preproc.cpp	/^    _M_remove_reference() const throw()$/;"	f	class:std::locale::facet	file:
facet	hello_preproc.cpp	/^    facet(const facet&);$/;"	p	class:std::locale::facet	file:
operator =	hello_preproc.cpp	/^    operator=(const facet&);$/;"	p	class:std::locale::facet	file:
__shim	hello_preproc.cpp	/^    class __shim;$/;"	x	file:
_M_sso_shim	hello_preproc.cpp	/^    const facet* _M_sso_shim(const id*) const;$/;"	p	class:std::locale::facet	file:
_M_cow_shim	hello_preproc.cpp	/^    const facet* _M_cow_shim(const id*) const;$/;"	p	class:std::locale::facet	file:
id	hello_preproc.cpp	/^  class locale::id$/;"	c	class:std::locale	file:
locale	hello_preproc.cpp	/^    friend class locale;$/;"	x	file:
use_facet	hello_preproc.cpp	/^      use_facet(const locale&);$/;"	p	class:std::locale::id	file:
has_facet	hello_preproc.cpp	/^      has_facet(const locale&) throw();$/;"	p	class:std::locale::id	file:
_M_index	hello_preproc.cpp	/^    mutable size_t _M_index;$/;"	m	class:std::locale::id	file:
_S_refcount	hello_preproc.cpp	/^    static _Atomic_word _S_refcount;$/;"	m	class:std::locale::id	file:
operator =	hello_preproc.cpp	/^    operator=(const id&);$/;"	p	class:std::locale::id	file:
id	hello_preproc.cpp	/^    id(const id&);$/;"	p	class:std::locale::id	file:
id	hello_preproc.cpp	/^    id() { }$/;"	f	class:std::locale::id
_M_id	hello_preproc.cpp	/^    _M_id() const throw();$/;"	p	class:std::locale::id	file:
_Impl	hello_preproc.cpp	/^  class locale::_Impl$/;"	c	class:std::locale	file:
locale	hello_preproc.cpp	/^    friend class locale;$/;"	x	file:
has_facet	hello_preproc.cpp	/^      has_facet(const locale&) throw();$/;"	p	class:std::locale::_Impl	file:
use_facet	hello_preproc.cpp	/^      use_facet(const locale&);$/;"	p	class:std::locale::_Impl	file:
__use_cache	hello_preproc.cpp	/^      friend struct __use_cache;$/;"	x	file:
_M_refcount	hello_preproc.cpp	/^    _Atomic_word _M_refcount;$/;"	m	class:std::locale::_Impl	file:
_M_facets	hello_preproc.cpp	/^    const facet** _M_facets;$/;"	m	class:std::locale::_Impl	file:
_M_facets_size	hello_preproc.cpp	/^    size_t _M_facets_size;$/;"	m	class:std::locale::_Impl	file:
_M_caches	hello_preproc.cpp	/^    const facet** _M_caches;$/;"	m	class:std::locale::_Impl	file:
_M_names	hello_preproc.cpp	/^    char** _M_names;$/;"	m	class:std::locale::_Impl	file:
_S_id_ctype	hello_preproc.cpp	/^    static const locale::id* const _S_id_ctype[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_numeric	hello_preproc.cpp	/^    static const locale::id* const _S_id_numeric[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_collate	hello_preproc.cpp	/^    static const locale::id* const _S_id_collate[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_time	hello_preproc.cpp	/^    static const locale::id* const _S_id_time[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_monetary	hello_preproc.cpp	/^    static const locale::id* const _S_id_monetary[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_messages	hello_preproc.cpp	/^    static const locale::id* const _S_id_messages[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_facet_categories	hello_preproc.cpp	/^    static const locale::id* const* const _S_facet_categories[];$/;"	m	class:std::locale::_Impl::locale	file:
_M_add_reference	hello_preproc.cpp	/^    _M_add_reference() throw()$/;"	f	class:std::locale::_Impl	file:
_M_remove_reference	hello_preproc.cpp	/^    _M_remove_reference() throw()$/;"	f	class:std::locale::_Impl	file:
_Impl	hello_preproc.cpp	/^    _Impl(const _Impl&, size_t);$/;"	p	class:std::locale::_Impl	file:
_Impl	hello_preproc.cpp	/^    _Impl(const char*, size_t);$/;"	p	class:std::locale::_Impl	file:
_Impl	hello_preproc.cpp	/^    _Impl(size_t) throw();$/;"	p	class:std::locale::_Impl	file:
~_Impl	hello_preproc.cpp	/^   ~_Impl() throw();$/;"	p	class:std::locale::_Impl	file:
_Impl	hello_preproc.cpp	/^    _Impl(const _Impl&);$/;"	p	class:std::locale::_Impl	file:
operator =	hello_preproc.cpp	/^    operator=(const _Impl&);$/;"	p	class:std::locale::_Impl	file:
_M_check_same_name	hello_preproc.cpp	/^    _M_check_same_name()$/;"	f	class:std::locale::_Impl	file:
_M_replace_categories	hello_preproc.cpp	/^    _M_replace_categories(const _Impl*, category);$/;"	p	class:std::locale::_Impl	file:
_M_replace_category	hello_preproc.cpp	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	p	class:std::locale::_Impl	file:
_M_replace_facet	hello_preproc.cpp	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	p	class:std::locale::_Impl	file:
_M_install_facet	hello_preproc.cpp	/^    _M_install_facet(const locale::id*, const facet*);$/;"	p	class:std::locale::_Impl	file:
_M_init_facet	hello_preproc.cpp	/^      _M_init_facet(_Facet* __facet)$/;"	f	class:std::locale::_Impl	file:
_M_init_facet_unchecked	hello_preproc.cpp	/^      _M_init_facet_unchecked(_Facet* __facet)$/;"	f	class:std::locale::_Impl	file:
_M_install_cache	hello_preproc.cpp	/^    _M_install_cache(const facet*, size_t);$/;"	p	class:std::locale::_Impl	file:
_M_init_extra	hello_preproc.cpp	/^    void _M_init_extra(facet**);$/;"	p	class:std::locale::_Impl	file:
_M_init_extra	hello_preproc.cpp	/^    void _M_init_extra(void*, void*, const char*, const char*);$/;"	p	class:std::locale::_Impl	file:
collate	hello_preproc.cpp	/^    class collate : public locale::facet$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::collate	file:
string_type	hello_preproc.cpp	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate	file:
_M_c_locale_collate	hello_preproc.cpp	/^      __c_locale _M_c_locale_collate;$/;"	m	class:std::collate	file:
id	hello_preproc.cpp	/^      static locale::id id;$/;"	m	class:std::collate	file:
collate	hello_preproc.cpp	/^      collate(size_t __refs = 0)$/;"	f	class:std::collate
collate	hello_preproc.cpp	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::collate
compare	hello_preproc.cpp	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate
transform	hello_preproc.cpp	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
hash	hello_preproc.cpp	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
_M_compare	hello_preproc.cpp	/^      _M_compare(const _CharT*, const _CharT*) const throw();$/;"	p	class:std::collate	file:
_M_transform	hello_preproc.cpp	/^      _M_transform(_CharT*, const _CharT*, size_t) const throw();$/;"	p	class:std::collate	file:
~collate	hello_preproc.cpp	/^      ~collate()$/;"	f	class:std::collate
do_compare	hello_preproc.cpp	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	p	class:std::collate	file:
do_transform	hello_preproc.cpp	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	file:
do_hash	hello_preproc.cpp	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	file:
id	hello_preproc.cpp	/^    locale::id collate<_CharT>::id;$/;"	m	class:std::collate	file:
_M_compare	hello_preproc.cpp	/^    collate<char>::_M_compare(const char*, const char*) const throw();$/;"	p	class:std::collate	file:
_M_transform	hello_preproc.cpp	/^    collate<char>::_M_transform(char*, const char*, size_t) const throw();$/;"	p	class:std::collate	file:
_M_compare	hello_preproc.cpp	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();$/;"	p	class:std::collate	file:
_M_transform	hello_preproc.cpp	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();$/;"	p	class:std::collate	file:
collate_byname	hello_preproc.cpp	/^    class collate_byname : public collate<_CharT>$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::collate_byname	file:
string_type	hello_preproc.cpp	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate_byname	file:
collate_byname	hello_preproc.cpp	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::collate_byname
~collate_byname	hello_preproc.cpp	/^      ~collate_byname() { }$/;"	f	class:std::collate_byname
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
locale	hello_preproc.cpp	/^    locale(const locale& __other, _Facet* __f)$/;"	f	class:std::locale
combine	hello_preproc.cpp	/^    combine(const locale& __other) const$/;"	f	class:std::locale
operator ()	hello_preproc.cpp	/^    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,$/;"	f	class:std::locale
has_facet	hello_preproc.cpp	/^    has_facet(const locale& __loc) throw()$/;"	f	namespace:std
use_facet	hello_preproc.cpp	/^    use_facet(const locale& __loc)$/;"	f	namespace:std
_M_compare	hello_preproc.cpp	/^    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()$/;"	f	class:std::collate
_M_transform	hello_preproc.cpp	/^    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()$/;"	f	class:std::collate
do_compare	hello_preproc.cpp	/^    do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate
do_transform	hello_preproc.cpp	/^    do_transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
do_hash	hello_preproc.cpp	/^    do_hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
collate	hello_preproc.cpp	/^  extern template class collate<char>;$/;"	x	file:
collate_byname	hello_preproc.cpp	/^  extern template class collate_byname<char>;$/;"	x	file:
use_facet	hello_preproc.cpp	/^    use_facet<collate<char> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<collate<char> >(const locale&);$/;"	p	namespace:std	file:
collate	hello_preproc.cpp	/^  extern template class collate<wchar_t>;$/;"	x	file:
collate_byname	hello_preproc.cpp	/^  extern template class collate_byname<wchar_t>;$/;"	x	file:
use_facet	hello_preproc.cpp	/^    use_facet<collate<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<collate<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__cow_string	hello_preproc.cpp	/^  typedef basic_string<char> __cow_string;$/;"	t	namespace:std	file:
__sso_string	hello_preproc.cpp	/^  struct __sso_string$/;"	s	namespace:std	file:
__str	hello_preproc.cpp	/^    struct __str$/;"	s	struct:std::__sso_string	file:
_M_p	hello_preproc.cpp	/^      const char* _M_p;$/;"	m	struct:std::__sso_string::__str	file:
_M_string_length	hello_preproc.cpp	/^      size_t _M_string_length;$/;"	m	struct:std::__sso_string::__str	file:
_M_local_buf	hello_preproc.cpp	/^      char _M_local_buf[16];$/;"	m	struct:std::__sso_string::__str	file:
_M_s	hello_preproc.cpp	/^      __str _M_s;$/;"	m	union:std::__sso_string::__anon66	file:
_M_bytes	hello_preproc.cpp	/^      char _M_bytes[sizeof(__str)];$/;"	m	union:std::__sso_string::__anon66	file:
__sso_string	hello_preproc.cpp	/^    __sso_string() throw();$/;"	p	struct:std::__sso_string	file:
__sso_string	hello_preproc.cpp	/^    __sso_string(const std::string&);$/;"	p	struct:std::__sso_string	file:
__sso_string	hello_preproc.cpp	/^    __sso_string(const char*, size_t);$/;"	p	struct:std::__sso_string	file:
__sso_string	hello_preproc.cpp	/^    __sso_string(const __sso_string&);$/;"	p	struct:std::__sso_string	file:
operator =	hello_preproc.cpp	/^    __sso_string& operator=(const __sso_string&);$/;"	p	struct:std::__sso_string	file:
~__sso_string	hello_preproc.cpp	/^    ~__sso_string();$/;"	p	struct:std::__sso_string	file:
logic_error	hello_preproc.cpp	/^  class logic_error : public exception$/;"	c	namespace:std	file:
_M_msg	hello_preproc.cpp	/^    __cow_string _M_msg;$/;"	m	class:std::logic_error	file:
logic_error	hello_preproc.cpp	/^    logic_error(const string& __arg);$/;"	p	class:std::logic_error	file:
~logic_error	hello_preproc.cpp	/^    virtual ~logic_error() throw();$/;"	p	class:std::logic_error	file:
what	hello_preproc.cpp	/^    what() const throw();$/;"	p	class:std::logic_error	file:
domain_error	hello_preproc.cpp	/^  class domain_error : public logic_error$/;"	c	namespace:std	file:
domain_error	hello_preproc.cpp	/^    explicit domain_error(const string& __arg);$/;"	p	class:std::domain_error	file:
~domain_error	hello_preproc.cpp	/^    virtual ~domain_error() throw();$/;"	p	class:std::domain_error	file:
invalid_argument	hello_preproc.cpp	/^  class invalid_argument : public logic_error$/;"	c	namespace:std	file:
invalid_argument	hello_preproc.cpp	/^    explicit invalid_argument(const string& __arg);$/;"	p	class:std::invalid_argument	file:
~invalid_argument	hello_preproc.cpp	/^    virtual ~invalid_argument() throw();$/;"	p	class:std::invalid_argument	file:
length_error	hello_preproc.cpp	/^  class length_error : public logic_error$/;"	c	namespace:std	file:
length_error	hello_preproc.cpp	/^    explicit length_error(const string& __arg);$/;"	p	class:std::length_error	file:
~length_error	hello_preproc.cpp	/^    virtual ~length_error() throw();$/;"	p	class:std::length_error	file:
out_of_range	hello_preproc.cpp	/^  class out_of_range : public logic_error$/;"	c	namespace:std	file:
out_of_range	hello_preproc.cpp	/^    explicit out_of_range(const string& __arg);$/;"	p	class:std::out_of_range	file:
~out_of_range	hello_preproc.cpp	/^    virtual ~out_of_range() throw();$/;"	p	class:std::out_of_range	file:
runtime_error	hello_preproc.cpp	/^  class runtime_error : public exception$/;"	c	namespace:std	file:
_M_msg	hello_preproc.cpp	/^    __cow_string _M_msg;$/;"	m	class:std::runtime_error	file:
runtime_error	hello_preproc.cpp	/^    runtime_error(const string& __arg);$/;"	p	class:std::runtime_error	file:
~runtime_error	hello_preproc.cpp	/^    virtual ~runtime_error() throw();$/;"	p	class:std::runtime_error	file:
what	hello_preproc.cpp	/^    what() const throw();$/;"	p	class:std::runtime_error	file:
range_error	hello_preproc.cpp	/^  class range_error : public runtime_error$/;"	c	namespace:std	file:
range_error	hello_preproc.cpp	/^    explicit range_error(const string& __arg);$/;"	p	class:std::range_error	file:
~range_error	hello_preproc.cpp	/^    virtual ~range_error() throw();$/;"	p	class:std::range_error	file:
overflow_error	hello_preproc.cpp	/^  class overflow_error : public runtime_error$/;"	c	namespace:std	file:
overflow_error	hello_preproc.cpp	/^    explicit overflow_error(const string& __arg);$/;"	p	class:std::overflow_error	file:
~overflow_error	hello_preproc.cpp	/^    virtual ~overflow_error() throw();$/;"	p	class:std::overflow_error	file:
underflow_error	hello_preproc.cpp	/^  class underflow_error : public runtime_error$/;"	c	namespace:std	file:
underflow_error	hello_preproc.cpp	/^    explicit underflow_error(const string& __arg);$/;"	p	class:std::underflow_error	file:
~underflow_error	hello_preproc.cpp	/^    virtual ~underflow_error() throw();$/;"	p	class:std::underflow_error	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
_Ios_Fmtflags	hello_preproc.cpp	/^  enum _Ios_Fmtflags$/;"	g	namespace:std	file:
_S_boolalpha	hello_preproc.cpp	/^      _S_boolalpha = 1L << 0,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_dec	hello_preproc.cpp	/^      _S_dec = 1L << 1,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_fixed	hello_preproc.cpp	/^      _S_fixed = 1L << 2,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_hex	hello_preproc.cpp	/^      _S_hex = 1L << 3,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_internal	hello_preproc.cpp	/^      _S_internal = 1L << 4,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_left	hello_preproc.cpp	/^      _S_left = 1L << 5,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_oct	hello_preproc.cpp	/^      _S_oct = 1L << 6,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_right	hello_preproc.cpp	/^      _S_right = 1L << 7,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_scientific	hello_preproc.cpp	/^      _S_scientific = 1L << 8,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_showbase	hello_preproc.cpp	/^      _S_showbase = 1L << 9,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_showpoint	hello_preproc.cpp	/^      _S_showpoint = 1L << 10,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_showpos	hello_preproc.cpp	/^      _S_showpos = 1L << 11,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_skipws	hello_preproc.cpp	/^      _S_skipws = 1L << 12,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_unitbuf	hello_preproc.cpp	/^      _S_unitbuf = 1L << 13,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_uppercase	hello_preproc.cpp	/^      _S_uppercase = 1L << 14,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_adjustfield	hello_preproc.cpp	/^      _S_adjustfield = _S_left | _S_right | _S_internal,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_basefield	hello_preproc.cpp	/^      _S_basefield = _S_dec | _S_oct | _S_hex,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_floatfield	hello_preproc.cpp	/^      _S_floatfield = _S_scientific | _S_fixed,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_ios_fmtflags_end	hello_preproc.cpp	/^      _S_ios_fmtflags_end = 1L << 16$/;"	e	enum:std::_Ios_Fmtflags	file:
operator &	hello_preproc.cpp	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator |	hello_preproc.cpp	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator ^	hello_preproc.cpp	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator ~	hello_preproc.cpp	/^  operator~(_Ios_Fmtflags __a)$/;"	f	namespace:std
operator |=	hello_preproc.cpp	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator &=	hello_preproc.cpp	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator ^=	hello_preproc.cpp	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
_Ios_Openmode	hello_preproc.cpp	/^  enum _Ios_Openmode$/;"	g	namespace:std	file:
_S_app	hello_preproc.cpp	/^      _S_app = 1L << 0,$/;"	e	enum:std::_Ios_Openmode	file:
_S_ate	hello_preproc.cpp	/^      _S_ate = 1L << 1,$/;"	e	enum:std::_Ios_Openmode	file:
_S_bin	hello_preproc.cpp	/^      _S_bin = 1L << 2,$/;"	e	enum:std::_Ios_Openmode	file:
_S_in	hello_preproc.cpp	/^      _S_in = 1L << 3,$/;"	e	enum:std::_Ios_Openmode	file:
_S_out	hello_preproc.cpp	/^      _S_out = 1L << 4,$/;"	e	enum:std::_Ios_Openmode	file:
_S_trunc	hello_preproc.cpp	/^      _S_trunc = 1L << 5,$/;"	e	enum:std::_Ios_Openmode	file:
_S_ios_openmode_end	hello_preproc.cpp	/^      _S_ios_openmode_end = 1L << 16$/;"	e	enum:std::_Ios_Openmode	file:
operator &	hello_preproc.cpp	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator |	hello_preproc.cpp	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator ^	hello_preproc.cpp	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator ~	hello_preproc.cpp	/^  operator~(_Ios_Openmode __a)$/;"	f	namespace:std
operator |=	hello_preproc.cpp	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator &=	hello_preproc.cpp	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator ^=	hello_preproc.cpp	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std
_Ios_Iostate	hello_preproc.cpp	/^  enum _Ios_Iostate$/;"	g	namespace:std	file:
_S_goodbit	hello_preproc.cpp	/^      _S_goodbit = 0,$/;"	e	enum:std::_Ios_Iostate	file:
_S_badbit	hello_preproc.cpp	/^      _S_badbit = 1L << 0,$/;"	e	enum:std::_Ios_Iostate	file:
_S_eofbit	hello_preproc.cpp	/^      _S_eofbit = 1L << 1,$/;"	e	enum:std::_Ios_Iostate	file:
_S_failbit	hello_preproc.cpp	/^      _S_failbit = 1L << 2,$/;"	e	enum:std::_Ios_Iostate	file:
_S_ios_iostate_end	hello_preproc.cpp	/^      _S_ios_iostate_end = 1L << 16$/;"	e	enum:std::_Ios_Iostate	file:
operator &	hello_preproc.cpp	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator |	hello_preproc.cpp	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator ^	hello_preproc.cpp	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator ~	hello_preproc.cpp	/^  operator~(_Ios_Iostate __a)$/;"	f	namespace:std
operator |=	hello_preproc.cpp	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator &=	hello_preproc.cpp	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator ^=	hello_preproc.cpp	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std
_Ios_Seekdir	hello_preproc.cpp	/^  enum _Ios_Seekdir$/;"	g	namespace:std	file:
_S_beg	hello_preproc.cpp	/^      _S_beg = 0,$/;"	e	enum:std::_Ios_Seekdir	file:
_S_cur	hello_preproc.cpp	/^      _S_cur = 1,$/;"	e	enum:std::_Ios_Seekdir	file:
_S_end	hello_preproc.cpp	/^      _S_end = 2,$/;"	e	enum:std::_Ios_Seekdir	file:
_S_ios_seekdir_end	hello_preproc.cpp	/^      _S_ios_seekdir_end = 1L << 16$/;"	e	enum:std::_Ios_Seekdir	file:
ios_base	hello_preproc.cpp	/^  class ios_base$/;"	c	namespace:std	file:
failure	hello_preproc.cpp	/^    class failure : public exception$/;"	c	class:std::ios_base	file:
failure	hello_preproc.cpp	/^      failure(const string& __str) throw();$/;"	p	class:std::ios_base::failure	file:
~failure	hello_preproc.cpp	/^      ~failure() throw();$/;"	p	class:std::ios_base::failure	file:
what	hello_preproc.cpp	/^      what() const throw();$/;"	p	class:std::ios_base::failure	file:
_M_msg	hello_preproc.cpp	/^      string _M_msg;$/;"	m	class:std::ios_base::failure	file:
fmtflags	hello_preproc.cpp	/^    typedef _Ios_Fmtflags fmtflags;$/;"	t	class:std::ios_base	file:
boolalpha	hello_preproc.cpp	/^    static const fmtflags boolalpha = _S_boolalpha;$/;"	m	class:std::ios_base	file:
dec	hello_preproc.cpp	/^    static const fmtflags dec = _S_dec;$/;"	m	class:std::ios_base	file:
fixed	hello_preproc.cpp	/^    static const fmtflags fixed = _S_fixed;$/;"	m	class:std::ios_base	file:
hex	hello_preproc.cpp	/^    static const fmtflags hex = _S_hex;$/;"	m	class:std::ios_base	file:
internal	hello_preproc.cpp	/^    static const fmtflags internal = _S_internal;$/;"	m	class:std::ios_base	file:
left	hello_preproc.cpp	/^    static const fmtflags left = _S_left;$/;"	m	class:std::ios_base	file:
oct	hello_preproc.cpp	/^    static const fmtflags oct = _S_oct;$/;"	m	class:std::ios_base	file:
right	hello_preproc.cpp	/^    static const fmtflags right = _S_right;$/;"	m	class:std::ios_base	file:
scientific	hello_preproc.cpp	/^    static const fmtflags scientific = _S_scientific;$/;"	m	class:std::ios_base	file:
showbase	hello_preproc.cpp	/^    static const fmtflags showbase = _S_showbase;$/;"	m	class:std::ios_base	file:
showpoint	hello_preproc.cpp	/^    static const fmtflags showpoint = _S_showpoint;$/;"	m	class:std::ios_base	file:
showpos	hello_preproc.cpp	/^    static const fmtflags showpos = _S_showpos;$/;"	m	class:std::ios_base	file:
skipws	hello_preproc.cpp	/^    static const fmtflags skipws = _S_skipws;$/;"	m	class:std::ios_base	file:
unitbuf	hello_preproc.cpp	/^    static const fmtflags unitbuf = _S_unitbuf;$/;"	m	class:std::ios_base	file:
uppercase	hello_preproc.cpp	/^    static const fmtflags uppercase = _S_uppercase;$/;"	m	class:std::ios_base	file:
adjustfield	hello_preproc.cpp	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	m	class:std::ios_base	file:
basefield	hello_preproc.cpp	/^    static const fmtflags basefield = _S_basefield;$/;"	m	class:std::ios_base	file:
floatfield	hello_preproc.cpp	/^    static const fmtflags floatfield = _S_floatfield;$/;"	m	class:std::ios_base	file:
iostate	hello_preproc.cpp	/^    typedef _Ios_Iostate iostate;$/;"	t	class:std::ios_base	file:
badbit	hello_preproc.cpp	/^    static const iostate badbit = _S_badbit;$/;"	m	class:std::ios_base	file:
eofbit	hello_preproc.cpp	/^    static const iostate eofbit = _S_eofbit;$/;"	m	class:std::ios_base	file:
failbit	hello_preproc.cpp	/^    static const iostate failbit = _S_failbit;$/;"	m	class:std::ios_base	file:
goodbit	hello_preproc.cpp	/^    static const iostate goodbit = _S_goodbit;$/;"	m	class:std::ios_base	file:
openmode	hello_preproc.cpp	/^    typedef _Ios_Openmode openmode;$/;"	t	class:std::ios_base	file:
app	hello_preproc.cpp	/^    static const openmode app = _S_app;$/;"	m	class:std::ios_base	file:
ate	hello_preproc.cpp	/^    static const openmode ate = _S_ate;$/;"	m	class:std::ios_base	file:
binary	hello_preproc.cpp	/^    static const openmode binary = _S_bin;$/;"	m	class:std::ios_base	file:
in	hello_preproc.cpp	/^    static const openmode in = _S_in;$/;"	m	class:std::ios_base	file:
out	hello_preproc.cpp	/^    static const openmode out = _S_out;$/;"	m	class:std::ios_base	file:
trunc	hello_preproc.cpp	/^    static const openmode trunc = _S_trunc;$/;"	m	class:std::ios_base	file:
seekdir	hello_preproc.cpp	/^    typedef _Ios_Seekdir seekdir;$/;"	t	class:std::ios_base	file:
beg	hello_preproc.cpp	/^    static const seekdir beg = _S_beg;$/;"	m	class:std::ios_base	file:
cur	hello_preproc.cpp	/^    static const seekdir cur = _S_cur;$/;"	m	class:std::ios_base	file:
end	hello_preproc.cpp	/^    static const seekdir end = _S_end;$/;"	m	class:std::ios_base	file:
io_state	hello_preproc.cpp	/^    typedef int io_state;$/;"	t	class:std::ios_base	file:
open_mode	hello_preproc.cpp	/^    typedef int open_mode;$/;"	t	class:std::ios_base	file:
seek_dir	hello_preproc.cpp	/^    typedef int seek_dir;$/;"	t	class:std::ios_base	file:
streampos	hello_preproc.cpp	/^    typedef std::streampos streampos;$/;"	t	class:std::ios_base	file:
streamoff	hello_preproc.cpp	/^    typedef std::streamoff streamoff;$/;"	t	class:std::ios_base	file:
event	hello_preproc.cpp	/^    enum event$/;"	g	class:std::ios_base	file:
erase_event	hello_preproc.cpp	/^      erase_event,$/;"	e	enum:std::ios_base::event	file:
imbue_event	hello_preproc.cpp	/^      imbue_event,$/;"	e	enum:std::ios_base::event	file:
copyfmt_event	hello_preproc.cpp	/^      copyfmt_event$/;"	e	enum:std::ios_base::event	file:
event_callback	hello_preproc.cpp	/^    typedef void (*event_callback) (event __e, ios_base& __b, int __i);$/;"	t	class:std::ios_base	file:
register_callback	hello_preproc.cpp	/^    register_callback(event_callback __fn, int __index);$/;"	p	class:std::ios_base	file:
_M_precision	hello_preproc.cpp	/^    streamsize _M_precision;$/;"	m	class:std::ios_base	file:
_M_width	hello_preproc.cpp	/^    streamsize _M_width;$/;"	m	class:std::ios_base	file:
_M_flags	hello_preproc.cpp	/^    fmtflags _M_flags;$/;"	m	class:std::ios_base	file:
_M_exception	hello_preproc.cpp	/^    iostate _M_exception;$/;"	m	class:std::ios_base	file:
_M_streambuf_state	hello_preproc.cpp	/^    iostate _M_streambuf_state;$/;"	m	class:std::ios_base	file:
_Callback_list	hello_preproc.cpp	/^    struct _Callback_list$/;"	s	class:std::ios_base	file:
_M_next	hello_preproc.cpp	/^      _Callback_list* _M_next;$/;"	m	struct:std::ios_base::_Callback_list	file:
_M_fn	hello_preproc.cpp	/^      ios_base::event_callback _M_fn;$/;"	m	struct:std::ios_base::_Callback_list	file:
_M_index	hello_preproc.cpp	/^      int _M_index;$/;"	m	struct:std::ios_base::_Callback_list	file:
_M_refcount	hello_preproc.cpp	/^      _Atomic_word _M_refcount;$/;"	m	struct:std::ios_base::_Callback_list	file:
_Callback_list	hello_preproc.cpp	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	f	struct:std::ios_base::_Callback_list
_M_add_reference	hello_preproc.cpp	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	f	struct:std::ios_base::_Callback_list
_M_remove_reference	hello_preproc.cpp	/^      _M_remove_reference()$/;"	f	struct:std::ios_base::_Callback_list
_M_callbacks	hello_preproc.cpp	/^     _Callback_list* _M_callbacks;$/;"	m	class:std::ios_base	file:
_M_call_callbacks	hello_preproc.cpp	/^    _M_call_callbacks(event __ev) throw();$/;"	p	class:std::ios_base	file:
_M_dispose_callbacks	hello_preproc.cpp	/^    _M_dispose_callbacks(void) throw();$/;"	p	class:std::ios_base	file:
_Words	hello_preproc.cpp	/^    struct _Words$/;"	s	class:std::ios_base	file:
_M_pword	hello_preproc.cpp	/^      void* _M_pword;$/;"	m	struct:std::ios_base::_Words	file:
_M_iword	hello_preproc.cpp	/^      long _M_iword;$/;"	m	struct:std::ios_base::_Words	file:
_Words	hello_preproc.cpp	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	f	struct:std::ios_base::_Words
_M_word_zero	hello_preproc.cpp	/^    _Words _M_word_zero;$/;"	m	class:std::ios_base	file:
_S_local_word_size	hello_preproc.cpp	/^    enum { _S_local_word_size = 8 };$/;"	e	enum:std::ios_base::__anon67	file:
_M_local_word	hello_preproc.cpp	/^    _Words _M_local_word[_S_local_word_size];$/;"	m	class:std::ios_base	file:
_M_word_size	hello_preproc.cpp	/^    int _M_word_size;$/;"	m	class:std::ios_base	file:
_M_word	hello_preproc.cpp	/^    _Words* _M_word;$/;"	m	class:std::ios_base	file:
_M_grow_words	hello_preproc.cpp	/^    _M_grow_words(int __index, bool __iword);$/;"	p	class:std::ios_base	file:
_M_ios_locale	hello_preproc.cpp	/^    locale _M_ios_locale;$/;"	m	class:std::ios_base	file:
_M_init	hello_preproc.cpp	/^    _M_init() throw();$/;"	p	class:std::ios_base	file:
Init	hello_preproc.cpp	/^    class Init$/;"	c	class:std::ios_base	file:
ios_base	hello_preproc.cpp	/^      friend class ios_base;$/;"	x	file:
Init	hello_preproc.cpp	/^      Init();$/;"	p	class:std::ios_base::Init	file:
~Init	hello_preproc.cpp	/^      ~Init();$/;"	p	class:std::ios_base::Init	file:
_S_refcount	hello_preproc.cpp	/^      static _Atomic_word _S_refcount;$/;"	m	class:std::ios_base::Init	file:
_S_synced_with_stdio	hello_preproc.cpp	/^      static bool _S_synced_with_stdio;$/;"	m	class:std::ios_base::Init	file:
flags	hello_preproc.cpp	/^    flags() const$/;"	f	class:std::ios_base
flags	hello_preproc.cpp	/^    flags(fmtflags __fmtfl)$/;"	f	class:std::ios_base
setf	hello_preproc.cpp	/^    setf(fmtflags __fmtfl)$/;"	f	class:std::ios_base
setf	hello_preproc.cpp	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	f	class:std::ios_base
unsetf	hello_preproc.cpp	/^    unsetf(fmtflags __mask)$/;"	f	class:std::ios_base
precision	hello_preproc.cpp	/^    precision() const$/;"	f	class:std::ios_base
precision	hello_preproc.cpp	/^    precision(streamsize __prec)$/;"	f	class:std::ios_base
width	hello_preproc.cpp	/^    width() const$/;"	f	class:std::ios_base
width	hello_preproc.cpp	/^    width(streamsize __wide)$/;"	f	class:std::ios_base
sync_with_stdio	hello_preproc.cpp	/^    sync_with_stdio(bool __sync = true);$/;"	p	class:std::ios_base	file:
imbue	hello_preproc.cpp	/^    imbue(const locale& __loc) throw();$/;"	p	class:std::ios_base	file:
getloc	hello_preproc.cpp	/^    getloc() const$/;"	f	class:std::ios_base
_M_getloc	hello_preproc.cpp	/^    _M_getloc() const$/;"	f	class:std::ios_base
xalloc	hello_preproc.cpp	/^    xalloc() throw();$/;"	p	class:std::ios_base	file:
iword	hello_preproc.cpp	/^    iword(int __ix)$/;"	f	class:std::ios_base
pword	hello_preproc.cpp	/^    pword(int __ix)$/;"	f	class:std::ios_base
~ios_base	hello_preproc.cpp	/^    virtual ~ios_base();$/;"	p	class:std::ios_base	file:
ios_base	hello_preproc.cpp	/^    ios_base() throw ();$/;"	p	class:std::ios_base	file:
ios_base	hello_preproc.cpp	/^    ios_base(const ios_base&);$/;"	p	class:std::ios_base	file:
operator =	hello_preproc.cpp	/^    operator=(const ios_base&);$/;"	p	class:std::ios_base	file:
boolalpha	hello_preproc.cpp	/^  boolalpha(ios_base& __base)$/;"	f	namespace:std
noboolalpha	hello_preproc.cpp	/^  noboolalpha(ios_base& __base)$/;"	f	namespace:std
showbase	hello_preproc.cpp	/^  showbase(ios_base& __base)$/;"	f	namespace:std
noshowbase	hello_preproc.cpp	/^  noshowbase(ios_base& __base)$/;"	f	namespace:std
showpoint	hello_preproc.cpp	/^  showpoint(ios_base& __base)$/;"	f	namespace:std
noshowpoint	hello_preproc.cpp	/^  noshowpoint(ios_base& __base)$/;"	f	namespace:std
showpos	hello_preproc.cpp	/^  showpos(ios_base& __base)$/;"	f	namespace:std
noshowpos	hello_preproc.cpp	/^  noshowpos(ios_base& __base)$/;"	f	namespace:std
skipws	hello_preproc.cpp	/^  skipws(ios_base& __base)$/;"	f	namespace:std
noskipws	hello_preproc.cpp	/^  noskipws(ios_base& __base)$/;"	f	namespace:std
uppercase	hello_preproc.cpp	/^  uppercase(ios_base& __base)$/;"	f	namespace:std
nouppercase	hello_preproc.cpp	/^  nouppercase(ios_base& __base)$/;"	f	namespace:std
unitbuf	hello_preproc.cpp	/^  unitbuf(ios_base& __base)$/;"	f	namespace:std
nounitbuf	hello_preproc.cpp	/^  nounitbuf(ios_base& __base)$/;"	f	namespace:std
internal	hello_preproc.cpp	/^  internal(ios_base& __base)$/;"	f	namespace:std
left	hello_preproc.cpp	/^  left(ios_base& __base)$/;"	f	namespace:std
right	hello_preproc.cpp	/^  right(ios_base& __base)$/;"	f	namespace:std
dec	hello_preproc.cpp	/^  dec(ios_base& __base)$/;"	f	namespace:std
hex	hello_preproc.cpp	/^  hex(ios_base& __base)$/;"	f	namespace:std
oct	hello_preproc.cpp	/^  oct(ios_base& __base)$/;"	f	namespace:std
fixed	hello_preproc.cpp	/^  fixed(ios_base& __base)$/;"	f	namespace:std
scientific	hello_preproc.cpp	/^  scientific(ios_base& __base)$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__copy_streambufs_eof	hello_preproc.cpp	/^    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,$/;"	p	namespace:std	file:
basic_streambuf	hello_preproc.cpp	/^    class basic_streambuf$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::basic_streambuf	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::basic_streambuf	file:
int_type	hello_preproc.cpp	/^      typedef typename traits_type::int_type int_type;$/;"	t	class:std::basic_streambuf	file:
pos_type	hello_preproc.cpp	/^      typedef typename traits_type::pos_type pos_type;$/;"	t	class:std::basic_streambuf	file:
off_type	hello_preproc.cpp	/^      typedef typename traits_type::off_type off_type;$/;"	t	class:std::basic_streambuf	file:
__streambuf_type	hello_preproc.cpp	/^      typedef basic_streambuf<char_type, traits_type> __streambuf_type;$/;"	t	class:std::basic_streambuf	file:
basic_ios	hello_preproc.cpp	/^      friend class basic_ios<char_type, traits_type>;$/;"	x	file:
basic_istream	hello_preproc.cpp	/^      friend class basic_istream<char_type, traits_type>;$/;"	x	file:
basic_ostream	hello_preproc.cpp	/^      friend class basic_ostream<char_type, traits_type>;$/;"	x	file:
istreambuf_iterator	hello_preproc.cpp	/^      friend class istreambuf_iterator<char_type, traits_type>;$/;"	x	file:
ostreambuf_iterator	hello_preproc.cpp	/^      friend class ostreambuf_iterator<char_type, traits_type>;$/;"	x	file:
__copy_streambufs_eof	hello_preproc.cpp	/^      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);$/;"	p	class:std::basic_streambuf	file:
__copy_move_a2	hello_preproc.cpp	/^        __copy_move_a2(istreambuf_iterator<_CharT2>,$/;"	p	class:std::basic_streambuf	file:
find	hello_preproc.cpp	/^        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::basic_streambuf	file:
operator >>	hello_preproc.cpp	/^        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);$/;"	p	class:std::basic_streambuf	file:
operator >>	hello_preproc.cpp	/^        operator>>(basic_istream<_CharT2, _Traits2>&,$/;"	p	class:std::basic_streambuf	file:
getline	hello_preproc.cpp	/^        getline(basic_istream<_CharT2, _Traits2>&,$/;"	p	class:std::basic_streambuf	file:
_M_in_beg	hello_preproc.cpp	/^      char_type* _M_in_beg;$/;"	m	class:std::basic_streambuf	file:
_M_in_cur	hello_preproc.cpp	/^      char_type* _M_in_cur;$/;"	m	class:std::basic_streambuf	file:
_M_in_end	hello_preproc.cpp	/^      char_type* _M_in_end;$/;"	m	class:std::basic_streambuf	file:
_M_out_beg	hello_preproc.cpp	/^      char_type* _M_out_beg;$/;"	m	class:std::basic_streambuf	file:
_M_out_cur	hello_preproc.cpp	/^      char_type* _M_out_cur;$/;"	m	class:std::basic_streambuf	file:
_M_out_end	hello_preproc.cpp	/^      char_type* _M_out_end;$/;"	m	class:std::basic_streambuf	file:
_M_buf_locale	hello_preproc.cpp	/^      locale _M_buf_locale;$/;"	m	class:std::basic_streambuf	file:
~basic_streambuf	hello_preproc.cpp	/^      ~basic_streambuf()$/;"	f	class:std::basic_streambuf
pubimbue	hello_preproc.cpp	/^      pubimbue(const locale& __loc)$/;"	f	class:std::basic_streambuf
getloc	hello_preproc.cpp	/^      getloc() const$/;"	f	class:std::basic_streambuf
pubsetbuf	hello_preproc.cpp	/^      pubsetbuf(char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
pubseekoff	hello_preproc.cpp	/^      pubseekoff(off_type __off, ios_base::seekdir __way,$/;"	f	class:std::basic_streambuf
pubseekpos	hello_preproc.cpp	/^      pubseekpos(pos_type __sp,$/;"	f	class:std::basic_streambuf
pubsync	hello_preproc.cpp	/^      pubsync() { return this->sync(); }$/;"	f	class:std::basic_streambuf
in_avail	hello_preproc.cpp	/^      in_avail()$/;"	f	class:std::basic_streambuf
snextc	hello_preproc.cpp	/^      snextc()$/;"	f	class:std::basic_streambuf
sbumpc	hello_preproc.cpp	/^      sbumpc()$/;"	f	class:std::basic_streambuf
sgetc	hello_preproc.cpp	/^      sgetc()$/;"	f	class:std::basic_streambuf
sgetn	hello_preproc.cpp	/^      sgetn(char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
sputbackc	hello_preproc.cpp	/^      sputbackc(char_type __c)$/;"	f	class:std::basic_streambuf
sungetc	hello_preproc.cpp	/^      sungetc()$/;"	f	class:std::basic_streambuf
sputc	hello_preproc.cpp	/^      sputc(char_type __c)$/;"	f	class:std::basic_streambuf
sputn	hello_preproc.cpp	/^      sputn(const char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
basic_streambuf	hello_preproc.cpp	/^      basic_streambuf()$/;"	f	class:std::basic_streambuf
eback	hello_preproc.cpp	/^      eback() const { return _M_in_beg; }$/;"	f	class:std::basic_streambuf
gptr	hello_preproc.cpp	/^      gptr() const { return _M_in_cur; }$/;"	f	class:std::basic_streambuf
egptr	hello_preproc.cpp	/^      egptr() const { return _M_in_end; }$/;"	f	class:std::basic_streambuf
gbump	hello_preproc.cpp	/^      gbump(int __n) { _M_in_cur += __n; }$/;"	f	class:std::basic_streambuf
setg	hello_preproc.cpp	/^      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)$/;"	f	class:std::basic_streambuf
pbase	hello_preproc.cpp	/^      pbase() const { return _M_out_beg; }$/;"	f	class:std::basic_streambuf
pptr	hello_preproc.cpp	/^      pptr() const { return _M_out_cur; }$/;"	f	class:std::basic_streambuf
epptr	hello_preproc.cpp	/^      epptr() const { return _M_out_end; }$/;"	f	class:std::basic_streambuf
pbump	hello_preproc.cpp	/^      pbump(int __n) { _M_out_cur += __n; }$/;"	f	class:std::basic_streambuf
setp	hello_preproc.cpp	/^      setp(char_type* __pbeg, char_type* __pend)$/;"	f	class:std::basic_streambuf
imbue	hello_preproc.cpp	/^      imbue(const locale& __loc)$/;"	f	class:std::basic_streambuf
setbuf	hello_preproc.cpp	/^      setbuf(char_type*, streamsize)$/;"	f	class:std::basic_streambuf
seekoff	hello_preproc.cpp	/^      seekoff(off_type, ios_base::seekdir,$/;"	f	class:std::basic_streambuf
seekpos	hello_preproc.cpp	/^      seekpos(pos_type,$/;"	f	class:std::basic_streambuf
sync	hello_preproc.cpp	/^      sync() { return 0; }$/;"	f	class:std::basic_streambuf
showmanyc	hello_preproc.cpp	/^      showmanyc() { return 0; }$/;"	f	class:std::basic_streambuf
xsgetn	hello_preproc.cpp	/^      xsgetn(char_type* __s, streamsize __n);$/;"	p	class:std::basic_streambuf	file:
underflow	hello_preproc.cpp	/^      underflow()$/;"	f	class:std::basic_streambuf
uflow	hello_preproc.cpp	/^      uflow()$/;"	f	class:std::basic_streambuf
pbackfail	hello_preproc.cpp	/^      pbackfail(int_type __c = traits_type::eof())$/;"	f	class:std::basic_streambuf
xsputn	hello_preproc.cpp	/^      xsputn(const char_type* __s, streamsize __n);$/;"	p	class:std::basic_streambuf	file:
overflow	hello_preproc.cpp	/^      overflow(int_type __c = traits_type::eof())$/;"	f	class:std::basic_streambuf
stossc	hello_preproc.cpp	/^      stossc()$/;"	f	class:std::basic_streambuf
__safe_gbump	hello_preproc.cpp	/^      __safe_gbump(streamsize __n) { _M_in_cur += __n; }$/;"	f	class:std::basic_streambuf
__safe_pbump	hello_preproc.cpp	/^      __safe_pbump(streamsize __n) { _M_out_cur += __n; }$/;"	f	class:std::basic_streambuf
basic_streambuf	hello_preproc.cpp	/^      basic_streambuf(const basic_streambuf&);$/;"	p	class:std::basic_streambuf	file:
operator =	hello_preproc.cpp	/^      operator=(const basic_streambuf&);$/;"	p	class:std::basic_streambuf	file:
__copy_streambufs_eof	hello_preproc.cpp	/^    __copy_streambufs_eof(basic_streambuf<char>* __sbin,$/;"	p	namespace:std	file:
__copy_streambufs_eof	hello_preproc.cpp	/^    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,$/;"	p	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
xsgetn	hello_preproc.cpp	/^    xsgetn(char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
xsputn	hello_preproc.cpp	/^    xsputn(const char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
__copy_streambufs_eof	hello_preproc.cpp	/^    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,$/;"	f	namespace:std
__copy_streambufs	hello_preproc.cpp	/^    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,$/;"	f	namespace:std
basic_streambuf	hello_preproc.cpp	/^  extern template class basic_streambuf<char>;$/;"	x	file:
__copy_streambufs	hello_preproc.cpp	/^    __copy_streambufs(basic_streambuf<char>*,$/;"	p	namespace:std	file:
__copy_streambufs_eof	hello_preproc.cpp	/^    __copy_streambufs_eof(basic_streambuf<char>*,$/;"	p	namespace:std	file:
basic_streambuf	hello_preproc.cpp	/^  extern template class basic_streambuf<wchar_t>;$/;"	x	file:
__copy_streambufs	hello_preproc.cpp	/^    __copy_streambufs(basic_streambuf<wchar_t>*,$/;"	p	namespace:std	file:
__copy_streambufs_eof	hello_preproc.cpp	/^    __copy_streambufs_eof(basic_streambuf<wchar_t>*,$/;"	p	namespace:std	file:
wctype_t	hello_preproc.cpp	/^typedef unsigned long int wctype_t;$/;"	t	file:
__ISwupper	hello_preproc.cpp	/^  __ISwupper = 0,$/;"	e	enum:__anon68	file:
__ISwlower	hello_preproc.cpp	/^  __ISwlower = 1,$/;"	e	enum:__anon68	file:
__ISwalpha	hello_preproc.cpp	/^  __ISwalpha = 2,$/;"	e	enum:__anon68	file:
__ISwdigit	hello_preproc.cpp	/^  __ISwdigit = 3,$/;"	e	enum:__anon68	file:
__ISwxdigit	hello_preproc.cpp	/^  __ISwxdigit = 4,$/;"	e	enum:__anon68	file:
__ISwspace	hello_preproc.cpp	/^  __ISwspace = 5,$/;"	e	enum:__anon68	file:
__ISwprint	hello_preproc.cpp	/^  __ISwprint = 6,$/;"	e	enum:__anon68	file:
__ISwgraph	hello_preproc.cpp	/^  __ISwgraph = 7,$/;"	e	enum:__anon68	file:
__ISwblank	hello_preproc.cpp	/^  __ISwblank = 8,$/;"	e	enum:__anon68	file:
__ISwcntrl	hello_preproc.cpp	/^  __ISwcntrl = 9,$/;"	e	enum:__anon68	file:
__ISwpunct	hello_preproc.cpp	/^  __ISwpunct = 10,$/;"	e	enum:__anon68	file:
__ISwalnum	hello_preproc.cpp	/^  __ISwalnum = 11,$/;"	e	enum:__anon68	file:
_ISwupper	hello_preproc.cpp	/^  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwlower	hello_preproc.cpp	/^  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwalpha	hello_preproc.cpp	/^  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwdigit	hello_preproc.cpp	/^  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwxdigit	hello_preproc.cpp	/^  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwspace	hello_preproc.cpp	/^  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwprint	hello_preproc.cpp	/^  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwgraph	hello_preproc.cpp	/^  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwblank	hello_preproc.cpp	/^  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwcntrl	hello_preproc.cpp	/^  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwpunct	hello_preproc.cpp	/^  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),$/;"	e	enum:__anon68	file:
_ISwalnum	hello_preproc.cpp	/^  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))$/;"	e	enum:__anon68	file:
iswalnum	hello_preproc.cpp	/^extern int iswalnum (wint_t __wc) throw ();$/;"	p	file:
iswalpha	hello_preproc.cpp	/^extern int iswalpha (wint_t __wc) throw ();$/;"	p	file:
iswcntrl	hello_preproc.cpp	/^extern int iswcntrl (wint_t __wc) throw ();$/;"	p	file:
iswdigit	hello_preproc.cpp	/^extern int iswdigit (wint_t __wc) throw ();$/;"	p	file:
iswgraph	hello_preproc.cpp	/^extern int iswgraph (wint_t __wc) throw ();$/;"	p	file:
iswlower	hello_preproc.cpp	/^extern int iswlower (wint_t __wc) throw ();$/;"	p	file:
iswprint	hello_preproc.cpp	/^extern int iswprint (wint_t __wc) throw ();$/;"	p	file:
iswpunct	hello_preproc.cpp	/^extern int iswpunct (wint_t __wc) throw ();$/;"	p	file:
iswspace	hello_preproc.cpp	/^extern int iswspace (wint_t __wc) throw ();$/;"	p	file:
iswupper	hello_preproc.cpp	/^extern int iswupper (wint_t __wc) throw ();$/;"	p	file:
iswxdigit	hello_preproc.cpp	/^extern int iswxdigit (wint_t __wc) throw ();$/;"	p	file:
iswblank	hello_preproc.cpp	/^extern int iswblank (wint_t __wc) throw ();$/;"	p	file:
wctype	hello_preproc.cpp	/^extern wctype_t wctype (const char *__property) throw ();$/;"	p	file:
iswctype	hello_preproc.cpp	/^extern int iswctype (wint_t __wc, wctype_t __desc) throw ();$/;"	p	file:
wctrans_t	hello_preproc.cpp	/^typedef const __int32_t *wctrans_t;$/;"	t	file:
towlower	hello_preproc.cpp	/^extern wint_t towlower (wint_t __wc) throw ();$/;"	p	file:
towupper	hello_preproc.cpp	/^extern wint_t towupper (wint_t __wc) throw ();$/;"	p	file:
wctrans	hello_preproc.cpp	/^extern wctrans_t wctrans (const char *__property) throw ();$/;"	p	file:
towctrans	hello_preproc.cpp	/^extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();$/;"	p	file:
iswalnum_l	hello_preproc.cpp	/^extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswalpha_l	hello_preproc.cpp	/^extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswcntrl_l	hello_preproc.cpp	/^extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswdigit_l	hello_preproc.cpp	/^extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswgraph_l	hello_preproc.cpp	/^extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswlower_l	hello_preproc.cpp	/^extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswprint_l	hello_preproc.cpp	/^extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswpunct_l	hello_preproc.cpp	/^extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswspace_l	hello_preproc.cpp	/^extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswupper_l	hello_preproc.cpp	/^extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswxdigit_l	hello_preproc.cpp	/^extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
iswblank_l	hello_preproc.cpp	/^extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
wctype_l	hello_preproc.cpp	/^extern wctype_t wctype_l (const char *__property, __locale_t __locale)$/;"	p	file:
iswctype_l	hello_preproc.cpp	/^extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)$/;"	p	file:
towlower_l	hello_preproc.cpp	/^extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
towupper_l	hello_preproc.cpp	/^extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();$/;"	p	file:
wctrans_l	hello_preproc.cpp	/^extern wctrans_t wctrans_l (const char *__property, __locale_t __locale)$/;"	p	file:
towctrans_l	hello_preproc.cpp	/^extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,$/;"	p	file:
std	hello_preproc.cpp	/^namespace std$/;"	n	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
ctype_base	hello_preproc.cpp	/^  struct ctype_base$/;"	s	namespace:std	file:
__to_type	hello_preproc.cpp	/^    typedef const int* __to_type;$/;"	t	struct:std::ctype_base	file:
mask	hello_preproc.cpp	/^    typedef unsigned short mask;$/;"	t	struct:std::ctype_base	file:
upper	hello_preproc.cpp	/^    static const mask upper = _ISupper;$/;"	m	struct:std::ctype_base	file:
lower	hello_preproc.cpp	/^    static const mask lower = _ISlower;$/;"	m	struct:std::ctype_base	file:
alpha	hello_preproc.cpp	/^    static const mask alpha = _ISalpha;$/;"	m	struct:std::ctype_base	file:
digit	hello_preproc.cpp	/^    static const mask digit = _ISdigit;$/;"	m	struct:std::ctype_base	file:
xdigit	hello_preproc.cpp	/^    static const mask xdigit = _ISxdigit;$/;"	m	struct:std::ctype_base	file:
space	hello_preproc.cpp	/^    static const mask space = _ISspace;$/;"	m	struct:std::ctype_base	file:
print	hello_preproc.cpp	/^    static const mask print = _ISprint;$/;"	m	struct:std::ctype_base	file:
graph	hello_preproc.cpp	/^    static const mask graph = _ISalpha | _ISdigit | _ISpunct;$/;"	m	struct:std::ctype_base	file:
cntrl	hello_preproc.cpp	/^    static const mask cntrl = _IScntrl;$/;"	m	struct:std::ctype_base	file:
punct	hello_preproc.cpp	/^    static const mask punct = _ISpunct;$/;"	m	struct:std::ctype_base	file:
alnum	hello_preproc.cpp	/^    static const mask alnum = _ISalpha | _ISdigit;$/;"	m	struct:std::ctype_base	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
istreambuf_iterator	hello_preproc.cpp	/^    class istreambuf_iterator$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::istreambuf_iterator	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::istreambuf_iterator	file:
int_type	hello_preproc.cpp	/^      typedef typename _Traits::int_type int_type;$/;"	t	class:std::istreambuf_iterator	file:
streambuf_type	hello_preproc.cpp	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::istreambuf_iterator	file:
istream_type	hello_preproc.cpp	/^      typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:std::istreambuf_iterator	file:
copy	hello_preproc.cpp	/^ copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::istreambuf_iterator	file:
__copy_move_a2	hello_preproc.cpp	/^ __copy_move_a2(istreambuf_iterator<_CharT2>,$/;"	p	class:std::istreambuf_iterator	file:
find	hello_preproc.cpp	/^ find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::istreambuf_iterator	file:
_M_sbuf	hello_preproc.cpp	/^      mutable streambuf_type* _M_sbuf;$/;"	m	class:std::istreambuf_iterator	file:
_M_c	hello_preproc.cpp	/^      mutable int_type _M_c;$/;"	m	class:std::istreambuf_iterator	file:
istreambuf_iterator	hello_preproc.cpp	/^      istreambuf_iterator() throw()$/;"	f	class:std::istreambuf_iterator
istreambuf_iterator	hello_preproc.cpp	/^      istreambuf_iterator(istream_type& __s) throw()$/;"	f	class:std::istreambuf_iterator
istreambuf_iterator	hello_preproc.cpp	/^      istreambuf_iterator(streambuf_type* __s) throw()$/;"	f	class:std::istreambuf_iterator
operator *	hello_preproc.cpp	/^      operator*() const$/;"	f	class:std::istreambuf_iterator
operator ++	hello_preproc.cpp	/^      operator++()$/;"	f	class:std::istreambuf_iterator
operator ++	hello_preproc.cpp	/^      operator++(int)$/;"	f	class:std::istreambuf_iterator
equal	hello_preproc.cpp	/^      equal(const istreambuf_iterator& __b) const$/;"	f	class:std::istreambuf_iterator
_M_get	hello_preproc.cpp	/^      _M_get() const$/;"	f	class:std::istreambuf_iterator	file:
_M_at_eof	hello_preproc.cpp	/^      _M_at_eof() const$/;"	f	class:std::istreambuf_iterator	file:
operator ==	hello_preproc.cpp	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std
operator !=	hello_preproc.cpp	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std
ostreambuf_iterator	hello_preproc.cpp	/^    class ostreambuf_iterator$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::ostreambuf_iterator	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::ostreambuf_iterator	file:
streambuf_type	hello_preproc.cpp	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	file:
ostream_type	hello_preproc.cpp	/^      typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:std::ostreambuf_iterator	file:
copy	hello_preproc.cpp	/^ copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::ostreambuf_iterator	file:
_M_sbuf	hello_preproc.cpp	/^      streambuf_type* _M_sbuf;$/;"	m	class:std::ostreambuf_iterator	file:
_M_failed	hello_preproc.cpp	/^      bool _M_failed;$/;"	m	class:std::ostreambuf_iterator	file:
ostreambuf_iterator	hello_preproc.cpp	/^      ostreambuf_iterator(ostream_type& __s) throw()$/;"	f	class:std::ostreambuf_iterator
ostreambuf_iterator	hello_preproc.cpp	/^      ostreambuf_iterator(streambuf_type* __s) throw()$/;"	f	class:std::ostreambuf_iterator
operator =	hello_preproc.cpp	/^      operator=(_CharT __c)$/;"	f	class:std::ostreambuf_iterator
operator *	hello_preproc.cpp	/^      operator*()$/;"	f	class:std::ostreambuf_iterator
operator ++	hello_preproc.cpp	/^      operator++(int)$/;"	f	class:std::ostreambuf_iterator
operator ++	hello_preproc.cpp	/^      operator++()$/;"	f	class:std::ostreambuf_iterator
failed	hello_preproc.cpp	/^      failed() const throw()$/;"	f	class:std::ostreambuf_iterator
_M_put	hello_preproc.cpp	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	f	class:std::ostreambuf_iterator
copy	hello_preproc.cpp	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std
__copy_move_a2	hello_preproc.cpp	/^    __copy_move_a2(_CharT* __first, _CharT* __last,$/;"	f	namespace:std
__copy_move_a2	hello_preproc.cpp	/^    __copy_move_a2(const _CharT* __first, const _CharT* __last,$/;"	f	namespace:std
__copy_move_a2	hello_preproc.cpp	/^    __copy_move_a2(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std
find	hello_preproc.cpp	/^    find(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__convert_to_v	hello_preproc.cpp	/^    __convert_to_v(const char*, _Tp&, ios_base::iostate&,$/;"	p	namespace:std	file:
__convert_to_v	hello_preproc.cpp	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	p	namespace:std	file:
__convert_to_v	hello_preproc.cpp	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	p	namespace:std	file:
__convert_to_v	hello_preproc.cpp	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	p	namespace:std	file:
__pad	hello_preproc.cpp	/^    struct __pad$/;"	s	namespace:std	file:
_S_pad	hello_preproc.cpp	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	p	struct:std::__pad	file:
__add_grouping	hello_preproc.cpp	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	p	namespace:std	file:
__write	hello_preproc.cpp	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	f	namespace:std
__write	hello_preproc.cpp	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	f	namespace:std
__ctype_abstract_base	hello_preproc.cpp	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::__ctype_abstract_base	file:
is	hello_preproc.cpp	/^      is(mask __m, char_type __c) const$/;"	f	class:std::__ctype_abstract_base
is	hello_preproc.cpp	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	f	class:std::__ctype_abstract_base
scan_is	hello_preproc.cpp	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
scan_not	hello_preproc.cpp	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
toupper	hello_preproc.cpp	/^      toupper(char_type __c) const$/;"	f	class:std::__ctype_abstract_base
toupper	hello_preproc.cpp	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
tolower	hello_preproc.cpp	/^      tolower(char_type __c) const$/;"	f	class:std::__ctype_abstract_base
tolower	hello_preproc.cpp	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
widen	hello_preproc.cpp	/^      widen(char __c) const$/;"	f	class:std::__ctype_abstract_base
widen	hello_preproc.cpp	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::__ctype_abstract_base
narrow	hello_preproc.cpp	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::__ctype_abstract_base
narrow	hello_preproc.cpp	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::__ctype_abstract_base
__ctype_abstract_base	hello_preproc.cpp	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	f	class:std::__ctype_abstract_base
~__ctype_abstract_base	hello_preproc.cpp	/^      ~__ctype_abstract_base() { }$/;"	f	class:std::__ctype_abstract_base
do_is	hello_preproc.cpp	/^      do_is(mask __m, char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_is	hello_preproc.cpp	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	file:
do_scan_is	hello_preproc.cpp	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	file:
do_scan_not	hello_preproc.cpp	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_widen	hello_preproc.cpp	/^      do_widen(char __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_widen	hello_preproc.cpp	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_narrow	hello_preproc.cpp	/^      do_narrow(char_type __c, char __dfault) const = 0;$/;"	p	class:std::__ctype_abstract_base	file:
do_narrow	hello_preproc.cpp	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	file:
ctype	hello_preproc.cpp	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::ctype	file:
mask	hello_preproc.cpp	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	t	class:std::ctype	file:
id	hello_preproc.cpp	/^      static locale::id id;$/;"	m	class:std::ctype	file:
ctype	hello_preproc.cpp	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	f	class:std::ctype
~ctype	hello_preproc.cpp	/^      ~ctype();$/;"	p	class:std::ctype	file:
do_is	hello_preproc.cpp	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	file:
do_is	hello_preproc.cpp	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	file:
do_scan_is	hello_preproc.cpp	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_scan_not	hello_preproc.cpp	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_widen	hello_preproc.cpp	/^      do_widen(char __c) const;$/;"	p	class:std::ctype	file:
do_widen	hello_preproc.cpp	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	p	class:std::ctype	file:
do_narrow	hello_preproc.cpp	/^      do_narrow(char_type, char __dfault) const;$/;"	p	class:std::ctype	file:
do_narrow	hello_preproc.cpp	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	file:
id	hello_preproc.cpp	/^    locale::id ctype<_CharT>::id;$/;"	m	class:std::ctype	file:
ctype	hello_preproc.cpp	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef char char_type;$/;"	t	class:std::ctype	file:
_M_c_locale_ctype	hello_preproc.cpp	/^      __c_locale _M_c_locale_ctype;$/;"	m	class:std::ctype	file:
_M_del	hello_preproc.cpp	/^      bool _M_del;$/;"	m	class:std::ctype	file:
_M_toupper	hello_preproc.cpp	/^      __to_type _M_toupper;$/;"	m	class:std::ctype	file:
_M_tolower	hello_preproc.cpp	/^      __to_type _M_tolower;$/;"	m	class:std::ctype	file:
_M_table	hello_preproc.cpp	/^      const mask* _M_table;$/;"	m	class:std::ctype	file:
_M_widen_ok	hello_preproc.cpp	/^      mutable char _M_widen_ok;$/;"	m	class:std::ctype	file:
_M_widen	hello_preproc.cpp	/^      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	file:
_M_narrow	hello_preproc.cpp	/^      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	file:
_M_narrow_ok	hello_preproc.cpp	/^      mutable char _M_narrow_ok;$/;"	m	class:std::ctype	file:
id	hello_preproc.cpp	/^      static locale::id id;$/;"	m	class:std::ctype	file:
table_size	hello_preproc.cpp	/^      static const size_t table_size = 1 + static_cast<unsigned char>(-1);$/;"	m	class:std::ctype	file:
ctype	hello_preproc.cpp	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	p	class:std::ctype	file:
ctype	hello_preproc.cpp	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	p	class:std::ctype	file:
is	hello_preproc.cpp	/^      is(mask __m, char __c) const;$/;"	p	class:std::ctype	file:
is	hello_preproc.cpp	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	p	class:std::ctype	file:
scan_is	hello_preproc.cpp	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	file:
scan_not	hello_preproc.cpp	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	file:
toupper	hello_preproc.cpp	/^      toupper(char_type __c) const$/;"	f	class:std::ctype
toupper	hello_preproc.cpp	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::ctype
tolower	hello_preproc.cpp	/^      tolower(char_type __c) const$/;"	f	class:std::ctype
tolower	hello_preproc.cpp	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::ctype
widen	hello_preproc.cpp	/^      widen(char __c) const$/;"	f	class:std::ctype
widen	hello_preproc.cpp	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype
narrow	hello_preproc.cpp	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype
narrow	hello_preproc.cpp	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype
table	hello_preproc.cpp	/^      table() const throw()$/;"	f	class:std::ctype
classic_table	hello_preproc.cpp	/^      classic_table() throw();$/;"	p	class:std::ctype	file:
~ctype	hello_preproc.cpp	/^      ~ctype();$/;"	p	class:std::ctype	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_widen	hello_preproc.cpp	/^      do_widen(char __c) const$/;"	f	class:std::ctype
do_widen	hello_preproc.cpp	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype
do_narrow	hello_preproc.cpp	/^      do_narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype
do_narrow	hello_preproc.cpp	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype
_M_narrow_init	hello_preproc.cpp	/^      void _M_narrow_init() const;$/;"	p	class:std::ctype	file:
_M_widen_init	hello_preproc.cpp	/^      void _M_widen_init() const;$/;"	p	class:std::ctype	file:
ctype	hello_preproc.cpp	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef wchar_t char_type;$/;"	t	class:std::ctype	file:
__wmask_type	hello_preproc.cpp	/^      typedef wctype_t __wmask_type;$/;"	t	class:std::ctype	file:
_M_c_locale_ctype	hello_preproc.cpp	/^      __c_locale _M_c_locale_ctype;$/;"	m	class:std::ctype	file:
_M_narrow_ok	hello_preproc.cpp	/^      bool _M_narrow_ok;$/;"	m	class:std::ctype	file:
_M_narrow	hello_preproc.cpp	/^      char _M_narrow[128];$/;"	m	class:std::ctype	file:
_M_widen	hello_preproc.cpp	/^      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	file:
_M_bit	hello_preproc.cpp	/^      mask _M_bit[16];$/;"	m	class:std::ctype	file:
_M_wmask	hello_preproc.cpp	/^      __wmask_type _M_wmask[16];$/;"	m	class:std::ctype	file:
id	hello_preproc.cpp	/^      static locale::id id;$/;"	m	class:std::ctype	file:
ctype	hello_preproc.cpp	/^      ctype(size_t __refs = 0);$/;"	p	class:std::ctype	file:
ctype	hello_preproc.cpp	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::ctype	file:
_M_convert_to_wmask	hello_preproc.cpp	/^      _M_convert_to_wmask(const mask __m) const throw();$/;"	p	class:std::ctype	file:
~ctype	hello_preproc.cpp	/^      ~ctype();$/;"	p	class:std::ctype	file:
do_is	hello_preproc.cpp	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	file:
do_is	hello_preproc.cpp	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	file:
do_scan_is	hello_preproc.cpp	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_scan_not	hello_preproc.cpp	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	file:
do_toupper	hello_preproc.cpp	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	file:
do_tolower	hello_preproc.cpp	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	file:
do_widen	hello_preproc.cpp	/^      do_widen(char __c) const;$/;"	p	class:std::ctype	file:
do_widen	hello_preproc.cpp	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const;$/;"	p	class:std::ctype	file:
do_narrow	hello_preproc.cpp	/^      do_narrow(char_type __c, char __dfault) const;$/;"	p	class:std::ctype	file:
do_narrow	hello_preproc.cpp	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	file:
_M_initialize_ctype	hello_preproc.cpp	/^      _M_initialize_ctype() throw();$/;"	p	class:std::ctype	file:
ctype_byname	hello_preproc.cpp	/^    class ctype_byname : public ctype<_CharT>$/;"	c	namespace:std	file:
mask	hello_preproc.cpp	/^      typedef typename ctype<_CharT>::mask mask;$/;"	t	class:std::ctype_byname	file:
ctype_byname	hello_preproc.cpp	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	file:
~ctype_byname	hello_preproc.cpp	/^      ~ctype_byname() { };$/;"	f	class:std::ctype_byname
ctype_byname	hello_preproc.cpp	/^    class ctype_byname<char> : public ctype<char>$/;"	c	namespace:std	file:
ctype_byname	hello_preproc.cpp	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	file:
~ctype_byname	hello_preproc.cpp	/^      ~ctype_byname();$/;"	p	class:std::ctype_byname	file:
ctype_byname	hello_preproc.cpp	/^    class ctype_byname<wchar_t> : public ctype<wchar_t>$/;"	c	namespace:std	file:
ctype_byname	hello_preproc.cpp	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	file:
~ctype_byname	hello_preproc.cpp	/^      ~ctype_byname();$/;"	p	class:std::ctype_byname	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
is	hello_preproc.cpp	/^  is(mask __m, char __c) const$/;"	f	class:std::ctype
is	hello_preproc.cpp	/^  is(const char* __low, const char* __high, mask* __vec) const$/;"	f	class:std::ctype
scan_is	hello_preproc.cpp	/^  scan_is(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype
scan_not	hello_preproc.cpp	/^  scan_not(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__num_base	hello_preproc.cpp	/^  class __num_base$/;"	c	namespace:std	file:
_S_ominus	hello_preproc.cpp	/^ _S_ominus,$/;"	e	enum:std::__num_base::__anon69	file:
_S_oplus	hello_preproc.cpp	/^ _S_oplus,$/;"	e	enum:std::__num_base::__anon69	file:
_S_ox	hello_preproc.cpp	/^ _S_ox,$/;"	e	enum:std::__num_base::__anon69	file:
_S_oX	hello_preproc.cpp	/^ _S_oX,$/;"	e	enum:std::__num_base::__anon69	file:
_S_odigits	hello_preproc.cpp	/^ _S_odigits,$/;"	e	enum:std::__num_base::__anon69	file:
_S_odigits_end	hello_preproc.cpp	/^ _S_odigits_end = _S_odigits + 16,$/;"	e	enum:std::__num_base::__anon69	file:
_S_oudigits	hello_preproc.cpp	/^ _S_oudigits = _S_odigits_end,$/;"	e	enum:std::__num_base::__anon69	file:
_S_oudigits_end	hello_preproc.cpp	/^ _S_oudigits_end = _S_oudigits + 16,$/;"	e	enum:std::__num_base::__anon69	file:
_S_oe	hello_preproc.cpp	/^ _S_oe = _S_odigits + 14,$/;"	e	enum:std::__num_base::__anon69	file:
_S_oE	hello_preproc.cpp	/^ _S_oE = _S_oudigits + 14,$/;"	e	enum:std::__num_base::__anon69	file:
_S_oend	hello_preproc.cpp	/^ _S_oend = _S_oudigits_end$/;"	e	enum:std::__num_base::__anon69	file:
_S_atoms_out	hello_preproc.cpp	/^    static const char* _S_atoms_out;$/;"	m	class:std::__num_base	file:
_S_atoms_in	hello_preproc.cpp	/^    static const char* _S_atoms_in;$/;"	m	class:std::__num_base	file:
_S_iminus	hello_preproc.cpp	/^      _S_iminus,$/;"	e	enum:std::__num_base::__anon70	file:
_S_iplus	hello_preproc.cpp	/^      _S_iplus,$/;"	e	enum:std::__num_base::__anon70	file:
_S_ix	hello_preproc.cpp	/^      _S_ix,$/;"	e	enum:std::__num_base::__anon70	file:
_S_iX	hello_preproc.cpp	/^      _S_iX,$/;"	e	enum:std::__num_base::__anon70	file:
_S_izero	hello_preproc.cpp	/^      _S_izero,$/;"	e	enum:std::__num_base::__anon70	file:
_S_ie	hello_preproc.cpp	/^      _S_ie = _S_izero + 14,$/;"	e	enum:std::__num_base::__anon70	file:
_S_iE	hello_preproc.cpp	/^      _S_iE = _S_izero + 20,$/;"	e	enum:std::__num_base::__anon70	file:
_S_iend	hello_preproc.cpp	/^      _S_iend = 26$/;"	e	enum:std::__num_base::__anon70	file:
_S_format_float	hello_preproc.cpp	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();$/;"	p	class:std::__num_base	file:
__numpunct_cache	hello_preproc.cpp	/^    struct __numpunct_cache : public locale::facet$/;"	s	namespace:std	file:
_M_grouping	hello_preproc.cpp	/^      const char* _M_grouping;$/;"	m	struct:std::__numpunct_cache	file:
_M_grouping_size	hello_preproc.cpp	/^      size_t _M_grouping_size;$/;"	m	struct:std::__numpunct_cache	file:
_M_use_grouping	hello_preproc.cpp	/^      bool _M_use_grouping;$/;"	m	struct:std::__numpunct_cache	file:
_M_truename	hello_preproc.cpp	/^      const _CharT* _M_truename;$/;"	m	struct:std::__numpunct_cache	file:
_M_truename_size	hello_preproc.cpp	/^      size_t _M_truename_size;$/;"	m	struct:std::__numpunct_cache	file:
_M_falsename	hello_preproc.cpp	/^      const _CharT* _M_falsename;$/;"	m	struct:std::__numpunct_cache	file:
_M_falsename_size	hello_preproc.cpp	/^      size_t _M_falsename_size;$/;"	m	struct:std::__numpunct_cache	file:
_M_decimal_point	hello_preproc.cpp	/^      _CharT _M_decimal_point;$/;"	m	struct:std::__numpunct_cache	file:
_M_thousands_sep	hello_preproc.cpp	/^      _CharT _M_thousands_sep;$/;"	m	struct:std::__numpunct_cache	file:
_M_atoms_out	hello_preproc.cpp	/^      _CharT _M_atoms_out[__num_base::_S_oend];$/;"	m	struct:std::__numpunct_cache	file:
_M_atoms_in	hello_preproc.cpp	/^      _CharT _M_atoms_in[__num_base::_S_iend];$/;"	m	struct:std::__numpunct_cache	file:
_M_allocated	hello_preproc.cpp	/^      bool _M_allocated;$/;"	m	struct:std::__numpunct_cache	file:
__numpunct_cache	hello_preproc.cpp	/^      __numpunct_cache(size_t __refs = 0)$/;"	f	struct:std::__numpunct_cache
~__numpunct_cache	hello_preproc.cpp	/^      ~__numpunct_cache();$/;"	p	struct:std::__numpunct_cache	file:
_M_cache	hello_preproc.cpp	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__numpunct_cache	file:
operator =	hello_preproc.cpp	/^      operator=(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	file:
__numpunct_cache	hello_preproc.cpp	/^      __numpunct_cache(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	file:
~__numpunct_cache	hello_preproc.cpp	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	f	class:std::__numpunct_cache
numpunct	hello_preproc.cpp	/^    class numpunct : public locale::facet$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::numpunct	file:
string_type	hello_preproc.cpp	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::numpunct	file:
__cache_type	hello_preproc.cpp	/^      typedef __numpunct_cache<_CharT> __cache_type;$/;"	t	class:std::numpunct	file:
_M_data	hello_preproc.cpp	/^      __cache_type* _M_data;$/;"	m	class:std::numpunct	file:
id	hello_preproc.cpp	/^      static locale::id id;$/;"	m	class:std::numpunct	file:
numpunct	hello_preproc.cpp	/^      numpunct(size_t __refs = 0)$/;"	f	class:std::numpunct
numpunct	hello_preproc.cpp	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::numpunct
numpunct	hello_preproc.cpp	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::numpunct
decimal_point	hello_preproc.cpp	/^      decimal_point() const$/;"	f	class:std::numpunct
thousands_sep	hello_preproc.cpp	/^      thousands_sep() const$/;"	f	class:std::numpunct
grouping	hello_preproc.cpp	/^      grouping() const$/;"	f	class:std::numpunct
truename	hello_preproc.cpp	/^      truename() const$/;"	f	class:std::numpunct
falsename	hello_preproc.cpp	/^      falsename() const$/;"	f	class:std::numpunct
~numpunct	hello_preproc.cpp	/^      ~numpunct();$/;"	p	class:std::numpunct	file:
do_decimal_point	hello_preproc.cpp	/^      do_decimal_point() const$/;"	f	class:std::numpunct
do_thousands_sep	hello_preproc.cpp	/^      do_thousands_sep() const$/;"	f	class:std::numpunct
do_grouping	hello_preproc.cpp	/^      do_grouping() const$/;"	f	class:std::numpunct
do_truename	hello_preproc.cpp	/^      do_truename() const$/;"	f	class:std::numpunct
do_falsename	hello_preproc.cpp	/^      do_falsename() const$/;"	f	class:std::numpunct
_M_initialize_numpunct	hello_preproc.cpp	/^      _M_initialize_numpunct(__c_locale __cloc = 0);$/;"	p	class:std::numpunct	file:
id	hello_preproc.cpp	/^    locale::id numpunct<_CharT>::id;$/;"	m	class:std::numpunct	file:
~numpunct	hello_preproc.cpp	/^    numpunct<char>::~numpunct();$/;"	p	class:std::numpunct	file:
_M_initialize_numpunct	hello_preproc.cpp	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	file:
~numpunct	hello_preproc.cpp	/^    numpunct<wchar_t>::~numpunct();$/;"	p	class:std::numpunct	file:
_M_initialize_numpunct	hello_preproc.cpp	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	file:
numpunct_byname	hello_preproc.cpp	/^    class numpunct_byname : public numpunct<_CharT>$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::numpunct_byname	file:
string_type	hello_preproc.cpp	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::numpunct_byname	file:
numpunct_byname	hello_preproc.cpp	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname
~numpunct_byname	hello_preproc.cpp	/^      ~numpunct_byname() { }$/;"	f	class:std::numpunct_byname
num_get	hello_preproc.cpp	/^    class num_get : public locale::facet$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::num_get	file:
iter_type	hello_preproc.cpp	/^      typedef _InIter iter_type;$/;"	t	class:std::num_get	file:
id	hello_preproc.cpp	/^      static locale::id id;$/;"	m	class:std::num_get	file:
num_get	hello_preproc.cpp	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	hello_preproc.cpp	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
~num_get	hello_preproc.cpp	/^      virtual ~num_get() { }$/;"	f	class:std::num_get
_M_extract_float	hello_preproc.cpp	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	file:
_M_extract_int	hello_preproc.cpp	/^ _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	file:
_M_find	hello_preproc.cpp	/^ _M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get
_M_find	hello_preproc.cpp	/^ _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	p	class:std::num_get	file:
do_get	hello_preproc.cpp	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;$/;"	p	class:std::num_get	file:
do_get	hello_preproc.cpp	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	file:
do_get	hello_preproc.cpp	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	file:
do_get	hello_preproc.cpp	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;$/;"	p	class:std::num_get	file:
id	hello_preproc.cpp	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	m	class:std::num_get	file:
num_put	hello_preproc.cpp	/^    class num_put : public locale::facet$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::num_put	file:
iter_type	hello_preproc.cpp	/^      typedef _OutIter iter_type;$/;"	t	class:std::num_put	file:
id	hello_preproc.cpp	/^      static locale::id id;$/;"	m	class:std::num_put	file:
num_put	hello_preproc.cpp	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
put	hello_preproc.cpp	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
_M_insert_float	hello_preproc.cpp	/^ _M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	file:
_M_group_float	hello_preproc.cpp	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	file:
_M_insert_int	hello_preproc.cpp	/^ _M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	file:
_M_group_int	hello_preproc.cpp	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	file:
_M_pad	hello_preproc.cpp	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	p	class:std::num_put	file:
~num_put	hello_preproc.cpp	/^      ~num_put() { };$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;$/;"	p	class:std::num_put	file:
do_put	hello_preproc.cpp	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^      do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	file:
do_put	hello_preproc.cpp	/^      do_put(iter_type, ios_base&, char_type, long double) const;$/;"	p	class:std::num_put	file:
do_put	hello_preproc.cpp	/^      do_put(iter_type, ios_base&, char_type, const void*) const;$/;"	p	class:std::num_put	file:
id	hello_preproc.cpp	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	m	class:std::num_put	file:
isspace	hello_preproc.cpp	/^    isspace(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isprint	hello_preproc.cpp	/^    isprint(_CharT __c, const locale& __loc)$/;"	f	namespace:std
iscntrl	hello_preproc.cpp	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isupper	hello_preproc.cpp	/^    isupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std
islower	hello_preproc.cpp	/^    islower(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isalpha	hello_preproc.cpp	/^    isalpha(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isdigit	hello_preproc.cpp	/^    isdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std
ispunct	hello_preproc.cpp	/^    ispunct(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isxdigit	hello_preproc.cpp	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isalnum	hello_preproc.cpp	/^    isalnum(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isgraph	hello_preproc.cpp	/^    isgraph(_CharT __c, const locale& __loc)$/;"	f	namespace:std
toupper	hello_preproc.cpp	/^    toupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std
tolower	hello_preproc.cpp	/^    tolower(_CharT __c, const locale& __loc)$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__use_cache	hello_preproc.cpp	/^    struct __use_cache$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator() (const locale& __loc) const;$/;"	p	struct:std::__use_cache	file:
__use_cache	hello_preproc.cpp	/^    struct __use_cache<__numpunct_cache<_CharT> >$/;"	s	namespace:std	file:
operator ()	hello_preproc.cpp	/^      operator() (const locale& __loc) const$/;"	f	struct:std::__use_cache
_M_cache	hello_preproc.cpp	/^    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)$/;"	f	class:std::__numpunct_cache
__verify_grouping	hello_preproc.cpp	/^  __verify_grouping(const char* __grouping, size_t __grouping_size,$/;"	p	namespace:std	file:
_M_extract_float	hello_preproc.cpp	/^    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,$/;"	f	class:std::num_get
_M_extract_int	hello_preproc.cpp	/^      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^    do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^    do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^    do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^    do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	hello_preproc.cpp	/^    do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
_M_pad	hello_preproc.cpp	/^    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,$/;"	f	class:std::num_put
__int_to_char	hello_preproc.cpp	/^    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,$/;"	f	namespace:std
_M_group_int	hello_preproc.cpp	/^    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,$/;"	f	class:std::num_put
_M_insert_int	hello_preproc.cpp	/^      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,$/;"	f	class:std::num_put
_M_group_float	hello_preproc.cpp	/^    _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	f	class:std::num_put
_M_insert_float	hello_preproc.cpp	/^      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^    do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
do_put	hello_preproc.cpp	/^    do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
_S_pad	hello_preproc.cpp	/^    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,$/;"	f	class:std::__pad
__add_grouping	hello_preproc.cpp	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	f	namespace:std
numpunct	hello_preproc.cpp	/^  extern template class numpunct<char>;$/;"	x	file:
numpunct_byname	hello_preproc.cpp	/^  extern template class numpunct_byname<char>;$/;"	x	file:
num_get	hello_preproc.cpp	/^  extern template class num_get<char>;$/;"	x	file:
num_put	hello_preproc.cpp	/^  extern template class num_put<char>;$/;"	x	file:
ctype_byname	hello_preproc.cpp	/^  extern template class ctype_byname<char>;$/;"	x	file:
use_facet	hello_preproc.cpp	/^    use_facet<ctype<char> >(const locale&);$/;"	p	namespace:std	file:
use_facet	hello_preproc.cpp	/^    use_facet<numpunct<char> >(const locale&);$/;"	p	namespace:std	file:
use_facet	hello_preproc.cpp	/^    use_facet<num_put<char> >(const locale&);$/;"	p	namespace:std	file:
use_facet	hello_preproc.cpp	/^    use_facet<num_get<char> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<ctype<char> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<numpunct<char> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<num_put<char> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<num_get<char> >(const locale&);$/;"	p	namespace:std	file:
numpunct	hello_preproc.cpp	/^  extern template class numpunct<wchar_t>;$/;"	x	file:
numpunct_byname	hello_preproc.cpp	/^  extern template class numpunct_byname<wchar_t>;$/;"	x	file:
num_get	hello_preproc.cpp	/^  extern template class num_get<wchar_t>;$/;"	x	file:
num_put	hello_preproc.cpp	/^  extern template class num_put<wchar_t>;$/;"	x	file:
ctype_byname	hello_preproc.cpp	/^  extern template class ctype_byname<wchar_t>;$/;"	x	file:
use_facet	hello_preproc.cpp	/^    use_facet<ctype<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
use_facet	hello_preproc.cpp	/^    use_facet<numpunct<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
use_facet	hello_preproc.cpp	/^    use_facet<num_put<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
use_facet	hello_preproc.cpp	/^    use_facet<num_get<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<ctype<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<numpunct<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<num_put<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
has_facet	hello_preproc.cpp	/^    has_facet<num_get<wchar_t> >(const locale&);$/;"	p	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__check_facet	hello_preproc.cpp	/^    __check_facet(const _Facet* __f)$/;"	f	namespace:std
basic_ios	hello_preproc.cpp	/^    class basic_ios : public ios_base$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::basic_ios	file:
int_type	hello_preproc.cpp	/^      typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_ios	file:
pos_type	hello_preproc.cpp	/^      typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_ios	file:
off_type	hello_preproc.cpp	/^      typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_ios	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::basic_ios	file:
__ctype_type	hello_preproc.cpp	/^      typedef ctype<_CharT> __ctype_type;$/;"	t	class:std::basic_ios	file:
__num_put_type	hello_preproc.cpp	/^           __num_put_type;$/;"	t	class:std::basic_ios	file:
__num_get_type	hello_preproc.cpp	/^           __num_get_type;$/;"	t	class:std::basic_ios	file:
_M_tie	hello_preproc.cpp	/^      basic_ostream<_CharT, _Traits>* _M_tie;$/;"	m	class:std::basic_ios	file:
_M_fill	hello_preproc.cpp	/^      mutable char_type _M_fill;$/;"	m	class:std::basic_ios	file:
_M_fill_init	hello_preproc.cpp	/^      mutable bool _M_fill_init;$/;"	m	class:std::basic_ios	file:
_M_streambuf	hello_preproc.cpp	/^      basic_streambuf<_CharT, _Traits>* _M_streambuf;$/;"	m	class:std::basic_ios	file:
_M_ctype	hello_preproc.cpp	/^      const __ctype_type* _M_ctype;$/;"	m	class:std::basic_ios	file:
_M_num_put	hello_preproc.cpp	/^      const __num_put_type* _M_num_put;$/;"	m	class:std::basic_ios	file:
_M_num_get	hello_preproc.cpp	/^      const __num_get_type* _M_num_get;$/;"	m	class:std::basic_ios	file:
operator void*	hello_preproc.cpp	/^      operator void*() const$/;"	f	class:std::basic_ios
operator !	hello_preproc.cpp	/^      operator!() const$/;"	f	class:std::basic_ios
rdstate	hello_preproc.cpp	/^      rdstate() const$/;"	f	class:std::basic_ios
clear	hello_preproc.cpp	/^      clear(iostate __state = goodbit);$/;"	p	class:std::basic_ios	file:
setstate	hello_preproc.cpp	/^      setstate(iostate __state)$/;"	f	class:std::basic_ios
_M_setstate	hello_preproc.cpp	/^      _M_setstate(iostate __state)$/;"	f	class:std::basic_ios
good	hello_preproc.cpp	/^      good() const$/;"	f	class:std::basic_ios
eof	hello_preproc.cpp	/^      eof() const$/;"	f	class:std::basic_ios
fail	hello_preproc.cpp	/^      fail() const$/;"	f	class:std::basic_ios
bad	hello_preproc.cpp	/^      bad() const$/;"	f	class:std::basic_ios
exceptions	hello_preproc.cpp	/^      exceptions() const$/;"	f	class:std::basic_ios
exceptions	hello_preproc.cpp	/^      exceptions(iostate __except)$/;"	f	class:std::basic_ios
basic_ios	hello_preproc.cpp	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios
~basic_ios	hello_preproc.cpp	/^      ~basic_ios() { }$/;"	f	class:std::basic_ios
tie	hello_preproc.cpp	/^      tie() const$/;"	f	class:std::basic_ios
tie	hello_preproc.cpp	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	f	class:std::basic_ios
rdbuf	hello_preproc.cpp	/^      rdbuf() const$/;"	f	class:std::basic_ios
rdbuf	hello_preproc.cpp	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	file:
copyfmt	hello_preproc.cpp	/^      copyfmt(const basic_ios& __rhs);$/;"	p	class:std::basic_ios	file:
fill	hello_preproc.cpp	/^      fill() const$/;"	f	class:std::basic_ios
fill	hello_preproc.cpp	/^      fill(char_type __ch)$/;"	f	class:std::basic_ios
imbue	hello_preproc.cpp	/^      imbue(const locale& __loc);$/;"	p	class:std::basic_ios	file:
narrow	hello_preproc.cpp	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::basic_ios
widen	hello_preproc.cpp	/^      widen(char __c) const$/;"	f	class:std::basic_ios
basic_ios	hello_preproc.cpp	/^      basic_ios()$/;"	f	class:std::basic_ios
init	hello_preproc.cpp	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	file:
_M_cache_locale	hello_preproc.cpp	/^      _M_cache_locale(const locale& __loc);$/;"	p	class:std::basic_ios	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
clear	hello_preproc.cpp	/^    basic_ios<_CharT, _Traits>::clear(iostate __state)$/;"	f	class:std::basic_ios
rdbuf	hello_preproc.cpp	/^    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios
copyfmt	hello_preproc.cpp	/^    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)$/;"	f	class:std::basic_ios
imbue	hello_preproc.cpp	/^    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)$/;"	f	class:std::basic_ios
init	hello_preproc.cpp	/^    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios
_M_cache_locale	hello_preproc.cpp	/^    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)$/;"	f	class:std::basic_ios
basic_ios	hello_preproc.cpp	/^  extern template class basic_ios<char>;$/;"	x	file:
basic_ios	hello_preproc.cpp	/^  extern template class basic_ios<wchar_t>;$/;"	x	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
basic_ostream	hello_preproc.cpp	/^    class basic_ostream : virtual public basic_ios<_CharT, _Traits>$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::basic_ostream	file:
int_type	hello_preproc.cpp	/^      typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_ostream	file:
pos_type	hello_preproc.cpp	/^      typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_ostream	file:
off_type	hello_preproc.cpp	/^      typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_ostream	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::basic_ostream	file:
__streambuf_type	hello_preproc.cpp	/^      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;$/;"	t	class:std::basic_ostream	file:
__ios_type	hello_preproc.cpp	/^      typedef basic_ios<_CharT, _Traits> __ios_type;$/;"	t	class:std::basic_ostream	file:
__ostream_type	hello_preproc.cpp	/^      typedef basic_ostream<_CharT, _Traits> __ostream_type;$/;"	t	class:std::basic_ostream	file:
__num_put_type	hello_preproc.cpp	/^             __num_put_type;$/;"	t	class:std::basic_ostream	file:
__ctype_type	hello_preproc.cpp	/^      typedef ctype<_CharT> __ctype_type;$/;"	t	class:std::basic_ostream	file:
basic_ostream	hello_preproc.cpp	/^      basic_ostream(__streambuf_type* __sb)$/;"	f	class:std::basic_ostream
~basic_ostream	hello_preproc.cpp	/^      ~basic_ostream() { }$/;"	f	class:std::basic_ostream
sentry	hello_preproc.cpp	/^      class sentry;$/;"	x	file:
sentry	hello_preproc.cpp	/^      friend class sentry;$/;"	x	file:
__pf	hello_preproc.cpp	/^      operator<<(__ostream_type& (*__pf)(__ostream_type&))$/;"	f	class:std::basic_ostream
__pf	hello_preproc.cpp	/^      operator<<(__ios_type& (*__pf)(__ios_type&))$/;"	f	class:std::basic_ostream
__pf	hello_preproc.cpp	/^      operator<<(ios_base& (*__pf) (ios_base&))$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(long __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(unsigned long __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(bool __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(short __n);$/;"	p	class:std::basic_ostream	file:
operator <<	hello_preproc.cpp	/^      operator<<(unsigned short __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(int __n);$/;"	p	class:std::basic_ostream	file:
operator <<	hello_preproc.cpp	/^      operator<<(unsigned int __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(long long __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(unsigned long long __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(double __f)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(float __f)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(long double __f)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(const void* __p)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^      operator<<(__streambuf_type* __sb);$/;"	p	class:std::basic_ostream	file:
put	hello_preproc.cpp	/^      put(char_type __c);$/;"	p	class:std::basic_ostream	file:
_M_write	hello_preproc.cpp	/^      _M_write(const char_type* __s, streamsize __n)$/;"	f	class:std::basic_ostream
write	hello_preproc.cpp	/^      write(const char_type* __s, streamsize __n);$/;"	p	class:std::basic_ostream	file:
flush	hello_preproc.cpp	/^      flush();$/;"	p	class:std::basic_ostream	file:
tellp	hello_preproc.cpp	/^      tellp();$/;"	p	class:std::basic_ostream	file:
seekp	hello_preproc.cpp	/^      seekp(pos_type);$/;"	p	class:std::basic_ostream	file:
seekp	hello_preproc.cpp	/^      seekp(off_type, ios_base::seekdir);$/;"	p	class:std::basic_ostream	file:
basic_ostream	hello_preproc.cpp	/^      basic_ostream()$/;"	f	class:std::basic_ostream
_M_insert	hello_preproc.cpp	/^ _M_insert(_ValueT __v);$/;"	p	class:std::basic_ostream	file:
sentry	hello_preproc.cpp	/^    class basic_ostream<_CharT, _Traits>::sentry$/;"	c	class:std::basic_ostream	file:
_M_ok	hello_preproc.cpp	/^      bool _M_ok;$/;"	m	class:std::basic_ostream::sentry	file:
_M_os	hello_preproc.cpp	/^      basic_ostream<_CharT, _Traits>& _M_os;$/;"	m	class:std::basic_ostream::sentry	file:
sentry	hello_preproc.cpp	/^      sentry(basic_ostream<_CharT, _Traits>& __os);$/;"	p	class:std::basic_ostream::sentry	file:
~sentry	hello_preproc.cpp	/^      ~sentry()$/;"	f	class:std::basic_ostream::sentry
operator bool	hello_preproc.cpp	/^      operator bool() const$/;"	f	class:std::basic_ostream::sentry
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<char, _Traits>& __out, char __c)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)$/;"	f	namespace:std
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)$/;"	f	namespace:std
endl	hello_preproc.cpp	/^    endl(basic_ostream<_CharT, _Traits>& __os)$/;"	f	namespace:std
ends	hello_preproc.cpp	/^    ends(basic_ostream<_CharT, _Traits>& __os)$/;"	f	namespace:std
flush	hello_preproc.cpp	/^    flush(basic_ostream<_CharT, _Traits>& __os)$/;"	f	namespace:std
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
sentry	hello_preproc.cpp	/^    sentry(basic_ostream<_CharT, _Traits>& __os)$/;"	f	class:std::basic_ostream::sentry
_M_insert	hello_preproc.cpp	/^      _M_insert(_ValueT __v)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^    operator<<(short __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^    operator<<(int __n)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^    operator<<(__streambuf_type* __sbin)$/;"	f	class:std::basic_ostream
put	hello_preproc.cpp	/^    put(char_type __c)$/;"	f	class:std::basic_ostream
write	hello_preproc.cpp	/^    write(const _CharT* __s, streamsize __n)$/;"	f	class:std::basic_ostream
flush	hello_preproc.cpp	/^    flush()$/;"	f	class:std::basic_ostream
tellp	hello_preproc.cpp	/^    tellp()$/;"	f	class:std::basic_ostream
seekp	hello_preproc.cpp	/^    seekp(pos_type __pos)$/;"	f	class:std::basic_ostream
seekp	hello_preproc.cpp	/^    seekp(off_type __off, ios_base::seekdir __dir)$/;"	f	class:std::basic_ostream
operator <<	hello_preproc.cpp	/^    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)$/;"	f	namespace:std
basic_ostream	hello_preproc.cpp	/^  extern template class basic_ostream<char>;$/;"	x	file:
endl	hello_preproc.cpp	/^  extern template ostream& endl(ostream&);$/;"	p	namespace:std	file:
ends	hello_preproc.cpp	/^  extern template ostream& ends(ostream&);$/;"	p	namespace:std	file:
flush	hello_preproc.cpp	/^  extern template ostream& flush(ostream&);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template ostream& operator<<(ostream&, char);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template ostream& operator<<(ostream&, unsigned char);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template ostream& operator<<(ostream&, signed char);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template ostream& operator<<(ostream&, const char*);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template ostream& operator<<(ostream&, const unsigned char*);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template ostream& operator<<(ostream&, const signed char*);$/;"	p	namespace:std	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(long);$/;"	p	class:std::ostream	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(unsigned long);$/;"	p	class:std::ostream	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(bool);$/;"	p	class:std::ostream	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(long long);$/;"	p	class:std::ostream	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(unsigned long long);$/;"	p	class:std::ostream	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(double);$/;"	p	class:std::ostream	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(long double);$/;"	p	class:std::ostream	file:
_M_insert	hello_preproc.cpp	/^  extern template ostream& ostream::_M_insert(const void*);$/;"	p	class:std::ostream	file:
basic_ostream	hello_preproc.cpp	/^  extern template class basic_ostream<wchar_t>;$/;"	x	file:
endl	hello_preproc.cpp	/^  extern template wostream& endl(wostream&);$/;"	p	namespace:std	file:
ends	hello_preproc.cpp	/^  extern template wostream& ends(wostream&);$/;"	p	namespace:std	file:
flush	hello_preproc.cpp	/^  extern template wostream& flush(wostream&);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template wostream& operator<<(wostream&, wchar_t);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template wostream& operator<<(wostream&, char);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template wostream& operator<<(wostream&, const wchar_t*);$/;"	p	namespace:std	file:
operator <<	hello_preproc.cpp	/^  extern template wostream& operator<<(wostream&, const char*);$/;"	p	namespace:std	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(long);$/;"	p	class:std::wostream	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(unsigned long);$/;"	p	class:std::wostream	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(bool);$/;"	p	class:std::wostream	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(long long);$/;"	p	class:std::wostream	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(unsigned long long);$/;"	p	class:std::wostream	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(double);$/;"	p	class:std::wostream	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(long double);$/;"	p	class:std::wostream	file:
_M_insert	hello_preproc.cpp	/^  extern template wostream& wostream::_M_insert(const void*);$/;"	p	class:std::wostream	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
basic_istream	hello_preproc.cpp	/^    class basic_istream : virtual public basic_ios<_CharT, _Traits>$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::basic_istream	file:
int_type	hello_preproc.cpp	/^      typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_istream	file:
pos_type	hello_preproc.cpp	/^      typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_istream	file:
off_type	hello_preproc.cpp	/^      typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_istream	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::basic_istream	file:
__streambuf_type	hello_preproc.cpp	/^      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;$/;"	t	class:std::basic_istream	file:
__ios_type	hello_preproc.cpp	/^      typedef basic_ios<_CharT, _Traits> __ios_type;$/;"	t	class:std::basic_istream	file:
__istream_type	hello_preproc.cpp	/^      typedef basic_istream<_CharT, _Traits> __istream_type;$/;"	t	class:std::basic_istream	file:
__num_get_type	hello_preproc.cpp	/^        __num_get_type;$/;"	t	class:std::basic_istream	file:
__ctype_type	hello_preproc.cpp	/^      typedef ctype<_CharT> __ctype_type;$/;"	t	class:std::basic_istream	file:
_M_gcount	hello_preproc.cpp	/^      streamsize _M_gcount;$/;"	m	class:std::basic_istream	file:
basic_istream	hello_preproc.cpp	/^      basic_istream(__streambuf_type* __sb)$/;"	f	class:std::basic_istream
~basic_istream	hello_preproc.cpp	/^      ~basic_istream()$/;"	f	class:std::basic_istream
sentry	hello_preproc.cpp	/^      class sentry;$/;"	x	file:
sentry	hello_preproc.cpp	/^      friend class sentry;$/;"	x	file:
__pf	hello_preproc.cpp	/^      operator>>(__istream_type& (*__pf)(__istream_type&))$/;"	f	class:std::basic_istream
__pf	hello_preproc.cpp	/^      operator>>(__ios_type& (*__pf)(__ios_type&))$/;"	f	class:std::basic_istream
__pf	hello_preproc.cpp	/^      operator>>(ios_base& (*__pf)(ios_base&))$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(bool& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(short& __n);$/;"	p	class:std::basic_istream	file:
operator >>	hello_preproc.cpp	/^      operator>>(unsigned short& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(int& __n);$/;"	p	class:std::basic_istream	file:
operator >>	hello_preproc.cpp	/^      operator>>(unsigned int& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(long& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(unsigned long& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(long long& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(unsigned long long& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(float& __f)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(double& __f)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(long double& __f)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(void*& __p)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^      operator>>(__streambuf_type* __sb);$/;"	p	class:std::basic_istream	file:
gcount	hello_preproc.cpp	/^      gcount() const$/;"	f	class:std::basic_istream
get	hello_preproc.cpp	/^      get();$/;"	p	class:std::basic_istream	file:
get	hello_preproc.cpp	/^      get(char_type& __c);$/;"	p	class:std::basic_istream	file:
get	hello_preproc.cpp	/^      get(char_type* __s, streamsize __n, char_type __delim);$/;"	p	class:std::basic_istream	file:
get	hello_preproc.cpp	/^      get(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
get	hello_preproc.cpp	/^      get(__streambuf_type& __sb, char_type __delim);$/;"	p	class:std::basic_istream	file:
get	hello_preproc.cpp	/^      get(__streambuf_type& __sb)$/;"	f	class:std::basic_istream
getline	hello_preproc.cpp	/^      getline(char_type* __s, streamsize __n, char_type __delim);$/;"	p	class:std::basic_istream	file:
getline	hello_preproc.cpp	/^      getline(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
ignore	hello_preproc.cpp	/^      ignore(streamsize __n, int_type __delim);$/;"	p	class:std::basic_istream	file:
ignore	hello_preproc.cpp	/^      ignore(streamsize __n);$/;"	p	class:std::basic_istream	file:
ignore	hello_preproc.cpp	/^      ignore();$/;"	p	class:std::basic_istream	file:
peek	hello_preproc.cpp	/^      peek();$/;"	p	class:std::basic_istream	file:
read	hello_preproc.cpp	/^      read(char_type* __s, streamsize __n);$/;"	p	class:std::basic_istream	file:
readsome	hello_preproc.cpp	/^      readsome(char_type* __s, streamsize __n);$/;"	p	class:std::basic_istream	file:
putback	hello_preproc.cpp	/^      putback(char_type __c);$/;"	p	class:std::basic_istream	file:
unget	hello_preproc.cpp	/^      unget();$/;"	p	class:std::basic_istream	file:
sync	hello_preproc.cpp	/^      sync();$/;"	p	class:std::basic_istream	file:
tellg	hello_preproc.cpp	/^      tellg();$/;"	p	class:std::basic_istream	file:
seekg	hello_preproc.cpp	/^      seekg(pos_type);$/;"	p	class:std::basic_istream	file:
seekg	hello_preproc.cpp	/^      seekg(off_type, ios_base::seekdir);$/;"	p	class:std::basic_istream	file:
basic_istream	hello_preproc.cpp	/^      basic_istream()$/;"	f	class:std::basic_istream
_M_extract	hello_preproc.cpp	/^ _M_extract(_ValueT& __v);$/;"	p	class:std::basic_istream	file:
getline	hello_preproc.cpp	/^    getline(char_type* __s, streamsize __n, char_type __delim);$/;"	p	class:std::basic_istream	file:
ignore	hello_preproc.cpp	/^    ignore(streamsize __n);$/;"	p	class:std::basic_istream	file:
ignore	hello_preproc.cpp	/^    ignore(streamsize __n, int_type __delim);$/;"	p	class:std::basic_istream	file:
getline	hello_preproc.cpp	/^    getline(char_type* __s, streamsize __n, char_type __delim);$/;"	p	class:std::basic_istream	file:
ignore	hello_preproc.cpp	/^    ignore(streamsize __n);$/;"	p	class:std::basic_istream	file:
ignore	hello_preproc.cpp	/^    ignore(streamsize __n, int_type __delim);$/;"	p	class:std::basic_istream	file:
sentry	hello_preproc.cpp	/^    class basic_istream<_CharT, _Traits>::sentry$/;"	c	class:std::basic_istream	file:
_M_ok	hello_preproc.cpp	/^      bool _M_ok;$/;"	m	class:std::basic_istream::sentry	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::basic_istream::sentry	file:
__streambuf_type	hello_preproc.cpp	/^      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;$/;"	t	class:std::basic_istream::sentry	file:
__istream_type	hello_preproc.cpp	/^      typedef basic_istream<_CharT, _Traits> __istream_type;$/;"	t	class:std::basic_istream::sentry	file:
__ctype_type	hello_preproc.cpp	/^      typedef typename __istream_type::__ctype_type __ctype_type;$/;"	t	class:std::basic_istream::sentry	file:
__int_type	hello_preproc.cpp	/^      typedef typename _Traits::int_type __int_type;$/;"	t	class:std::basic_istream::sentry	file:
sentry	hello_preproc.cpp	/^      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);$/;"	p	class:std::basic_istream::sentry	file:
operator bool	hello_preproc.cpp	/^      operator bool() const$/;"	f	class:std::basic_istream::sentry
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)$/;"	f	namespace:std
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)$/;"	f	namespace:std
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<char>& __in, char* __s);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)$/;"	f	namespace:std
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)$/;"	f	namespace:std
basic_iostream	hello_preproc.cpp	/^    class basic_iostream$/;"	c	namespace:std	file:
char_type	hello_preproc.cpp	/^      typedef _CharT char_type;$/;"	t	class:std::basic_iostream	file:
int_type	hello_preproc.cpp	/^      typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_iostream	file:
pos_type	hello_preproc.cpp	/^      typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_iostream	file:
off_type	hello_preproc.cpp	/^      typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_iostream	file:
traits_type	hello_preproc.cpp	/^      typedef _Traits traits_type;$/;"	t	class:std::basic_iostream	file:
__istream_type	hello_preproc.cpp	/^      typedef basic_istream<_CharT, _Traits> __istream_type;$/;"	t	class:std::basic_iostream	file:
__ostream_type	hello_preproc.cpp	/^      typedef basic_ostream<_CharT, _Traits> __ostream_type;$/;"	t	class:std::basic_iostream	file:
basic_iostream	hello_preproc.cpp	/^      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_iostream
~basic_iostream	hello_preproc.cpp	/^      ~basic_iostream() { }$/;"	f	class:std::basic_iostream
basic_iostream	hello_preproc.cpp	/^      basic_iostream()$/;"	f	class:std::basic_iostream
ws	hello_preproc.cpp	/^    ws(basic_istream<_CharT, _Traits>& __is);$/;"	p	namespace:std	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
sentry	hello_preproc.cpp	/^    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)$/;"	f	class:std::basic_istream::sentry
_M_extract	hello_preproc.cpp	/^      _M_extract(_ValueT& __v)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^    operator>>(short& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^    operator>>(int& __n)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^    operator>>(__streambuf_type* __sbout)$/;"	f	class:std::basic_istream
get	hello_preproc.cpp	/^    get(void)$/;"	f	class:std::basic_istream
get	hello_preproc.cpp	/^    get(char_type& __c)$/;"	f	class:std::basic_istream
get	hello_preproc.cpp	/^    get(char_type* __s, streamsize __n, char_type __delim)$/;"	f	class:std::basic_istream
get	hello_preproc.cpp	/^    get(__streambuf_type& __sb, char_type __delim)$/;"	f	class:std::basic_istream
getline	hello_preproc.cpp	/^    getline(char_type* __s, streamsize __n, char_type __delim)$/;"	f	class:std::basic_istream
ignore	hello_preproc.cpp	/^    ignore(void)$/;"	f	class:std::basic_istream
ignore	hello_preproc.cpp	/^    ignore(streamsize __n)$/;"	f	class:std::basic_istream
ignore	hello_preproc.cpp	/^    ignore(streamsize __n, int_type __delim)$/;"	f	class:std::basic_istream
peek	hello_preproc.cpp	/^    peek(void)$/;"	f	class:std::basic_istream
read	hello_preproc.cpp	/^    read(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
readsome	hello_preproc.cpp	/^    readsome(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
putback	hello_preproc.cpp	/^    putback(char_type __c)$/;"	f	class:std::basic_istream
unget	hello_preproc.cpp	/^    unget(void)$/;"	f	class:std::basic_istream
sync	hello_preproc.cpp	/^    sync(void)$/;"	f	class:std::basic_istream
tellg	hello_preproc.cpp	/^    tellg(void)$/;"	f	class:std::basic_istream
seekg	hello_preproc.cpp	/^    seekg(pos_type __pos)$/;"	f	class:std::basic_istream
seekg	hello_preproc.cpp	/^    seekg(off_type __off, ios_base::seekdir __dir)$/;"	f	class:std::basic_istream
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)$/;"	f	namespace:std
operator >>	hello_preproc.cpp	/^    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)$/;"	f	namespace:std
ws	hello_preproc.cpp	/^    ws(basic_istream<_CharT, _Traits>& __in)$/;"	f	namespace:std
basic_istream	hello_preproc.cpp	/^  extern template class basic_istream<char>;$/;"	x	file:
ws	hello_preproc.cpp	/^  extern template istream& ws(istream&);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template istream& operator>>(istream&, char&);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template istream& operator>>(istream&, char*);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template istream& operator>>(istream&, unsigned char&);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template istream& operator>>(istream&, signed char&);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template istream& operator>>(istream&, unsigned char*);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template istream& operator>>(istream&, signed char*);$/;"	p	namespace:std	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(unsigned short&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(unsigned int&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(long&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(unsigned long&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(bool&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(long long&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(unsigned long long&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(float&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(double&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(long double&);$/;"	p	class:std::istream	file:
_M_extract	hello_preproc.cpp	/^  extern template istream& istream::_M_extract(void*&);$/;"	p	class:std::istream	file:
basic_iostream	hello_preproc.cpp	/^  extern template class basic_iostream<char>;$/;"	x	file:
basic_istream	hello_preproc.cpp	/^  extern template class basic_istream<wchar_t>;$/;"	x	file:
ws	hello_preproc.cpp	/^  extern template wistream& ws(wistream&);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template wistream& operator>>(wistream&, wchar_t&);$/;"	p	namespace:std	file:
operator >>	hello_preproc.cpp	/^  extern template wistream& operator>>(wistream&, wchar_t*);$/;"	p	namespace:std	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(unsigned short&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(unsigned int&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(long&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(unsigned long&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(bool&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(long long&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(unsigned long long&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(float&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(double&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(long double&);$/;"	p	class:std::wistream	file:
_M_extract	hello_preproc.cpp	/^  extern template wistream& wistream::_M_extract(void*&);$/;"	p	class:std::wistream	file:
basic_iostream	hello_preproc.cpp	/^  extern template class basic_iostream<wchar_t>;$/;"	x	file:
std	hello_preproc.cpp	/^namespace std __attribute__ ((__visibility__ ("default")))$/;"	n	file:
__ioinit	hello_preproc.cpp	/^  static ios_base::Init __ioinit;$/;"	m	namespace:std	file:
main	hello_preproc.cpp	/^int main()$/;"	f
main	i_incr.decr.cpp	/^int main()$/;"	f
main	init.cpp	/^int main()$/;"	f
main	int_test.cpp	/^int main() {$/;"	f
foo	intmin.c	/^int foo (int a, int b)$/;"	f
main	intmin.c	/^int main (void)$/;"	f
inv_sqrt	inverted_sqrt.hpp	/^float inv_sqrt(float x)$/;"	f
main	lead_arr.cpp	/^int main() {$/;"	f
main	letter.cpp	/^int main() {$/;"	f
main	letter_2.cpp	/^int main() {$/;"	f
node	linked_list.c	/^struct node {$/;"	s	file:
value	linked_list.c	/^    int value;$/;"	m	struct:node	file:
next	linked_list.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node	file:
add_node	linked_list.c	/^struct node *add_node(struct node *root, int value)$/;"	f
print_list	linked_list.c	/^void print_list(struct node *root)$/;"	f
free_list	linked_list.c	/^void free_list(struct node *root)$/;"	f
delete_from_list	linked_list.c	/^struct node *delete_from_list(struct node *root, int value)$/;"	f
main	linked_list.c	/^int main()$/;"	f
LockFactory	lockLoop.java	/^public class LockFactory {$/;"	c
instance	lockLoop.java	/^    private static LockFactory instance;$/;"	f	class:LockFactory	file:
numberOfLocks	lockLoop.java	/^    private int numberOfLocks = 5; \/* по умолчанию *\/$/;"	f	class:LockFactory	file:
locks	lockLoop.java	/^    private LockNode[] locks;$/;"	f	class:LockFactory	file:
lockOrder	lockLoop.java	/^    private Hashtable<Integer, LinkedList<LockNode>> lockOrder;$/;"	f	class:LockFactory	file:
LockFactory	lockLoop.java	/^    private LockFactory(int count) { \/* ... *\/ }$/;"	m	class:LockFactory	file:
getInstance	lockLoop.java	/^    public static LockFactory getInstance() { return instance; }$/;"	m	class:LockFactory
initialize	lockLoop.java	/^    public static synchronized LockFactory initialize(int count) {$/;"	m	class:LockFactory
hasCycle	lockLoop.java	/^    public boolean hasCycle(Hashtable<Integer, Boolean> touchedNodes, int[] resourcesInOrder) {$/;"	m	class:LockFactory
declare	lockLoop.java	/^    public boolean declare(int ownerId, int[] resourcesInOrder) {$/;"	m	class:LockFactory
getLock	lockLoop.java	/^    public Lock getLock(int ownerld, int resourceID) {$/;"	m	class:LockFactory
LockNode	lockLoop.java	/^public class LockNode {$/;"	c
VisitState	lockLoop.java	/^    public enum VisitState { FRESH, VISITING, VISITED };$/;"	g	class:LockNode
FRESH	lockLoop.java	/^    public enum VisitState { FRESH, VISITING, VISITED };$/;"	e	enum:LockNode.VisitState	file:
VISITING	lockLoop.java	/^    public enum VisitState { FRESH, VISITING, VISITED };$/;"	e	enum:LockNode.VisitState	file:
VISITED	lockLoop.java	/^    public enum VisitState { FRESH, VISITING, VISITED };$/;"	e	enum:LockNode.VisitState	file:
children	lockLoop.java	/^    private ArrayList<LockNode> children;$/;"	f	class:LockNode	file:
lockId	lockLoop.java	/^    private int lockId;$/;"	f	class:LockNode	file:
lock	lockLoop.java	/^    private Lock lock;$/;"	f	class:LockNode	file:
maxLocks	lockLoop.java	/^    private int maxLocks;$/;"	f	class:LockNode	file:
LockNode	lockLoop.java	/^    public LockNode(int id, int max) { \/* ... *\/ }$/;"	m	class:LockNode
joinTo	lockLoop.java	/^    public void joinTo(LockNode node) { children.add(node); }$/;"	m	class:LockNode
remove	lockLoop.java	/^    public void remove(LockNode node) { children.remove(node); }$/;"	m	class:LockNode
hasCycle	lockLoop.java	/^    public boolean hasCycle(Hashtable<Integer, Boolean> touchedNodes) {$/;"	m	class:LockNode
hasCycle	lockLoop.java	/^    private boolean hasCycle(VisitState[] visited,$/;"	m	class:LockNode	file:
getLock	lockLoop.java	/^    public Lock getLock() {$/;"	m	class:LockNode
getId	lockLoop.java	/^    public int getId() { return lockId; }$/;"	m	class:LockNode
square	main_preprocessed.cpp	/^int square(int x);$/;"	p	file:
main	main_preprocessed.cpp	/^int main()$/;"	f
main	main_square.cpp	/^int main()$/;"	f
max_element	max_el.cpp	/^bool max_element (int* p, int* q, int** res)$/;"	f
main	max_el.cpp	/^int main()$/;"	f
main	mem_align.c	/^int main(void)$/;"	f
account_not_exist	money.cpp	/^class account_not_exist : public logic_error$/;"	c	file:
account_not_exist	money.cpp	/^    account_not_exist()$/;"	f	class:account_not_exist
currencies	money.cpp	/^enum currencies {$/;"	g	file:
RUR	money.cpp	/^    RUR,$/;"	e	enum:currencies	file:
USD	money.cpp	/^    USD,$/;"	e	enum:currencies	file:
EUR	money.cpp	/^    EUR$/;"	e	enum:currencies	file:
money	money.cpp	/^class money$/;"	c	file:
money	money.cpp	/^    explicit money(double summa = 0.0, currencies currency = RUR) throw (invalid_argument);$/;"	p	class:money	file:
money	money.cpp	/^    money(unsigned int int_part, unsigned char fract_part, currencies currency = RUR);$/;"	p	class:money	file:
getCurrency	money.cpp	/^    currencies getCurrency();$/;"	p	class:money	file:
setCurrency	money.cpp	/^    void setCurrency(currencies currency);$/;"	p	class:money	file:
_int_part	money.cpp	/^    unsigned int _int_part;$/;"	m	class:money	file:
_fract_part	money.cpp	/^    unsigned char _fract_part;$/;"	m	class:money	file:
_currency	money.cpp	/^    currencies _currency;$/;"	m	class:money	file:
smallChange	money.cpp	/^    unsigned long long smallChange() const;$/;"	p	class:money	file:
operator +	money.cpp	/^    friend money operator+(const money& left, const money& right);$/;"	p	class:money	file:
operator -	money.cpp	/^    friend money operator-(const money& left, const money& right) throw (invalid_argument);$/;"	p	class:money	file:
operator *	money.cpp	/^    friend money operator*(const money& left, double right);$/;"	p	class:money	file:
operator *	money.cpp	/^    friend money operator*(double left, const money& right);$/;"	p	class:money	file:
operator <	money.cpp	/^    friend bool  operator<(const money& left, const money& right);$/;"	p	class:money	file:
operator &	money.cpp	/^    friend bool  operator&(const money& left, const money& right);$/;"	p	class:money	file:
operator <<	money.cpp	/^    friend wostream & operator<<(wostream& stream, const money& right);$/;"	p	class:money	file:
operator >>	money.cpp	/^    friend wistream & operator>>(wistream& stream, money& right);$/;"	p	class:money	file:
exchanger	money.cpp	/^    friend class exchanger;$/;"	x	file:
exchanger	money.cpp	/^class exchanger$/;"	c	file:
exchange	money.cpp	/^    static money exchange(const money& summa, currencies currency);$/;"	p	class:exchanger	file:
_rates	money.cpp	/^    static map<currencies, double> _rates;$/;"	m	class:exchanger	file:
rate_pair	money.cpp	/^typedef pair<currencies, double> rate_pair;$/;"	t	file:
rates_arr	money.cpp	/^rate_pair rates_arr[3] = {rate_pair(RUR, 1.0), rate_pair(USD, 30.1851), rate_pair(EUR, 43.4605)};$/;"	v
_rates	money.cpp	/^map<currencies, double> exchanger::_rates(rates_arr, rates_arr + sizeof (rates_arr) \/ sizeof (rate_pair));$/;"	p	class:exchanger	file:
currency_name_pair	money.cpp	/^typedef pair<currencies, wstring> currency_name_pair;$/;"	t	file:
currencies_names_arr	money.cpp	/^currency_name_pair currencies_names_arr[3] = {currency_name_pair(RUR, L"RUR"), currency_name_pair(USD, L"USD"), currency_name_pair(EUR, L"EUR")};$/;"	v
currency_names	money.cpp	/^map<currencies, wstring> currency_names(currencies_names_arr, currencies_names_arr + sizeof (currencies_names_arr) \/ sizeof (currency_name_pair));$/;"	p	file:
account	money.cpp	/^class account$/;"	c	file:
acc_num_type	money.cpp	/^    typedef unsigned int acc_num_type;$/;"	t	class:account	file:
account	money.cpp	/^    account(const wstring& surname, acc_num_type account_num, double percent = 0.0,$/;"	p	class:account	file:
setOwner	money.cpp	/^    void setOwner(const wstring& surname);$/;"	p	class:account	file:
getOwner	money.cpp	/^    const wstring& getOwner() const;$/;"	p	class:account	file:
withdrawMoney	money.cpp	/^    bool withdrawMoney(const money& summa);$/;"	p	class:account	file:
depositMoney	money.cpp	/^    void depositMoney(const money& summa);$/;"	p	class:account	file:
thatInterest	money.cpp	/^    void thatInterest();$/;"	p	class:account	file:
exchangeTo	money.cpp	/^    void exchangeTo(currencies currency);$/;"	p	class:account	file:
getCash	money.cpp	/^    money getCash() const;$/;"	p	class:account	file:
_surname	money.cpp	/^    wstring _surname;$/;"	m	class:account	file:
_account_num	money.cpp	/^    acc_num_type _account_num;$/;"	m	class:account	file:
_percent	money.cpp	/^    double _percent;$/;"	m	class:account	file:
_cash	money.cpp	/^    money _cash;$/;"	m	class:account	file:
operator <<	money.cpp	/^    friend wostream & operator<<(wostream& stream, const account& right);$/;"	p	class:account	file:
user_choice	money.cpp	/^enum user_choice$/;"	g	file:
CREATE	money.cpp	/^    CREATE,$/;"	e	enum:user_choice	file:
CHANGE_OWNER	money.cpp	/^    CHANGE_OWNER,$/;"	e	enum:user_choice	file:
WITHDRAW_MONEY	money.cpp	/^    WITHDRAW_MONEY,$/;"	e	enum:user_choice	file:
DEPOSIT_MONEY	money.cpp	/^    DEPOSIT_MONEY,$/;"	e	enum:user_choice	file:
THAT_INTEREST	money.cpp	/^    THAT_INTEREST,$/;"	e	enum:user_choice	file:
EXCHANGE_TO_RUR	money.cpp	/^    EXCHANGE_TO_RUR,$/;"	e	enum:user_choice	file:
EXCHANGE_TO_USD	money.cpp	/^    EXCHANGE_TO_USD,$/;"	e	enum:user_choice	file:
EXCHANGE_TO_EUR	money.cpp	/^    EXCHANGE_TO_EUR,$/;"	e	enum:user_choice	file:
PRINT	money.cpp	/^    PRINT,$/;"	e	enum:user_choice	file:
EXIT	money.cpp	/^    EXIT$/;"	e	enum:user_choice	file:
menu	money.cpp	/^user_choice menu();$/;"	p	file:
createAccount	money.cpp	/^void createAccount(account*&);$/;"	p	file:
changeOwner	money.cpp	/^void changeOwner(account*);$/;"	p	file:
withdrawMoney	money.cpp	/^void withdrawMoney(account*);$/;"	p	file:
depositMoney	money.cpp	/^void depositMoney(account*);$/;"	p	file:
thatInterest	money.cpp	/^void thatInterest(account*);$/;"	p	file:
exchangeTo	money.cpp	/^void exchangeTo(account*, currencies);$/;"	p	file:
printAccount	money.cpp	/^void printAccount(account*);$/;"	p	file:
operator <<	money.cpp	/^wostream & operator<<(wostream& stream, const exception& right)$/;"	f
main	money.cpp	/^int main()$/;"	f
line	money.cpp	/^wostream& line(wostream& stream)$/;"	f
menu	money.cpp	/^user_choice menu()$/;"	f
input	money.cpp	/^T input(wstring msg)$/;"	f
createAccount	money.cpp	/^void createAccount(account*& acc)$/;"	f
changeOwner	money.cpp	/^void changeOwner(account* acc)$/;"	f
withdrawMoney	money.cpp	/^void withdrawMoney(account* acc)$/;"	f
depositMoney	money.cpp	/^void depositMoney(account* acc)$/;"	f
thatInterest	money.cpp	/^void thatInterest(account* acc)$/;"	f
exchangeTo	money.cpp	/^void exchangeTo(account* acc, currencies currency)$/;"	f
printAccount	money.cpp	/^void printAccount(account* acc)$/;"	f
money	money.cpp	/^money::money(double summa, currencies currency) throw (invalid_argument)$/;"	f	class:money
money	money.cpp	/^money::money(unsigned int int_part, unsigned char fract_part, currencies currency)$/;"	f	class:money
getCurrency	money.cpp	/^currencies money::getCurrency()$/;"	f	class:money
setCurrency	money.cpp	/^void money::setCurrency(currencies currency)$/;"	f	class:money
smallChange	money.cpp	/^inline unsigned long long money::smallChange() const$/;"	f	class:money
operator +	money.cpp	/^money operator+(const money& left, const money& right)$/;"	f
operator -	money.cpp	/^money operator-(const money& left, const money& right) throw (invalid_argument)$/;"	f
operator *	money.cpp	/^money operator*(const money& left, double right)$/;"	f
operator *	money.cpp	/^inline money operator*(double left, const money& right)$/;"	f
operator <	money.cpp	/^bool operator<(const money& left, const money& right)$/;"	f
operator >	money.cpp	/^bool operator>(const money& left, const money& right)$/;"	f
operator <<	money.cpp	/^wostream & operator<<(wostream& stream, const money& right)$/;"	f
operator >>	money.cpp	/^wistream & operator>>(wistream& stream, money& right)$/;"	f
exchange	money.cpp	/^money exchanger::exchange(const money& summa, currencies currency)$/;"	f	class:exchanger
account	money.cpp	/^account::account(const wstring& surname, acc_num_type account_num, double percent, const money& cash)$/;"	f	class:account
setOwner	money.cpp	/^void account::setOwner(const wstring& surname)$/;"	f	class:account
getOwner	money.cpp	/^const wstring& account::getOwner() const$/;"	f	class:account
withdrawMoney	money.cpp	/^bool account::withdrawMoney(const money& summa)$/;"	f	class:account
depositMoney	money.cpp	/^void account::depositMoney(const money& summa)$/;"	f	class:account
thatInterest	money.cpp	/^void account::thatInterest()$/;"	f	class:account
exchangeTo	money.cpp	/^void account::exchangeTo(currencies currency)$/;"	f	class:account
getCash	money.cpp	/^money account::getCash() const$/;"	f	class:account
operator <<	money.cpp	/^wostream & operator<<(wostream& stream, const account& right)$/;"	f
main	multimap1.cpp	/^int main()$/;"	f
foo	mutate.c	/^void foo(void);$/;"	p	file:
change_page_permissions_of_address	mutate.c	/^int change_page_permissions_of_address(void *addr);$/;"	p	file:
main	mutate.c	/^int main(void) {$/;"	f
foo	mutate.c	/^void foo(void) {$/;"	f
change_page_permissions_of_address	mutate.c	/^int change_page_permissions_of_address(void *addr) {$/;"	f
main	nat_div.cpp	/^int main()$/;"	f
main	num_inp.cpp	/^int main() {$/;"	f
main	over_queue.cpp	/^int main()$/;"	f
Vector	overloading.cpp	/^class Vector$/;"	c	file:
x	overloading.cpp	/^    int x, y;$/;"	m	class:Vector	file:
y	overloading.cpp	/^    int x, y;$/;"	m	class:Vector	file:
Vector	overloading.cpp	/^    Vector(int x = 0, int y = 0) :$/;"	f	class:Vector
operator +	overloading.cpp	/^    Vector operator+(Vector const& v) {$/;"	f	class:Vector
operator -	overloading.cpp	/^    Vector operator-() const { return Vector(-x, -y); }$/;"	f	class:Vector
operator -	overloading.cpp	/^    Vector& operator-(Vector const& v) {$/;"	f	class:Vector
operator *	overloading.cpp	/^    Vector& operator*(double const d) {$/;"	f	class:Vector
operator *=	overloading.cpp	/^    Vector& operator*=(double const d) {$/;"	f	class:Vector
operator ++	overloading.cpp	/^    Vector& operator++() { \/\/ prefix$/;"	f	class:Vector
operator ++	overloading.cpp	/^    Vector operator++(int) { \/\/ postfix$/;"	f	class:Vector
set_x	overloading.cpp	/^    void set_x(int const &n) { x = n; }$/;"	f	class:Vector
set_y	overloading.cpp	/^    void set_y(int const &n) { y = n; }$/;"	f	class:Vector
get_x	overloading.cpp	/^    int get_x() const { return x; }$/;"	f	class:Vector
get_y	overloading.cpp	/^    int get_y() const { return y; }$/;"	f	class:Vector
operator >>	overloading.cpp	/^    friend std::istream& operator>>(std::istream &is, Vector &v) {$/;"	f	class:Vector
operator <<	overloading.cpp	/^    friend std::ostream& operator<<(std::ostream &os, Vector const& v) {$/;"	f	class:Vector
main	overloading.cpp	/^int main(void)$/;"	f
w_spc	pascal_triangle.cpp	/^void w_spc (int w)$/;"	f
Cnk	pascal_triangle.cpp	/^double Cnk(int N,int K)$/;"	f
main	pascal_triangle.cpp	/^int main(void)$/;"	f
Person	person.hpp	/^struct Person {$/;"	s
Person	person.hpp	/^	Person(string const& name, int age)$/;"	f	struct:Person
~Person	person.hpp	/^	virtual ~Person() {}$/;"	f	struct:Person
name	person.hpp	/^	virtual string name() const { return name_; }$/;"	f	struct:Person
age	person.hpp	/^	int age() const { return age_; }$/;"	f	struct:Person
ocupation	person.hpp	/^	virtual string ocupation() const = 0;$/;"	p	struct:Person
name_	person.hpp	/^	string name_;$/;"	m	struct:Person
age_	person.hpp	/^	int age_;$/;"	m	struct:Person
Teacher	person.hpp	/^struct Teacher : Person {$/;"	s
Teacher	person.hpp	/^	Teacher(string const& nm, int age, string const& course)$/;"	f	struct:Teacher
ocupation	person.hpp	/^	virtual string ocupation() const { return "teacher"; }$/;"	f	struct:Teacher
course	person.hpp	/^	virtual string course()	   const { return course_; }$/;"	f	struct:Teacher
course_	person.hpp	/^	string course_;$/;"	m	struct:Teacher
Professor	person.hpp	/^struct Professor : Teacher {$/;"	s
Professor	person.hpp	/^	Professor(string const& name, int age, string const& course,$/;"	f	struct:Professor
thesis	person.hpp	/^	virtual string thesis() const { return thesis_; }$/;"	f	struct:Professor
name	person.hpp	/^	virtual string name()   const { return "Prof. " + Person::name(); }$/;"	f	struct:Professor
ocupation	person.hpp	/^	virtual string ocupation() const { return "professor"; }$/;"	f	struct:Professor
thesis_	person.hpp	/^	string thesis_;$/;"	m	struct:Professor
Student	person.hpp	/^struct Student : Person {$/;"	s
Student	person.hpp	/^	Student(string const& name, int age, string const& uni)$/;"	f	struct:Student
ocupation	person.hpp	/^	virtual string ocupation()  const { return "student"; }$/;"	f	struct:Student
university	person.hpp	/^	virtual string university() const { return uni_; }$/;"	f	struct:Student
uni_	person.hpp	/^	string uni_;$/;"	m	struct:Student
shift	point.cpp	/^void Point::shift(double x, double y)$/;"	f	class:Point
Point	point.hpp	/^struct Point$/;"	s
Point	point.hpp	/^	explicit Point(double x = 0, double y = 0)$/;"	f	struct:Point
x	point.hpp	/^	double x;$/;"	m	struct:Point
y	point.hpp	/^	double y;$/;"	m	struct:Point
shift	point.hpp	/^	void shift(double x, double y);$/;"	p	struct:Point
main	pointer.cpp	/^int main() {$/;"	f
main	power_of_two.cpp	/^int main()$/;"	f
main	pre_max.cpp	/^int main()$/;"	f
printLast10Lines	printLast10Lines.cpp	/^void printLast10Lines(char* fileName) {$/;"	f
Rational	rational.hpp	/^struct Rational$/;"	s
Rational	rational.hpp	/^    Rational(int numerator = 0, int denominator = 1);$/;"	p	struct:Rational
add	rational.hpp	/^    void add(Rational rational);$/;"	p	struct:Rational
sub	rational.hpp	/^    void sub(Rational rational);$/;"	p	struct:Rational
mul	rational.hpp	/^    void mul(Rational rational);$/;"	p	struct:Rational
div	rational.hpp	/^    void div(Rational rational);$/;"	p	struct:Rational
neg	rational.hpp	/^    void neg();$/;"	p	struct:Rational
inv	rational.hpp	/^    void inv();$/;"	p	struct:Rational
to_double	rational.hpp	/^    double to_double() const;$/;"	p	struct:Rational
operator +=	rational.hpp	/^    Rational& operator+=(const Rational & rational) {$/;"	f	struct:Rational
operator +=	rational.hpp	/^    Rational& operator+=(int d)                      {$/;"	f	struct:Rational
operator -=	rational.hpp	/^    Rational& operator-=(const Rational & rational) {$/;"	f	struct:Rational
operator -=	rational.hpp	/^    Rational& operator-=(int d)                      {$/;"	f	struct:Rational
operator *=	rational.hpp	/^    Rational& operator*=(const Rational & rational) {$/;"	f	struct:Rational
operator *=	rational.hpp	/^    Rational& operator*=(int d)                     {$/;"	f	struct:Rational
operator /=	rational.hpp	/^    Rational& operator\/=(const Rational & rational) {$/;"	f	struct:Rational
operator /=	rational.hpp	/^    Rational& operator\/=(int d)                     {$/;"	f	struct:Rational
operator -	rational.hpp	/^    Rational operator-() const {$/;"	f	struct:Rational
operator +	rational.hpp	/^    Rational operator+() const {$/;"	f	struct:Rational
operator +	rational.hpp	/^	Rational operator+(const Rational & rational) const {$/;"	f	struct:Rational
operator +	rational.hpp	/^    Rational operator+(int d) const {$/;"	f	struct:Rational
operator +	rational.hpp	/^    friend Rational operator+(int d, const Rational & rational) {$/;"	f	struct:Rational
operator -	rational.hpp	/^    Rational operator-(const Rational & rational) const {$/;"	f	struct:Rational
operator -	rational.hpp	/^    Rational operator-(double d) const {$/;"	f	struct:Rational
operator -	rational.hpp	/^    friend Rational operator-(int d, const Rational & rational) {$/;"	f	struct:Rational
operator *	rational.hpp	/^    Rational operator*(const Rational & rational) const {$/;"	f	struct:Rational
operator *	rational.hpp	/^    Rational operator*(int d) const {$/;"	f	struct:Rational
operator *	rational.hpp	/^    friend Rational operator*(int d, const Rational & rational) {$/;"	f	struct:Rational
operator /	rational.hpp	/^    Rational operator\/(const Rational & rational) const {$/;"	f	struct:Rational
operator /	rational.hpp	/^    Rational operator\/(int d) const {$/;"	f	struct:Rational
operator /	rational.hpp	/^    friend Rational operator\/(int d, const Rational & rational) {$/;"	f	struct:Rational
to_double_	rational.hpp	/^	double to_double_() const {$/;"	f	struct:Rational
operator double	rational.hpp	/^	operator double() const {$/;"	f	struct:Rational
operator <	rational.hpp	/^	bool operator<(const Rational & rational) const {$/;"	f	struct:Rational
operator <	rational.hpp	/^    bool operator<(int d) const {$/;"	f	struct:Rational
operator <	rational.hpp	/^    friend bool operator<(int d, const Rational & rational) {$/;"	f	struct:Rational
operator >	rational.hpp	/^    bool operator>(const Rational & rational) const {$/;"	f	struct:Rational
operator >	rational.hpp	/^    bool operator>(int d) const {$/;"	f	struct:Rational
operator >	rational.hpp	/^    friend bool operator>(int d, const Rational & rational) {$/;"	f	struct:Rational
operator <=	rational.hpp	/^    bool operator<=(const Rational & rational) const {$/;"	f	struct:Rational
operator <=	rational.hpp	/^    bool operator<=(int d) const {$/;"	f	struct:Rational
operator <=	rational.hpp	/^    friend bool operator<=(int d, const Rational & rational) {$/;"	f	struct:Rational
operator >=	rational.hpp	/^    bool operator>=(const Rational & rational) const {$/;"	f	struct:Rational
operator >=	rational.hpp	/^    bool operator>=(int d) const {$/;"	f	struct:Rational
operator >=	rational.hpp	/^    friend bool operator>=(int d, const Rational & rational) {$/;"	f	struct:Rational
operator ==	rational.hpp	/^    bool operator==(const Rational & rational) const {$/;"	f	struct:Rational
operator ==	rational.hpp	/^    bool operator==(int d) const {$/;"	f	struct:Rational
operator ==	rational.hpp	/^    friend bool operator==(int d, const Rational & rational) {$/;"	f	struct:Rational
operator !=	rational.hpp	/^    bool operator!=(const Rational & rational) const {$/;"	f	struct:Rational
operator !=	rational.hpp	/^    bool operator!=(int d) const {$/;"	f	struct:Rational
operator !=	rational.hpp	/^    friend bool operator!=(int d, const Rational & rational) {$/;"	f	struct:Rational
numerator_	rational.hpp	/^    int numerator_;$/;"	m	struct:Rational
denominator_	rational.hpp	/^    unsigned denominator_;$/;"	m	struct:Rational
operator +	rational.hpp	/^Rational operator+(Rational lhs, Rational rhs);$/;"	p
operator -	rational.hpp	/^Rational operator-(Rational lhs, Rational rhs);$/;"	p
operator *	rational.hpp	/^Rational operator*(Rational lhs, Rational rhs);$/;"	p
operator /	rational.hpp	/^Rational operator\/(Rational lhs, Rational rhs);$/;"	p
factorial	recurs.cpp	/^int factorial(int x) {$/;"	f
main	recurs.cpp	/^int main(void) {$/;"	f
main	rounding_up_to_50.cpp	/^int main()$/;"	f
DEBUG	sample_debug.c	2;"	d	file:
main	sample_debug.c	/^int main()$/;"	f
length	segment.cpp	/^double Segment::length()$/;"	f	class:Segment
Segment	segment.hpp	/^struct Segment$/;"	s
Segment	segment.hpp	/^	Segment(Point p1, Point p2)$/;"	f	struct:Segment
Segment	segment.hpp	/^	explicit Segment(double length)$/;"	f	struct:Segment
p1	segment.hpp	/^	Point p1;$/;"	m	struct:Segment
p2	segment.hpp	/^	Point p2;$/;"	m	struct:Segment
length	segment.hpp	/^	double length();$/;"	p	struct:Segment
operator <<	selection_sort.cpp	/^std::ostream& operator<<(std::ostream &os, std::vector<int> const &vec) {$/;"	f
main	selection_sort.cpp	/^int main(void)$/;"	f
main	sequence.cpp	/^int main(void)$/;"	f
left_one	shift_array.cpp	/^void left_one(int* m, int size)$/;"	f
rotate	shift_array.cpp	/^void rotate(int a[], unsigned size, int shift)$/;"	f
main	shift_array.cpp	/^int main()$/;"	f
shuffle	shuffles.cpp	/^std::vector<T> shuffle(std::vector<T> const &array)$/;"	f
main	shuffles.cpp	/^int main()$/;"	f
Array	sizeof.cpp	/^struct Array {$/;"	s	file:
Array	sizeof.cpp	/^	explicit Array(size_t size)$/;"	f	struct:Array
~Array	sizeof.cpp	/^	~Array() {$/;"	f	struct:Array
operator []	sizeof.cpp	/^	type operator[](size_t i) {$/;"	f	struct:Array
size_	sizeof.cpp	/^	size_t size_;$/;"	m	struct:Array	file:
data_	sizeof.cpp	/^	type * data_;$/;"	m	struct:Array	file:
Array	sizeof.cpp	/^struct Array<bool> {$/;"	s	file:
INTBITS	sizeof.cpp	/^	static int const INTBITS = 8 * sizeof(int);$/;"	m	struct:Array	file:
Array	sizeof.cpp	/^	explicit Array(size_t size)$/;"	f	struct:Array
~Array	sizeof.cpp	/^	~Array() {$/;"	f	struct:Array
operator []	sizeof.cpp	/^	bool operator[](size_t i) const {$/;"	f	struct:Array
size_	sizeof.cpp	/^	size_t size_;$/;"	m	struct:Array	file:
data_	sizeof.cpp	/^	int *  data_;$/;"	m	struct:Array	file:
main	sizeof.cpp	/^int main() {$/;"	f
Foo	smart_pointer.cpp	/^struct Foo$/;"	s	file:
Foo	smart_pointer.cpp	/^    Foo() {$/;"	f	struct:Foo
show	smart_pointer.cpp	/^    void show() {$/;"	f	struct:Foo
~Foo	smart_pointer.cpp	/^    ~Foo () {$/;"	f	struct:Foo
DeleteFoo	smart_pointer.cpp	/^class DeleteFoo$/;"	c	file:
operator ()	smart_pointer.cpp	/^    void operator() (Foo* p) const {$/;"	f	class:DeleteFoo
main	smart_pointer.cpp	/^int main()$/;"	f
myAbs	sortArray.cpp	/^int myAbs(int a){$/;"	f
getMax	sortArray.cpp	/^int getMax(int a, int b) {$/;"	f
getMin	sortArray.cpp	/^int getMin(int a, int b) {$/;"	f
main	sortArray.cpp	/^int main() {$/;"	f
sqrt_cpu_newton	sqrt.cpp	/^unsigned sqrt_cpu_newton(long L)$/;"	f
Q_rsqrt	sqrt.cpp	/^float Q_rsqrt( float number )$/;"	f
main	sqrt.cpp	/^int main(void)$/;"	f
square	square.cpp	/^int square(int x)$/;"	f
main	square.cpp	/^int main()$/;"	f
SQUARE_HPP	square.hpp	2;"	d
square	square.hpp	/^int square(int x);$/;"	p
square	square_preprocessed.cpp	/^int square(int x)$/;"	f
main	std::map_practice.cpp	/^int main(int argc, char* argv[])$/;"	f
Ints	stepic_main.cpp	/^typedef Array<int> Ints;$/;"	t	file:
IInts	stepic_main.cpp	/^typedef Array<Ints, size_t, Ints const&> IInts;$/;"	t	file:
main	stepic_main.cpp	/^int main(int argc, char **argv)$/;"	f
StringsWork	story.cpp	/^class StringsWork$/;"	c	file:
str	story.cpp	/^    char str[256];\/\/строка, которая доступна классу$/;"	m	class:StringsWork	file:
StringsWork	story.cpp	/^    StringsWork()\/\/конструктор в котором очистим строку класса от мусора$/;"	f	class:StringsWork
operator +	story.cpp	/^    void operator +(char*);\/\/прототип метода класса в котором мы перегрузим оператор +$/;"	p	class:StringsWork	file:
getStr	story.cpp	/^    void getStr();\/\/метод вывода данных на экран$/;"	p	class:StringsWork	file:
operator +	story.cpp	/^void StringsWork::operator +(char *s) \/\/что должен выполнить оператор +$/;"	f	class:StringsWork
getStr	story.cpp	/^void StringsWork::getStr()$/;"	f	class:StringsWork
main	story.cpp	/^int main()$/;"	f
strcat	str_cat.cpp	/^void strcat(char *to, const char *from) {$/;"	f
main	str_cat.cpp	/^int main() {$/;"	f
str_len	str_len.cpp	/^unsigned str_len(const char *str)$/;"	f
main	str_len.cpp	/^int main() {$/;"	f
append	string.cp.cpp	/^void String::append(String const &other)$/;"	f	class:String
length	string.cp.cpp	/^size_t String::length()$/;"	f	class:String
equal	string.cp.cpp	/^bool String::equal(const String &other)$/;"	f	class:String
swap	string.cp.cpp	/^void String::swap(String &other)$/;"	f	class:String
operator +	string.cp.cpp	/^String operator+(String s1, String const& s2) {$/;"	f
write	string.cp.cpp	/^void String::PreparedString::write(std::ostream& out) const$/;"	f	class:String::PreparedString
operator []	string.cp.cpp	/^String String::PreparedString::operator[](unsigned int to) const$/;"	f	class:String::PreparedString
PreparedString	string.cp.cpp	/^String::PreparedString::PreparedString(const String& source_in, unsigned int from_in): source(source_in), from(from_in)$/;"	f	class:String::PreparedString
operator []	string.cp.cpp	/^String::PreparedString String::operator[](unsigned int from) const$/;"	f	class:String
write	string.cp.cpp	/^void String::write(std::ostream& out) const$/;"	f	class:String
main	string.cpp	/^int main()$/;"	f
String	string.hpp	/^struct String$/;"	s
String	string.hpp	/^	String(const char *str = "") {$/;"	f	struct:String
String	string.hpp	/^	String(size_t n, char c) {$/;"	f	struct:String
~String	string.hpp	/^	~String() {$/;"	f	struct:String
operator =	string.hpp	/^	String &operator=(const String &other) {$/;"	f	struct:String
operator +=	string.hpp	/^	String &operator+=(String const& s) {$/;"	f	struct:String
at	string.hpp	/^	char & at(size_t idx)       { return str[idx]; }$/;"	f	struct:String
at	string.hpp	/^	char   at(size_t idx) const { return str[idx+1]; }$/;"	f	struct:String
swap	string.hpp	/^	void swap(String &other);$/;"	p	struct:String
append	string.hpp	/^	void append(String const &other);$/;"	p	struct:String
length	string.hpp	/^	size_t length();$/;"	p	struct:String
get	string.hpp	/^	char &get(size_t pos);$/;"	p	struct:String
equal	string.hpp	/^	bool equal(const String &other);$/;"	p	struct:String
PreparedString	string.hpp	/^	class PreparedString {$/;"	c	struct:String
write	string.hpp	/^        void write(std::ostream& out) const;$/;"	p	class:String::PreparedString
operator []	string.hpp	/^        String operator[](unsigned int to) const;$/;"	p	class:String::PreparedString
PreparedString	string.hpp	/^        PreparedString(const String& source_in, unsigned int from_in);$/;"	p	class:String::PreparedString
source	string.hpp	/^        const String& source;$/;"	m	class:String::PreparedString
from	string.hpp	/^        unsigned int from;$/;"	m	class:String::PreparedString
write	string.hpp	/^    void write(std::ostream& out) const;$/;"	p	struct:String
operator []	string.hpp	/^    PreparedString operator[](unsigned int from) const;$/;"	p	struct:String
str	string.hpp	/^	char *str;$/;"	m	struct:String
size	string.hpp	/^	size_t size;$/;"	m	struct:String
add	sum_wo_plus.cpp	/^int add(int a, int b)$/;"	f
main	sum_wo_plus.cpp	/^int main(void)$/;"	f
bitSwapRequired	swap_bits.cpp	/^int bitSwapRequired(int a, int b) {$/;"	f
main	swap_bits.cpp	/^int main() {$/;"	f
main	swap_var_math.cpp	/^int main()$/;"	f
swap	swap_wo_tmp.cpp	/^void swap(int &a, int &b)$/;"	f
swap_opt	swap_wo_tmp.cpp	/^void swap_opt(int &a, int &b)$/;"	f
main	swap_wo_tmp.cpp	/^int main(void)$/;"	f
ICloneable	template_clonable.cpp	/^struct ICloneable$/;"	s	file:
clone	template_clonable.cpp	/^    virtual ICloneable* clone() const = 0;$/;"	p	struct:ICloneable	file:
~ICloneable	template_clonable.cpp	/^    virtual ~ICloneable() { }$/;"	f	struct:ICloneable
ValueHolder	template_clonable.cpp	/^struct ValueHolder : ICloneable {$/;"	s	file:
ValueHolder	template_clonable.cpp	/^    ValueHolder(const T& data): data_(data){}$/;"	f	struct:ValueHolder
data_	template_clonable.cpp	/^    T data_;$/;"	m	struct:ValueHolder	file:
clone	template_clonable.cpp	/^    ValueHolder * clone() const {$/;"	f	struct:ValueHolder
Any	template_clonable.cpp	/^class Any$/;"	c	file:
ptr	template_clonable.cpp	/^    ICloneable * ptr;$/;"	m	class:Any	file:
Any	template_clonable.cpp	/^    Any() : ptr(0) { }$/;"	f	class:Any
Any	template_clonable.cpp	/^    Any(const V& v) : ptr(new ValueHolder<V>(v)) { }$/;"	f	class:Any
Any	template_clonable.cpp	/^    Any(Any const & other) : ptr(other.ptr ? other.ptr->clone() : 0) {}$/;"	f	class:Any
operator =	template_clonable.cpp	/^    Any& operator=(Any const & other)$/;"	f	class:Any
operator =	template_clonable.cpp	/^    Any& operator=(A const& other)$/;"	f	class:Any
~Any	template_clonable.cpp	/^    ~Any() { delete ptr; }$/;"	f	class:Any
cast	template_clonable.cpp	/^    T* cast()$/;"	f	class:Any
TimedSection	test_out.cpp	/^class TimedSection$/;"	c	file:
d_name	test_out.cpp	/^	char const *d_name;$/;"	m	class:TimedSection	file:
d_start	test_out.cpp	/^    struct timespec d_start;$/;"	m	class:TimedSection	typeref:struct:TimedSection::timespec	file:
TimedSection	test_out.cpp	/^	TimedSection(char const *name)$/;"	f	class:TimedSection
~TimedSection	test_out.cpp	/^	~TimedSection()$/;"	f	class:TimedSection
main	test_out.cpp	/^int main()$/;"	f
main	test_switch.cpp	/^int main()$/;"	f
thread_routine	threads.c	/^void *thread_routine(void *arg)$/;"	f
main	threads.c	/^int main(int argc, char ** argv)$/;"	f
main	tri_num.cpp	/^int main(int argc, char** argv)$/;"	f
MAX	triangular_num__.cpp	4;"	d	file:
ReadA	triangular_num__.cpp	/^bool ReadA(double &a)$/;"	f
main	triangular_num__.cpp	/^int main(void)$/;"	f
main	unlim_for.c	/^int main()$/;"	f
print_node	xml_parser.cpp	/^void print_node(const xmlpp::Node* node, unsigned int indentation = 0)$/;"	f
main	xml_parser.cpp	/^int main(int argc, char* argv[])$/;"	f
tabs	tree.cpp	/^int tabs = 0;$/;"	v
Node	tree.cpp	/^struct Node$/;"	s	file:
p_key	tree.cpp	/^    int   p_key;$/;"	m	struct:Node	file:
p_left	tree.cpp	/^    Node* p_left  = nullptr;$/;"	m	struct:Node	file:
p_right	tree.cpp	/^    Node* p_right = nullptr;$/;"	m	struct:Node	file:
insert	tree.cpp	/^void insert(Node* &p_tree, int key)$/;"	f
free	tree.cpp	/^void free(Node* p_tree)$/;"	f
print	tree.cpp	/^void print(Node* p_tree)$/;"	f
main	tree.cpp	/^int main()$/;"	f
node	cyberforums_tree.cpp	/^struct  node$/;"	s	file:
Key	cyberforums_tree.cpp	/^  int Key;$/;"	m	struct:node	file:
Count	cyberforums_tree.cpp	/^  int Count;$/;"	m	struct:node	file:
Left	cyberforums_tree.cpp	/^  node *Left;$/;"	m	struct:node	file:
Right	cyberforums_tree.cpp	/^  node *Right;$/;"	m	struct:node	file:
TREE	cyberforums_tree.cpp	/^class TREE$/;"	c	file:
Tree	cyberforums_tree.cpp	/^    node *Tree; \/\/Указатель на корень дерева.$/;"	m	class:TREE	file:
Search	cyberforums_tree.cpp	/^    void Search (int,node**);$/;"	p	class:TREE	file:
TREE	cyberforums_tree.cpp	/^    TREE() {Tree=NULL;}$/;"	f	class:TREE
GetTree	cyberforums_tree.cpp	/^    node** GetTree () {return &Tree;} \/\/Получение вершины дерева.$/;"	f	class:TREE
BuildTree	cyberforums_tree.cpp	/^    void BuildTree ();$/;"	p	class:TREE	file:
CleanTree	cyberforums_tree.cpp	/^    void CleanTree (node **);$/;"	p	class:TREE	file:
ObhodEnd	cyberforums_tree.cpp	/^    void ObhodEnd (node **);$/;"	p	class:TREE	file:
ObhodLeft	cyberforums_tree.cpp	/^    void ObhodLeft (node **);$/;"	p	class:TREE	file:
ObhodBack	cyberforums_tree.cpp	/^    void ObhodBack (node **);$/;"	p	class:TREE	file:
Vyvod	cyberforums_tree.cpp	/^    void Vyvod (node**,int);$/;"	p	class:TREE	file:
Height	cyberforums_tree.cpp	/^    int Height (node**);$/;"	p	class:TREE	file:
main	cyberforums_tree.cpp	/^int main ()$/;"	f
BuildTree	cyberforums_tree.cpp	/^void TREE::BuildTree ()$/;"	f	class:TREE
Search	cyberforums_tree.cpp	/^void TREE::Search (int x,node **p)$/;"	f	class:TREE
ObhodLeft	cyberforums_tree.cpp	/^void TREE::ObhodLeft (node **w)$/;"	f	class:TREE
ObhodEnd	cyberforums_tree.cpp	/^void TREE::ObhodEnd (node **w)$/;"	f	class:TREE
ObhodBack	cyberforums_tree.cpp	/^void TREE::ObhodBack (node **w)$/;"	f	class:TREE
CleanTree	cyberforums_tree.cpp	/^void TREE::CleanTree (node **w)$/;"	f	class:TREE
Vyvod	cyberforums_tree.cpp	/^void TREE::Vyvod (node **w,int l)$/;"	f	class:TREE
Height	cyberforums_tree.cpp	/^int TREE::Height (node **w)$/;"	f	class:TREE
second_largest	exam_1.cpp	/^int second_largest(std::vector<int> array)$/;"	f
main	exam_1.cpp	/^int main()$/;"	f
f	fizz_buzz_convert.c	/^f(char*s) {$/;"	f
main	fizz_buzz_convert.c	/^int main()$/;"	f
main	loop.c	/^int main(void)$/;"	f
rocket	rocket.c	/^const char rocket[] =$/;"	v
main	rocket.c	/^int main()$/;"	f
indent	xml_text_parser.cc	/^struct indent$/;"	s	file:
depth_	xml_text_parser.cc	/^	int depth_;$/;"	m	struct:indent	file:
indent	xml_text_parser.cc	/^	explicit indent(int depth): depth_(depth) {};$/;"	f	struct:indent
main	xml_text_parser.cc	/^int main(int argc, char** argv)$/;"	f
main	pyramide.c	/^int main()$/;"	f
main	const_cast.cpp	/^int main(int argc, char const** argv)$/;"	f
main	shutdown.c	/^int main()$/;"	f
main	test_.cpp	/^int main()$/;"	f
a	array.cpp	/^int a[] = {1, 2, 3};$/;"	v
a	array.cpp	/^int a[3] = {1, 2, 3};$/;"	v
b	array.cpp	/^int b[5] = {1, 2, 3};$/;"	v
b	array.cpp	/^int b[5] = {1, 2, 3, 0, 0};$/;"	v
c	array.cpp	/^int c[7] = {1, [5] = 10, 20, [1] = 2};$/;"	v
main	array_ptr_test.c	/^int main()$/;"	f
binarySearch	binary_search.cpp	/^vector<int>::const_iterator binarySearch(const vector<int>& container, int element)$/;"	f
main	binary_search.cpp	/^int main()$/;"	f
HashTable	HashTable.cpp	/^HashTable::HashTable() {$/;"	f	class:HashTable
Hash	HashTable.cpp	/^unsigned int HashTable::Hash(cell* Account) {$/;"	f	class:HashTable
Add	HashTable.cpp	/^void HashTable::Add(cell* NewCell) {$/;"	f	class:HashTable
ReadFile	HashTable.cpp	/^void HashTable::ReadFile(const char *DocumentName) {$/;"	f	class:HashTable
Print	HashTable.cpp	/^void HashTable::Print() {$/;"	f	class:HashTable
Find	HashTable.cpp	/^bool HashTable::Find(cell *DesiredCell) {$/;"	f	class:HashTable
RemoveCell	HashTable.cpp	/^bool HashTable::RemoveCell(cell* DesiredCell){$/;"	f	class:HashTable
~HashTable	HashTable.cpp	/^HashTable::~HashTable() {$/;"	f	class:HashTable
Equal	HashTable.cpp	/^bool HashTable::Equal(cell* l, cell* r) {$/;"	f	class:HashTable
main	hex_test.cpp	/^int main()$/;"	f
main	paper.cpp	/^int main()$/;"	f
main	percent.cpp	/^int main() {$/;"	f
main	ptr_array.c	/^int main()$/;"	f
main	quest.cpp	/^int main()$/;"	f
main	seg_off.c	/^int main(void)$/;"	f
main	short_prog.c	/^main(a){printf(a,34,a="main(a){printf(a,34,a=%c%s%c,34);}",34);}$/;"	f
Transport	sql_connect.2.cpp	/^class Transport$/;"	c	file:
NameTrans	sql_connect.2.cpp	/^    string NameTrans;$/;"	m	class:Transport	file:
skorost	sql_connect.2.cpp	/^    int skorost;$/;"	m	class:Transport	file:
set_NameTrans	sql_connect.2.cpp	/^    void set_NameTrans (string Name) {$/;"	f	class:Transport
set_skorost	sql_connect.2.cpp	/^    void set_skorost (int sk) {$/;"	f	class:Transport
Transport	sql_connect.2.cpp	/^    Transport (string NameTrans = "slomai_sebe_komp", int skorost = 13)$/;"	f	class:Transport
Element	sql_connect.2.cpp	/^struct Element$/;"	s	file:
val	sql_connect.2.cpp	/^    T val;$/;"	m	struct:Element	file:
next	sql_connect.2.cpp	/^    Element<T>* next;$/;"	m	struct:Element	file:
Element	sql_connect.2.cpp	/^    Element() {$/;"	f	struct:Element
List	sql_connect.2.cpp	/^class List$/;"	c	file:
List	sql_connect.2.cpp	/^    List<T> () {$/;"	f	class:List
List	sql_connect.2.cpp	/^    List<T> (const List& old_list) {$/;"	f	class:List
get_size	sql_connect.2.cpp	/^    size_t get_size() const { return size; }$/;"	f	class:List
~List	sql_connect.2.cpp	/^    ~List<T>() {$/;"	f	class:List
append	sql_connect.2.cpp	/^    void append(T& val) {$/;"	f	class:List
show_all	sql_connect.2.cpp	/^    void show_all() {$/;"	f	class:List
operator <<	sql_connect.2.cpp	/^    friend std::ostream& operator<< (std::ostream& os, const List<T>& list) $/;"	f	class:List
operator >>	sql_connect.2.cpp	/^    friend std::istream& operator>> (std::istream &in, List<T>& list) {$/;"	f	class:List
operator ()	sql_connect.2.cpp	/^    List<T> &operator() (int i) { \/\/Перегрузка операции удаление по номеру$/;"	f	class:List
operator ++	sql_connect.2.cpp	/^  List<T>& operator++ (T c,int i)\/\/Перегрузка операции добавления по номеру  $/;"	f	class:List
operator !=	sql_connect.2.cpp	/^    bool operator!=(const List<T>& L) const {$/;"	f	class:List
p_first	sql_connect.2.cpp	/^    Element<T>* p_first;$/;"	m	class:List	file:
p_last	sql_connect.2.cpp	/^    Element<T>* p_last;$/;"	m	class:List	file:
size	sql_connect.2.cpp	/^    size_t size;$/;"	m	class:List	file:
main	sql_connect.2.cpp	/^int main ()$/;"	f
Transport	sql_connect.cpp	/^class Transport{$/;"	c	file:
NameTrans	sql_connect.cpp	/^    char  NameTrans[30], skorost[30];$/;"	m	class:Transport	file:
skorost	sql_connect.cpp	/^    char  NameTrans[30], skorost[30];$/;"	m	class:Transport	file:
Transport	sql_connect.cpp	/^    Transport();\/\/конструктор безпараметра$/;"	p	class:Transport	file:
Transport	sql_connect.cpp	/^    Transport(char *NameTr,char *skor);\/\/конструкор с двумя параметрами$/;"	p	class:Transport	file:
Print	sql_connect.cpp	/^    void Print();$/;"	p	class:Transport	file:
~Transport	sql_connect.cpp	/^    ~Transport();$/;"	p	class:Transport	file:
Get_NameTrans	sql_connect.cpp	/^    char *Get_NameTrans();$/;"	p	class:Transport	file:
Get_skorost	sql_connect.cpp	/^    char *Get_skorost();$/;"	p	class:Transport	file:
operator =	sql_connect.cpp	/^    Transport &operator=(const Transport &B);$/;"	p	class:Transport	file:
List	sql_connect.cpp	/^class List{$/;"	c	file:
Object	sql_connect.cpp	/^    T Object;$/;"	m	class:List	file:
next	sql_connect.cpp	/^    List<T> *next = NULL;$/;"	m	class:List	file:
first	sql_connect.cpp	/^    List<T> *first = NULL;$/;"	m	class:List	file:
Get_last	sql_connect.cpp	/^    List<T> *Get_last();$/;"	p	class:List	file:
Size	sql_connect.cpp	/^    int Size;$/;"	m	class:List	file:
List	sql_connect.cpp	/^    List();$/;"	p	class:List	file:
List	sql_connect.cpp	/^    List(T *B, int n);$/;"	p	class:List	file:
List	sql_connect.cpp	/^    List(const List<T> &B);$/;"	p	class:List	file:
Input	sql_connect.cpp	/^    void Input(T object);$/;"	p	class:List	file:
Print	sql_connect.cpp	/^    void Print();$/;"	p	class:List	file:
operator []	sql_connect.cpp	/^    T operator[](int i);$/;"	p	class:List	file:
operator +	sql_connect.cpp	/^    List<T> operator+(List<T> B);$/;"	p	class:List	file:
operator ==	sql_connect.cpp	/^    bool operator==(List<T> B);$/;"	p	class:List	file:
operator =	sql_connect.cpp	/^    List<T> &operator=(const List<T> &B);$/;"	p	class:List	file:
~List	sql_connect.cpp	/^    ~List();$/;"	p	class:List	file:
Get_last	sql_connect.cpp	/^List<T> *List<T>::Get_last() {$/;"	f	class:List
List	sql_connect.cpp	/^List<T>::List() {$/;"	f	class:List
List	sql_connect.cpp	/^List<Transport>::List() {$/;"	f	class:List
List	sql_connect.cpp	/^List<T>::List(T *B, int n) {$/;"	f	class:List
List	sql_connect.cpp	/^List<T>::List(const List<T> &B) {$/;"	f	class:List
Input	sql_connect.cpp	/^void List<T>::Input(T object) {$/;"	f	class:List
Print	sql_connect.cpp	/^void List<T>::Print() {$/;"	f	class:List
Print	sql_connect.cpp	/^void List<Transport>::Print() {$/;"	f	class:List
operator []	sql_connect.cpp	/^T List<T>::operator[](int i) {$/;"	f	class:List
operator +	sql_connect.cpp	/^List<T> List<T>::operator+(List<T> B) {$/;"	f	class:List
operator =	sql_connect.cpp	/^List<T> &List<T>::operator=(const List<T> &B) {$/;"	f	class:List
operator ==	sql_connect.cpp	/^bool List<T>::operator==(List<T> B) {$/;"	f	class:List
operator ==	sql_connect.cpp	/^bool List<Transport>::operator==(List<Transport> B) {$/;"	f	class:List
~List	sql_connect.cpp	/^List<T>::~List() {$/;"	f	class:List
Transport	sql_connect.cpp	/^Transport::Transport(){$/;"	f	class:Transport
Transport	sql_connect.cpp	/^Transport::Transport(char *NameTr, char *skor){$/;"	f	class:Transport
Print	sql_connect.cpp	/^void Transport::Print(){$/;"	f	class:Transport
~Transport	sql_connect.cpp	/^Transport::~Transport(){$/;"	f	class:Transport
Get_NameTrans	sql_connect.cpp	/^char *Transport::Get_NameTrans(){$/;"	f	class:Transport
Get_skorost	sql_connect.cpp	/^char *Transport::Get_skorost(){$/;"	f	class:Transport
operator =	sql_connect.cpp	/^Transport &Transport::operator=(const Transport &B){$/;"	f	class:Transport
main	sql_connect.cpp	/^int main() {$/;"	f
main	std_cin.cpp	/^int main()$/;"	f
main	strcpy_practice.cpp	/^int main(int argc, char* argv[])$/;"	f
main	strcpy_practice_symbols.cpp	/^int main(int argc, char* argv[])$/;"	f
SIZE	students.cpp	5;"	d	file:
Student	students.cpp	/^class Student$/;"	c	file:
surname	students.cpp	/^    char *surname;$/;"	m	class:Student	file:
name	students.cpp	/^    char *name;$/;"	m	class:Student	file:
faname	students.cpp	/^    char *faname;$/;"	m	class:Student	file:
birthday	students.cpp	/^    char *birthday;$/;"	m	class:Student	file:
adress	students.cpp	/^    char *adress;$/;"	m	class:Student	file:
phone	students.cpp	/^    char *phone;$/;"	m	class:Student	file:
fac	students.cpp	/^    char *fac;$/;"	m	class:Student	file:
year	students.cpp	/^    char *year;$/;"	m	class:Student	file:
Student	students.cpp	/^    Student() {$/;"	f	class:Student
Student	students.cpp	/^    Student(char *snm, char *nm, char *fnm, char *bthd, char *adr, char *phn, char *fc, char *yr) {$/;"	f	class:Student
Student	students.cpp	/^    Student(const Student &Obj) {$/;"	f	class:Student
~Student	students.cpp	/^    ~Student() {$/;"	f	class:Student
setSnm	students.cpp	/^    void setSnm(char *snm) {$/;"	f	class:Student
setNm	students.cpp	/^    void setNm(char *nm) {$/;"	f	class:Student
setFnm	students.cpp	/^    void setFnm(char *fnm) {$/;"	f	class:Student
setBthd	students.cpp	/^    void setBthd(char *bthd) {$/;"	f	class:Student
setAd	students.cpp	/^    void setAd(char *ad) {$/;"	f	class:Student
setPh	students.cpp	/^    void setPh(char *ph) {$/;"	f	class:Student
setFc	students.cpp	/^    void setFc(char *fc) {$/;"	f	class:Student
setYr	students.cpp	/^    void setYr(char *yr) {$/;"	f	class:Student
showSnm	students.cpp	/^    void showSnm() {$/;"	f	class:Student
showNm	students.cpp	/^    void showNm() {$/;"	f	class:Student
showFnm	students.cpp	/^    void showFnm() {$/;"	f	class:Student
showBthd	students.cpp	/^    void showBthd() {$/;"	f	class:Student
showAd	students.cpp	/^    void showAd() {$/;"	f	class:Student
showPhn	students.cpp	/^    void showPhn() {$/;"	f	class:Student
showFc	students.cpp	/^    void showFc() {$/;"	f	class:Student
showYr	students.cpp	/^    void showYr() {$/;"	f	class:Student
getFc	students.cpp	/^    char* getFc() {$/;"	f	class:Student
getYr	students.cpp	/^    char* getYr() {$/;"	f	class:Student
getBthd	students.cpp	/^    char* getBthd() {$/;"	f	class:Student
readStudents	students.cpp	/^char* readStudents(char* str, Student std[SIZE])$/;"	f
printStudent	students.cpp	/^void printStudent(Student std)$/;"	f
printFacStudent	students.cpp	/^char* printFacStudent(char* str,Student std[SIZE])$/;"	f
printYearStudent	students.cpp	/^char* printYearStudent(char* str,Student std[SIZE])$/;"	f
printBirthdayStudent	students.cpp	/^void printBirthdayStudent(char* str, Student std[SIZE])$/;"	f
readstr	students.cpp	/^char* readstr() {$/;"	f
main	students.cpp	/^int main(int argc, char ** argv)$/;"	f
reading_t	temp.cpp	/^typedef double reading_t;$/;"	t	file:
Failure	temp.cpp	/^class Failure {$/;"	c	file:
Failure	temp.cpp	/^    Failure& Failure(                   \/\/ #1$/;"	f	class:Failure
base	temp.cpp	/^    static int base;$/;"	m	class:Failure	file:
reading	temp.cpp	/^    reading_t  reading;$/;"	m	class:Failure	file:
main	temp.cpp	/^int main()$/;"	f
main	test.cpp	/^int main()$/;"	f
MAX	triangular_num.cpp	23;"	d	file:
ReadA	triangular_num.cpp	/^bool ReadA(int64_t &a)$/;"	f
main	triangular_num.cpp	/^int main(void)$/;"	f
calculate_tri_num	triangular_num_2.c	/^void calculate_tri_num(int n)$/;"	f
main	triangular_num_2.c	/^int main(void)$/;"	f
MAX	triangular_num__.c	3;"	d	file:
ReadA	triangular_num__.c	/^bool ReadA(double &a)$/;"	f
main	triangular_num__.c	/^int main(void)$/;"	f
main	tri_num.c	/^int main(int argc, char** argv)$/;"	f
